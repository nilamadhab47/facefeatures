"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/onnxruntime-web";
exports.ids = ["vendor-chunks/onnxruntime-web"];
exports.modules = {

/***/ "(ssr)/./node_modules/onnxruntime-web/dist/ort-web.node.js":
/*!***********************************************************!*\
  !*** ./node_modules/onnxruntime-web/dist/ort-web.node.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ \"(ssr)/./node_modules/console-browserify/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ \"(ssr)/./node_modules/process/browser.js\");\n\n/*!\n* ONNX Runtime Web v1.16.3\n* Copyright (c) Microsoft Corporation. All rights reserved.\n* Licensed under the MIT License.\n*/ (()=>{\n    var __webpack_modules__ = {\n        5716: (e1, t1, n1)=>{\n            \"use strict\";\n            t1.R = void 0;\n            const r1 = n1(6027), o1 = n1(1723);\n            t1.R = new class {\n                async init() {}\n                async createSessionHandler(e1, t1) {\n                    const n1 = new r1.Session(t1);\n                    return await n1.loadModel(e1), new o1.OnnxjsSessionHandler(n1);\n                }\n            };\n        },\n        2818: (e1, t1, n1)=>{\n            \"use strict\";\n            t1.c8 = t1.rX = void 0;\n            const r1 = n1(6207), o1 = n1(9719), i1 = n1(9544), s1 = n1(6640);\n            t1.rX = ()=>{\n                if ((\"number\" != typeof r1.env.wasm.initTimeout || r1.env.wasm.initTimeout < 0) && (r1.env.wasm.initTimeout = 0), \"boolean\" != typeof r1.env.wasm.simd && (r1.env.wasm.simd = !0), \"boolean\" != typeof r1.env.wasm.proxy && (r1.env.wasm.proxy = !1), \"number\" != typeof r1.env.wasm.numThreads || !Number.isInteger(r1.env.wasm.numThreads) || r1.env.wasm.numThreads <= 0) {\n                    const e1 = \"undefined\" == typeof navigator ? (0, o1.cpus)().length : navigator.hardwareConcurrency;\n                    r1.env.wasm.numThreads = Math.min(4, Math.ceil((e1 || 1) / 2));\n                }\n            }, t1.c8 = new class {\n                async init() {\n                    (0, t1.rX)(), await (0, i1.initializeWebAssemblyInstance)();\n                }\n                async createSessionHandler(e1, t1) {\n                    const n1 = new s1.OnnxruntimeWebAssemblySessionHandler;\n                    return await n1.loadModel(e1, t1), Promise.resolve(n1);\n                }\n            };\n        },\n        1057: function(e1, t1, n1) {\n            \"use strict\";\n            var r1 = this && this.__createBinding || (Object.create ? function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1);\n                var o1 = Object.getOwnPropertyDescriptor(t1, n1);\n                o1 && !(\"get\" in o1 ? !t1.__esModule : o1.writable || o1.configurable) || (o1 = {\n                    enumerable: !0,\n                    get: function() {\n                        return t1[n1];\n                    }\n                }), Object.defineProperty(e1, r1, o1);\n            } : function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1), e1[r1] = t1[n1];\n            }), o1 = this && this.__exportStar || function(e1, t1) {\n                for(var n1 in e1)\"default\" === n1 || Object.prototype.hasOwnProperty.call(t1, n1) || r1(t1, e1, n1);\n            };\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), o1(n1(6207), t1);\n            const i1 = n1(6207), s1 = n1(8408);\n            {\n                const e1 = n1(5716).R;\n                (0, i1.registerBackend)(\"webgl\", e1, -10);\n            }\n            {\n                const e1 = n1(2818).c8;\n                (0, i1.registerBackend)(\"cpu\", e1, 10), (0, i1.registerBackend)(\"wasm\", e1, 10), (0, i1.registerBackend)(\"xnnpack\", e1, 9), (0, i1.registerBackend)(\"webnn\", e1, 9);\n            }\n            i1.env.versions.web = s1.version;\n        },\n        4910: (e1, t1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createAttributeWithCacheKey = void 0;\n            class n1 {\n                constructor(e1){\n                    Object.assign(this, e1);\n                }\n                get cacheKey() {\n                    return this._cacheKey || (this._cacheKey = Object.getOwnPropertyNames(this).sort().map((e1)=>`${this[e1]}`).join(\";\")), this._cacheKey;\n                }\n            }\n            t1.createAttributeWithCacheKey = (e1)=>new n1(e1);\n        },\n        6874: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.Attribute = void 0;\n            const r1 = n1(5127), o1 = n1(2446), i1 = n1(9240), s1 = n1(7273);\n            var a1 = r1.onnxruntime.experimental.fbs;\n            class u1 {\n                constructor(e1){\n                    if (this._attributes = new Map, null != e1) {\n                        for (const t1 of e1)t1 instanceof o1.onnx.AttributeProto ? this._attributes.set(t1.name, [\n                            u1.getValue(t1),\n                            u1.getType(t1)\n                        ]) : t1 instanceof a1.Attribute && this._attributes.set(t1.name(), [\n                            u1.getValue(t1),\n                            u1.getType(t1)\n                        ]);\n                        if (this._attributes.size < e1.length) throw new Error(\"duplicated attribute names\");\n                    }\n                }\n                set(e1, t1, n1) {\n                    this._attributes.set(e1, [\n                        n1,\n                        t1\n                    ]);\n                }\n                delete(e1) {\n                    this._attributes.delete(e1);\n                }\n                getFloat(e1, t1) {\n                    return this.get(e1, \"float\", t1);\n                }\n                getInt(e1, t1) {\n                    return this.get(e1, \"int\", t1);\n                }\n                getString(e1, t1) {\n                    return this.get(e1, \"string\", t1);\n                }\n                getTensor(e1, t1) {\n                    return this.get(e1, \"tensor\", t1);\n                }\n                getFloats(e1, t1) {\n                    return this.get(e1, \"floats\", t1);\n                }\n                getInts(e1, t1) {\n                    return this.get(e1, \"ints\", t1);\n                }\n                getStrings(e1, t1) {\n                    return this.get(e1, \"strings\", t1);\n                }\n                getTensors(e1, t1) {\n                    return this.get(e1, \"tensors\", t1);\n                }\n                get(e1, t1, n1) {\n                    const r1 = this._attributes.get(e1);\n                    if (void 0 === r1) {\n                        if (void 0 !== n1) return n1;\n                        throw new Error(`required attribute not found: ${e1}`);\n                    }\n                    if (r1[1] !== t1) throw new Error(`type mismatch: expected ${t1} but got ${r1[1]}`);\n                    return r1[0];\n                }\n                static getType(e1) {\n                    const t1 = e1 instanceof o1.onnx.AttributeProto ? e1.type : e1.type();\n                    switch(t1){\n                        case o1.onnx.AttributeProto.AttributeType.FLOAT:\n                            return \"float\";\n                        case o1.onnx.AttributeProto.AttributeType.INT:\n                            return \"int\";\n                        case o1.onnx.AttributeProto.AttributeType.STRING:\n                            return \"string\";\n                        case o1.onnx.AttributeProto.AttributeType.TENSOR:\n                            return \"tensor\";\n                        case o1.onnx.AttributeProto.AttributeType.FLOATS:\n                            return \"floats\";\n                        case o1.onnx.AttributeProto.AttributeType.INTS:\n                            return \"ints\";\n                        case o1.onnx.AttributeProto.AttributeType.STRINGS:\n                            return \"strings\";\n                        case o1.onnx.AttributeProto.AttributeType.TENSORS:\n                            return \"tensors\";\n                        default:\n                            throw new Error(`attribute type is not supported yet: ${o1.onnx.AttributeProto.AttributeType[t1]}`);\n                    }\n                }\n                static getValue(e1) {\n                    const t1 = e1 instanceof o1.onnx.AttributeProto ? e1.type : e1.type();\n                    if (t1 === o1.onnx.AttributeProto.AttributeType.GRAPH || t1 === o1.onnx.AttributeProto.AttributeType.GRAPHS) throw new Error(\"graph attribute is not supported yet\");\n                    const n1 = this.getValueNoCheck(e1);\n                    if (t1 === o1.onnx.AttributeProto.AttributeType.INT && s1.LongUtil.isLong(n1)) return s1.LongUtil.longToNumber(n1);\n                    if (t1 === o1.onnx.AttributeProto.AttributeType.INTS) {\n                        const e1 = n1, t1 = new Array(e1.length);\n                        for(let n1 = 0; n1 < e1.length; n1++){\n                            const r1 = e1[n1];\n                            t1[n1] = s1.LongUtil.longToNumber(r1);\n                        }\n                        return t1;\n                    }\n                    if (t1 === o1.onnx.AttributeProto.AttributeType.TENSOR) return e1 instanceof o1.onnx.AttributeProto ? i1.Tensor.fromProto(n1) : i1.Tensor.fromOrtTensor(n1);\n                    if (t1 === o1.onnx.AttributeProto.AttributeType.TENSORS) {\n                        if (e1 instanceof o1.onnx.AttributeProto) return n1.map((e1)=>i1.Tensor.fromProto(e1));\n                        if (e1 instanceof a1.Attribute) return n1.map((e1)=>i1.Tensor.fromOrtTensor(e1));\n                    }\n                    if (t1 === o1.onnx.AttributeProto.AttributeType.STRING && e1 instanceof o1.onnx.AttributeProto) {\n                        const e1 = n1;\n                        return (0, s1.decodeUtf8String)(e1);\n                    }\n                    return t1 === o1.onnx.AttributeProto.AttributeType.STRINGS && e1 instanceof o1.onnx.AttributeProto ? n1.map(s1.decodeUtf8String) : n1;\n                }\n                static getValueNoCheck(e1) {\n                    return e1 instanceof o1.onnx.AttributeProto ? this.getValueNoCheckFromOnnxFormat(e1) : this.getValueNoCheckFromOrtFormat(e1);\n                }\n                static getValueNoCheckFromOnnxFormat(e1) {\n                    switch(e1.type){\n                        case o1.onnx.AttributeProto.AttributeType.FLOAT:\n                            return e1.f;\n                        case o1.onnx.AttributeProto.AttributeType.INT:\n                            return e1.i;\n                        case o1.onnx.AttributeProto.AttributeType.STRING:\n                            return e1.s;\n                        case o1.onnx.AttributeProto.AttributeType.TENSOR:\n                            return e1.t;\n                        case o1.onnx.AttributeProto.AttributeType.GRAPH:\n                            return e1.g;\n                        case o1.onnx.AttributeProto.AttributeType.FLOATS:\n                            return e1.floats;\n                        case o1.onnx.AttributeProto.AttributeType.INTS:\n                            return e1.ints;\n                        case o1.onnx.AttributeProto.AttributeType.STRINGS:\n                            return e1.strings;\n                        case o1.onnx.AttributeProto.AttributeType.TENSORS:\n                            return e1.tensors;\n                        case o1.onnx.AttributeProto.AttributeType.GRAPHS:\n                            return e1.graphs;\n                        default:\n                            throw new Error(`unsupported attribute type: ${o1.onnx.AttributeProto.AttributeType[e1.type]}`);\n                    }\n                }\n                static getValueNoCheckFromOrtFormat(e1) {\n                    switch(e1.type()){\n                        case a1.AttributeType.FLOAT:\n                            return e1.f();\n                        case a1.AttributeType.INT:\n                            return e1.i();\n                        case a1.AttributeType.STRING:\n                            return e1.s();\n                        case a1.AttributeType.TENSOR:\n                            return e1.t();\n                        case a1.AttributeType.GRAPH:\n                            return e1.g();\n                        case a1.AttributeType.FLOATS:\n                            return e1.floatsArray();\n                        case a1.AttributeType.INTS:\n                            {\n                                const t1 = [];\n                                for(let n1 = 0; n1 < e1.intsLength(); n1++)t1.push(e1.ints(n1));\n                                return t1;\n                            }\n                        case a1.AttributeType.STRINGS:\n                            {\n                                const t1 = [];\n                                for(let n1 = 0; n1 < e1.stringsLength(); n1++)t1.push(e1.strings(n1));\n                                return t1;\n                            }\n                        case a1.AttributeType.TENSORS:\n                            {\n                                const t1 = [];\n                                for(let n1 = 0; n1 < e1.tensorsLength(); n1++)t1.push(e1.tensors(n1));\n                                return t1;\n                            }\n                        default:\n                            throw new Error(`unsupported attribute type: ${a1.AttributeType[e1.type()]}`);\n                    }\n                }\n            }\n            t1.Attribute = u1;\n        },\n        1975: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.resolveBackend = t1.backend = void 0;\n            const r1 = n1(4418), o1 = new Map;\n            async function i1(e1) {\n                const n1 = t1.backend;\n                if (void 0 !== n1[e1] && function(e1) {\n                    const t1 = e1;\n                    return \"initialize\" in t1 && \"function\" == typeof t1.initialize && \"createSessionHandler\" in t1 && \"function\" == typeof t1.createSessionHandler && \"dispose\" in t1 && \"function\" == typeof t1.dispose;\n                }(n1[e1])) {\n                    const t1 = n1[e1];\n                    let r1 = t1.initialize();\n                    if (\"object\" == typeof r1 && \"then\" in r1 && (r1 = await r1), r1) return o1.set(e1, t1), t1;\n                }\n            }\n            t1.backend = {\n                webgl: new r1.WebGLBackend\n            }, t1.resolveBackend = async function e1(t1) {\n                if (!t1) return e1([\n                    \"webgl\"\n                ]);\n                {\n                    const e1 = \"string\" == typeof t1 ? [\n                        t1\n                    ] : t1;\n                    for (const t1 of e1){\n                        const e1 = o1.get(t1);\n                        if (e1) return e1;\n                        const n1 = await i1(t1);\n                        if (n1) return n1;\n                    }\n                }\n                throw new Error(\"no available backend to use\");\n            };\n        },\n        4418: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.WebGLBackend = void 0;\n            const r1 = n1(6207), o1 = n1(1315), i1 = n1(2171), s1 = n1(3389);\n            t1.WebGLBackend = class {\n                get contextId() {\n                    return r1.env.webgl.contextId;\n                }\n                set contextId(e1) {\n                    r1.env.webgl.contextId = e1;\n                }\n                get matmulMaxBatchSize() {\n                    return r1.env.webgl.matmulMaxBatchSize;\n                }\n                set matmulMaxBatchSize(e1) {\n                    r1.env.webgl.matmulMaxBatchSize = e1;\n                }\n                get textureCacheMode() {\n                    return r1.env.webgl.textureCacheMode;\n                }\n                set textureCacheMode(e1) {\n                    r1.env.webgl.textureCacheMode = e1;\n                }\n                get pack() {\n                    return r1.env.webgl.pack;\n                }\n                set pack(e1) {\n                    r1.env.webgl.pack = e1;\n                }\n                get async() {\n                    return r1.env.webgl.async;\n                }\n                set async(e1) {\n                    r1.env.webgl.async = e1;\n                }\n                initialize() {\n                    try {\n                        return this.glContext = (0, s1.createWebGLContext)(this.contextId), \"number\" != typeof this.matmulMaxBatchSize && (this.matmulMaxBatchSize = 16), \"string\" != typeof this.textureCacheMode && (this.textureCacheMode = \"full\"), \"boolean\" != typeof this.pack && (this.pack = !1), \"boolean\" != typeof this.async && (this.async = !1), o1.Logger.setWithEnv(r1.env), o1.Logger.verbose(\"WebGLBackend\", `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`), !0;\n                    } catch (e1) {\n                        return o1.Logger.warning(\"WebGLBackend\", `Unable to initialize WebGLBackend. ${e1}`), !1;\n                    }\n                }\n                createSessionHandler(e1) {\n                    return new i1.WebGLSessionHandler(this, e1);\n                }\n                dispose() {\n                    this.glContext.dispose();\n                }\n            };\n        },\n        6859: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.CoordsGlslLib = void 0;\n            const r1 = n1(7273), o1 = n1(1997), i1 = n1(6757), s1 = n1(7618), a1 = n1(432);\n            class u1 extends o1.GlslLib {\n                constructor(e1){\n                    super(e1);\n                }\n                getFunctions() {\n                    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.offsetToCoords()), this.coordsToOffset()), this.toVec()), this.valueFrom()), this.getCommonUtilFuncs()), this.getInputsSamplingSnippets()), this.getOutputSamplingSnippet());\n                }\n                getCustomTypes() {\n                    return {};\n                }\n                offsetToCoords() {\n                    return {\n                        offsetToCoords: new o1.GlslLibRoutine(\"\\n      vec2 offsetToCoords(int offset, int width, int height) {\\n        int t = offset / width;\\n        int s = offset - t*width;\\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\\n        return coords;\\n      }\\n      \")\n                    };\n                }\n                coordsToOffset() {\n                    return {\n                        coordsToOffset: new o1.GlslLibRoutine(\"\\n      int coordsToOffset(vec2 coords, int width, int height) {\\n        float s = coords.s * float(width);\\n        float t = coords.t * float(height);\\n        int offset = int(t) * width + int(s);\\n        return offset;\\n      }\\n      \")\n                    };\n                }\n                getOutputSamplingSnippet() {\n                    const e1 = this.context.outputTextureLayout;\n                    return e1.isPacked ? this.getPackedOutputSamplingSnippet(e1) : this.getUnpackedOutputSamplingSnippet(e1);\n                }\n                getPackedOutputSamplingSnippet(e1) {\n                    const t1 = e1.unpackedShape, n1 = [\n                        e1.width,\n                        e1.height\n                    ], r1 = {}, s1 = \"getOutputCoords\";\n                    switch(t1.length){\n                        case 0:\n                            r1[s1] = this.getOutputScalarCoords();\n                            break;\n                        case 1:\n                            r1[s1] = this.getOutputPacked1DCoords(t1, n1);\n                            break;\n                        case 2:\n                            r1[s1] = this.getOutputPacked2DCoords(t1, n1);\n                            break;\n                        case 3:\n                            r1[s1] = this.getOutputPacked3DCoords(t1, n1);\n                            break;\n                        default:\n                            r1[s1] = this.getOutputPackedNDCoords(t1, n1);\n                    }\n                    const a1 = `\\n      void setOutput(vec4 val) {\\n        ${(0, i1.getGlsl)(this.context.glContext.version).output} = val;\\n      }\\n    `;\n                    return r1.floatTextureSetRGBA = new o1.GlslLibRoutine(a1), r1;\n                }\n                getUnpackedOutputSamplingSnippet(e1) {\n                    const t1 = e1.unpackedShape, n1 = [\n                        e1.width,\n                        e1.height\n                    ], r1 = {}, s1 = \"getOutputCoords\";\n                    switch(t1.length){\n                        case 0:\n                            r1[s1] = this.getOutputScalarCoords();\n                            break;\n                        case 1:\n                            r1[s1] = this.getOutputUnpacked1DCoords(t1, n1);\n                            break;\n                        case 2:\n                            r1[s1] = this.getOutputUnpacked2DCoords(t1, n1);\n                            break;\n                        case 3:\n                            r1[s1] = this.getOutputUnpacked3DCoords(t1, n1);\n                            break;\n                        case 4:\n                            r1[s1] = this.getOutputUnpacked4DCoords(t1, n1);\n                            break;\n                        case 5:\n                            r1[s1] = this.getOutputUnpacked5DCoords(t1, n1);\n                            break;\n                        case 6:\n                            r1[s1] = this.getOutputUnpacked6DCoords(t1, n1);\n                            break;\n                        default:\n                            throw new Error(`Unsupported output dimensionality: ${t1.length}`);\n                    }\n                    const a1 = `\\n        void setOutput(float val) {\\n          ${(0, i1.getGlsl)(this.context.glContext.version).output} = vec4(val, 0, 0, 0);\\n        }\\n    `;\n                    return r1.floatTextureSetR = new o1.GlslLibRoutine(a1), r1;\n                }\n                getOutputScalarCoords() {\n                    return new o1.GlslLibRoutine(\"\\n      int getOutputCoords() {\\n        return 0;\\n      }\\n    \");\n                }\n                getOutputPacked1DCoords(e1, t1) {\n                    const n1 = t1;\n                    let r1 = \"\";\n                    return 1 === n1[0] ? (r1 = `\\n          int getOutputCoords() {\\n            return 2 * int(TexCoords.y * ${n1[1]}.0);\\n          }\\n        `, new o1.GlslLibRoutine(r1)) : 1 === n1[1] ? (r1 = `\\n          int getOutputCoords() {\\n            return 2 * int(TexCoords.x * ${n1[0]}.0);\\n          }\\n        `, new o1.GlslLibRoutine(r1)) : (r1 = `\\n        int getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                 vec2(${n1[0]}, ${n1[1]}));\\n          return 2 * (resTexRC.y * ${n1[0]} + resTexRC.x);\\n        }\\n      `, new o1.GlslLibRoutine(r1));\n                }\n                getOutputPacked2DCoords(e1, t1) {\n                    let n1 = \"\";\n                    if (r1.ArrayUtil.arraysEqual(e1, t1)) return n1 = `\\n        ivec2 getOutputCoords() {\\n          return 2 * ivec2(TexCoords.xy * vec2(${t1[0]}, ${t1[1]}));\\n        }\\n      `, new o1.GlslLibRoutine(n1);\n                    const i1 = t1, s1 = Math.ceil(e1[1] / 2);\n                    return n1 = `\\n        ivec2 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${i1[0]}, ${i1[1]}));\\n\\n          int index = resTexRC.y * ${i1[0]} + resTexRC.x;\\n\\n          // reverse r and c order for packed texture\\n          int r = imod(index, ${s1}) * 2;\\n          int c = 2 * (index / ${s1});\\n\\n          return ivec2(r, c);\\n        }\\n      `, new o1.GlslLibRoutine(n1);\n                }\n                getOutputPacked3DCoords(e1, t1) {\n                    const n1 = [\n                        t1[0],\n                        t1[1]\n                    ], r1 = Math.ceil(e1[2] / 2), i1 = r1 * Math.ceil(e1[1] / 2), s1 = `\\n        ivec3 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${n1[0]}, ${n1[1]}));\\n          int index = resTexRC.y * ${n1[0]} + resTexRC.x;\\n\\n          int b = index / ${i1};\\n          index -= b * ${i1};\\n\\n          // reverse r and c order for packed texture\\n          int r = imod(index, ${r1}) * 2;\\n          int c = 2 * (index / ${r1});\\n\\n          return ivec3(b, r, c);\\n        }\\n      `;\n                    return new o1.GlslLibRoutine(s1);\n                }\n                getOutputPackedNDCoords(e1, t1) {\n                    const n1 = [\n                        t1[0],\n                        t1[1]\n                    ], r1 = Math.ceil(e1[e1.length - 1] / 2), i1 = r1 * Math.ceil(e1[e1.length - 2] / 2);\n                    let s1 = i1, a1 = \"\", u1 = \"b, r, c\";\n                    for(let t1 = 2; t1 < e1.length - 1; t1++)s1 *= e1[e1.length - t1 - 1], a1 = `\\n      int b${t1} = index / ${s1};\\n      index -= b${t1} * ${s1};\\n    ` + a1, u1 = `b${t1}, ` + u1;\n                    const l1 = `\\n      ivec${e1.length} getOutputCoords() {\\n        ivec2 resTexRC = ivec2(TexCoords.xy *\\n                              vec2(${n1[0]}, ${n1[1]}));\\n        int index = resTexRC.y * ${n1[0]} + resTexRC.x;\\n\\n        ${a1}\\n\\n        int b = index / ${i1};\\n        index -= b * ${i1};\\n\\n        // reverse r and c order for packed texture\\n        int r = imod(index, ${r1}) * 2;\\n        int c = 2 * (index / ${r1});\\n\\n        return ivec${e1.length}(${u1});\\n      }\\n    `;\n                    return new o1.GlslLibRoutine(l1);\n                }\n                getOutputUnpacked1DCoords(e1, t1) {\n                    const n1 = `\\n        int getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${t1[0]}, ${t1[1]}));\\n          return resTexRC.y * ${t1[0]} + resTexRC.x;\\n        }\\n      `;\n                    return new o1.GlslLibRoutine(n1);\n                }\n                getOutputUnpacked2DCoords(e1, t1) {\n                    const n1 = `\\n        ivec2 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${t1[0]}, ${t1[1]}));\\n          int index = resTexRC.y * ${t1[0]} + resTexRC.x;\\n          int r = index / ${e1[1]};\\n          int c = index - r * ${e1[1]};\\n          return ivec2(r, c);\\n        }\\n      `;\n                    return new o1.GlslLibRoutine(n1);\n                }\n                getOutputUnpacked3DCoords(e1, t1) {\n                    let n1 = \"\";\n                    const r1 = e1.length;\n                    let i1 = null;\n                    r1 < 2 && (i1 = []), i1 = new Array(r1 - 1), i1[r1 - 2] = e1[r1 - 1];\n                    for(let t1 = r1 - 3; t1 >= 0; --t1)i1[t1] = i1[t1 + 1] * e1[t1 + 1];\n                    const s1 = [\n                        \"r\",\n                        \"c\",\n                        \"d\"\n                    ], a1 = i1.map((e1, t1)=>`int ${s1[t1]} = index / ${e1}; ${t1 === i1.length - 1 ? `int ${s1[t1 + 1]} = index - ${s1[t1]} * ${e1}` : `index -= ${s1[t1]} * ${e1}`};`).join(\"\");\n                    return n1 = `\\n        ivec3 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${t1[0]}, ${t1[1]}));\\n          int index = resTexRC.y * ${t1[0]} + resTexRC.x;\\n          ${a1}\\n          return ivec3(r, c, d);\\n        }\\n      `, new o1.GlslLibRoutine(n1);\n                }\n                getOutputUnpacked4DCoords(e1, t1) {\n                    let n1 = \"\";\n                    const r1 = e1.length;\n                    let i1 = null;\n                    r1 < 2 && (i1 = []), i1 = new Array(r1 - 1), i1[r1 - 2] = e1[r1 - 1];\n                    for(let t1 = r1 - 3; t1 >= 0; --t1)i1[t1] = i1[t1 + 1] * e1[t1 + 1];\n                    const s1 = [\n                        \"r\",\n                        \"c\",\n                        \"d\",\n                        \"d2\"\n                    ], a1 = i1.map((e1, t1)=>`int ${s1[t1]} = index / ${e1}; ${t1 === i1.length - 1 ? `int ${s1[t1 + 1]} = index - ${s1[t1]} * ${e1}` : `index -= ${s1[t1]} * ${e1}`};`).join(\"\");\n                    return n1 = `\\n      ivec4 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${t1[0]}, ${t1[1]}));\\n          int index = resTexRC.y * ${t1[0]} + resTexRC.x;\\n          ${a1}\\n          return ivec4(r, c, d, d2);\\n        }\\n      `, new o1.GlslLibRoutine(n1);\n                }\n                getOutputUnpacked5DCoords(e1, t1) {\n                    let n1 = \"\";\n                    const r1 = e1.length;\n                    let i1 = null;\n                    r1 < 2 && (i1 = []), i1 = new Array(r1 - 1), i1[r1 - 2] = e1[r1 - 1];\n                    for(let t1 = r1 - 3; t1 >= 0; --t1)i1[t1] = i1[t1 + 1] * e1[t1 + 1];\n                    const s1 = [\n                        \"r\",\n                        \"c\",\n                        \"d\",\n                        \"d2\",\n                        \"d3\"\n                    ], a1 = i1.map((e1, t1)=>`int ${s1[t1]} = index / ${e1}; ${t1 === i1.length - 1 ? `int ${s1[t1 + 1]} = index - ${s1[t1]} * ${e1}` : `index -= ${s1[t1]} * ${e1}`};`).join(\"\");\n                    return n1 = `\\n      ivec5 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(${t1[0]}, ${t1[1]}));\\n          int index = resTexRC.y * ${t1[0]} + resTexRC.x;\\n          ${a1}\\n          return ivec5(r, c, d, d2, d3);\\n        }\\n      `, new o1.GlslLibRoutine(n1);\n                }\n                getOutputUnpacked6DCoords(e1, t1) {\n                    let n1 = \"\";\n                    const r1 = e1.length;\n                    let i1 = null;\n                    r1 < 2 && (i1 = []), i1 = new Array(r1 - 1), i1[r1 - 2] = e1[r1 - 1];\n                    for(let t1 = r1 - 3; t1 >= 0; --t1)i1[t1] = i1[t1 + 1] * e1[t1 + 1];\n                    const s1 = [\n                        \"r\",\n                        \"c\",\n                        \"d\",\n                        \"d2\",\n                        \"d3\",\n                        \"d4\"\n                    ], a1 = i1.map((e1, t1)=>`int ${s1[t1]} = index / ${e1}; ${t1 === i1.length - 1 ? `int ${s1[t1 + 1]} = index - ${s1[t1]} * ${e1}` : `index -= ${s1[t1]} * ${e1}`};`).join(\"\");\n                    return n1 = `\\n     ivec6 getOutputCoords() {\\n         ivec2 resTexRC = ivec2(TexCoords.xy *\\n                               vec2(${t1[0]}, ${t1[1]}));\\n         int index = resTexRC.y * ${t1[0]} + resTexRC.x;\\n         ${a1}\\n         return ivec6(r, c, d, d2, d3, d4);\\n       }\\n     `, new o1.GlslLibRoutine(n1);\n                }\n                getCommonUtilFuncs() {\n                    const e1 = {};\n                    let t1 = \"uvFromFlat\";\n                    e1[t1] = new o1.GlslLibRoutine(\"\\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n      int texC = index / texNumR;\\n      int texR = index - texC * texNumR;\\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\\n      //       v.\\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\\n    }\\n    \"), t1 = \"packedUVfrom1D\", e1[t1] = new o1.GlslLibRoutine(\"\\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n        int texelIndex = index / 2;\\n        int texR = texelIndex / texNumC;\\n        int texC = texelIndex - texR * texNumC;\\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n      }\\n      \"), t1 = \"packedUVfrom2D\", e1[t1] = new o1.GlslLibRoutine(\"\\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n        int texR = texelIndex / texNumC;\\n        int texC = texelIndex - texR * texNumC;\\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n      }\\n      \"), t1 = \"packedUVfrom3D\", e1[t1] = new o1.GlslLibRoutine(\"\\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\\n          int texelsInBatch, int texelsInLogicalRow, int b,\\n          int row, int col) {\\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n        int texR = index / texNumC;\\n        int texC = index - texR * texNumC;\\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n      }\\n      \"), t1 = \"sampleTexture\";\n                    const n1 = (0, i1.getGlsl)(this.context.glContext.version);\n                    return e1[t1] = new o1.GlslLibRoutine(`\\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n            return ${n1.texture2D}(textureSampler, uv).r;\\n        }`), e1;\n                }\n                getInputsSamplingSnippets() {\n                    const e1 = {}, t1 = this.context.outputTextureLayout;\n                    return this.context.programInfo.inputNames.forEach((n1, r1)=>{\n                        const o1 = this.context.inputTextureLayouts[r1], i1 = (0, a1.generateShaderFuncNameFromInputSamplerName)(n1);\n                        o1.isPacked ? e1[i1] = this.getPackedSamplerFromInput(i1, n1, o1) : e1[i1] = this.getUnpackedSamplerFromInput(i1, n1, o1);\n                        const s1 = (0, a1.generateShaderFuncNameFromInputSamplerNameAtOutCoords)(n1);\n                        o1.unpackedShape.length <= t1.unpackedShape.length && (o1.isPacked ? e1[s1] = this.getPackedSamplerAtOutputCoords(s1, o1, t1, n1) : e1[s1] = this.getUnpackedSamplerAtOutputCoords(s1, o1, t1, n1));\n                    }), e1;\n                }\n                getPackedSamplerAtOutputCoords(e1, t1, n1, i1) {\n                    const s1 = t1.unpackedShape, u1 = n1.unpackedShape, l1 = i1, c1 = (0, a1.generateShaderFuncNameFromInputSamplerName)(l1), p1 = s1.length, d1 = u1.length, f1 = r1.BroadcastUtil.getBroadcastDims(s1, u1), h1 = (0, a1.getCoordsDataType)(d1), g1 = d1 - p1;\n                    let b1;\n                    const m1 = (0, a1.getGlChannels)();\n                    b1 = 0 === p1 ? \"\" : d1 < 2 && f1.length >= 1 ? \"coords = 0;\" : f1.map((e1)=>`coords.${m1[e1 + g1]} = 0;`).join(\"\\n\");\n                    let y1 = \"\";\n                    y1 = d1 < 2 && p1 > 0 ? \"coords\" : s1.map((e1, t1)=>`coords.${m1[t1 + g1]}`).join(\", \");\n                    let _1 = \"return outputValue;\";\n                    const v1 = 1 === r1.ShapeUtil.size(s1), T1 = 1 === r1.ShapeUtil.size(u1);\n                    if (1 !== p1 || v1 || T1) {\n                        if (v1 && !T1) _1 = 1 === d1 ? \"\\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\\n        \" : \"\\n          return vec4(outputValue.x);\\n        \";\n                        else if (f1.length) {\n                            const e1 = p1 - 2, t1 = p1 - 1;\n                            f1.indexOf(e1) > -1 && f1.indexOf(t1) > -1 ? _1 = \"return vec4(outputValue.x);\" : f1.indexOf(e1) > -1 ? _1 = \"return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);\" : f1.indexOf(t1) > -1 && (_1 = \"return vec4(outputValue.xx, outputValue.zz);\");\n                        }\n                    } else _1 = \"\\n        return vec4(outputValue.xy, outputValue.xy);\\n      \";\n                    const x1 = `\\n      vec4 ${e1}() {\\n        ${h1} coords = getOutputCoords();\\n        \\n        int lastDim = coords.${m1[d1 - 1]};\\n        coords.${m1[d1 - 1]} = coords.${m1[d1 - 2]};\\n        coords.${m1[d1 - 2]} = lastDim;\\n      \\n        ${b1}\\n        vec4 outputValue = ${c1}(${y1});\\n        ${_1}\\n      }\\n    `;\n                    return new o1.GlslLibRoutine(x1, [\n                        \"coordinates.getOutputCoords\"\n                    ]);\n                }\n                getUnpackedSamplerAtOutputCoords(e1, t1, n1, i1) {\n                    const s1 = [\n                        n1.width,\n                        n1.height\n                    ], u1 = [\n                        t1.width,\n                        t1.height\n                    ], l1 = t1.unpackedShape.length, c1 = n1.unpackedShape.length, p1 = t1.unpackedShape, d1 = n1.unpackedShape, f1 = (0, a1.generateShaderFuncNameFromInputSamplerName)(i1);\n                    if (l1 === c1 && r1.ArrayUtil.arraysEqual(u1, s1)) {\n                        const t1 = `\\n          float ${e1}() {\\n            return sampleTexture(${i1}, TexCoords);\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(t1, [\n                            \"coordinates.sampleTexture\"\n                        ]);\n                    }\n                    const h1 = (0, a1.getCoordsDataType)(c1), g1 = r1.BroadcastUtil.getBroadcastDims(p1, d1), b1 = c1 - l1;\n                    let m1;\n                    const y1 = (0, a1.getGlChannels)();\n                    m1 = 0 === l1 ? \"\" : c1 < 2 && g1.length >= 1 ? \"coords = 0;\" : g1.map((e1)=>`coords.${y1[e1 + b1]} = 0;`).join(\"\\n\");\n                    let _1 = \"\";\n                    _1 = c1 < 2 && l1 > 0 ? \"coords\" : t1.unpackedShape.map((e1, t1)=>`coords.${y1[t1 + b1]}`).join(\", \");\n                    const v1 = `\\n        float ${e1}() {\\n          ${h1} coords = getOutputCoords();\\n          ${m1}\\n          return ${f1}(${_1});\\n        }\\n      `;\n                    return new o1.GlslLibRoutine(v1, [\n                        \"coordinates.getOutputCoords\"\n                    ]);\n                }\n                getPackedSamplerFromInput(e1, t1, n1) {\n                    switch(n1.unpackedShape.length){\n                        case 0:\n                            return this.getPackedSamplerScalar(e1, t1);\n                        case 1:\n                            return this.getPackedSampler1D(e1, t1, n1);\n                        case 2:\n                            return this.getPackedSampler2D(e1, t1, n1);\n                        case 3:\n                            return this.getPackedSampler3D(e1, t1, n1);\n                        default:\n                            return this.getPackedSamplerND(e1, t1, n1);\n                    }\n                }\n                getUnpackedSamplerFromInput(e1, t1, n1) {\n                    const r1 = n1.unpackedShape;\n                    switch(r1.length){\n                        case 0:\n                            return this.getUnpackedSamplerScalar(e1, t1, n1);\n                        case 1:\n                            return this.getUnpackedSampler1D(e1, t1, n1);\n                        case 2:\n                            return this.getUnpackedSampler2D(e1, t1, n1);\n                        case 3:\n                            return this.getUnpackedSampler3D(e1, t1, n1);\n                        case 4:\n                            return this.getUnpackedSampler4D(e1, t1, n1);\n                        case 5:\n                            return this.getUnpackedSampler5D(e1, t1, n1);\n                        case 6:\n                            return this.getUnpackedSampler6D(e1, t1, n1);\n                        default:\n                            throw new Error(`Unsupported dimension ${r1.length}-D`);\n                    }\n                }\n                getPackedSamplerScalar(e1, t1) {\n                    const n1 = `\\n          vec4 ${e1}() {\\n            return ${(0, i1.getGlsl)(this.context.glContext.version).texture2D}(${t1}, halfCR);\\n          }\\n        `;\n                    return new o1.GlslLibRoutine(n1);\n                }\n                getPackedSampler1D(e1, t1, n1) {\n                    const r1 = [\n                        n1.width,\n                        n1.height\n                    ], s1 = [\n                        r1[1],\n                        r1[0]\n                    ], a1 = (0, i1.getGlsl)(this.context.glContext.version), u1 = `vec4 ${e1}(int index) {\\n      vec2 uv = packedUVfrom1D(\\n      ${s1[0]}, ${s1[1]}, index);\\n      return ${a1.texture2D}(${t1}, uv);\\n    }`;\n                    return new o1.GlslLibRoutine(u1, [\n                        \"coordinates.packedUVfrom1D\"\n                    ]);\n                }\n                getPackedSampler2D(e1, t1, n1) {\n                    const s1 = n1.unpackedShape, a1 = [\n                        n1.width,\n                        n1.height\n                    ], u1 = (0, i1.getGlsl)(this.context.glContext.version), l1 = a1[0], c1 = a1[1];\n                    if (null != a1 && r1.ArrayUtil.arraysEqual(s1, a1)) {\n                        const n1 = `vec4 ${e1}(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${c1}.0, ${l1}.0);\\n        return ${u1.texture2D}(${t1}, uv);\\n      }`;\n                        return new o1.GlslLibRoutine(n1);\n                    }\n                    const p1 = a1, d1 = Math.ceil(s1[1] / 2), f1 = `vec4 ${e1}(int row, int col) {\\n      vec2 uv = packedUVfrom2D(${p1[1]}, ${p1[0]}, ${d1}, row, col);\\n      return ${u1.texture2D}(${t1}, uv);\\n    }`;\n                    return new o1.GlslLibRoutine(f1, [\n                        \"coordinates.packedUVfrom2D\"\n                    ]);\n                }\n                getPackedSampler3D(e1, t1, n1) {\n                    const r1 = n1.unpackedShape, s1 = [\n                        n1.width,\n                        n1.height\n                    ], u1 = [\n                        s1[0],\n                        s1[1]\n                    ], l1 = (0, i1.getGlsl)(this.context.glContext.version);\n                    if (1 === r1[0]) {\n                        const i1 = r1.slice(1), s1 = [\n                            1,\n                            2\n                        ], u1 = (0, a1.squeezeInputShape)(r1, i1), l1 = [\n                            \"b\",\n                            \"row\",\n                            \"col\"\n                        ], c1 = JSON.parse(JSON.stringify(n1));\n                        c1.unpackedShape = u1;\n                        const p1 = this.getPackedSamplerFromInput(e1, t1, c1), d1 = `${p1.routineBody}\\n      vec4 ${e1}(int b, int row, int col) {\\n        return ${e1}(${(0, a1.getSqueezedParams)(l1, s1)});\\n      } `;\n                        return new o1.GlslLibRoutine(d1, p1.dependencies);\n                    }\n                    const c1 = u1[0], p1 = u1[1], d1 = Math.ceil(r1[2] / 2), f1 = `vec4 ${e1}(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        ${p1}, ${c1}, ${d1 * Math.ceil(r1[1] / 2)}, ${d1}, b, row, col);\\n      return ${l1.texture2D}(${t1}, uv);}`;\n                    return new o1.GlslLibRoutine(f1, [\n                        \"coordinates.packedUVfrom3D\"\n                    ]);\n                }\n                getPackedSamplerND(e1, t1, n1) {\n                    const r1 = n1.unpackedShape, s1 = r1.length, a1 = [\n                        n1.width,\n                        n1.height\n                    ], u1 = (0, i1.getGlsl)(this.context.glContext.version), l1 = [\n                        a1[0],\n                        a1[1]\n                    ], c1 = l1[1], p1 = l1[0], d1 = Math.ceil(r1[s1 - 1] / 2);\n                    let f1 = d1 * Math.ceil(r1[s1 - 2] / 2), h1 = \"int b, int row, int col\", g1 = `b * ${f1} + (row / 2) * ${d1} + (col / 2)`;\n                    for(let e1 = 2; e1 < s1 - 1; e1++)h1 = `int b${e1}, ` + h1, f1 *= r1[s1 - e1 - 1], g1 = `b${e1} * ${f1} + ` + g1;\n                    const b1 = `vec4 ${e1}(${h1}) {\\n      int index = ${g1};\\n      int texR = index / ${p1};\\n      int texC = index - texR * ${p1};\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p1}, ${c1});\\n      return ${u1.texture2D}(${t1}, uv);\\n    }`;\n                    return new o1.GlslLibRoutine(b1);\n                }\n                getUnpackedSamplerScalar(e1, t1, n1) {\n                    const [r1, i1] = [\n                        n1.width,\n                        n1.height\n                    ];\n                    if (1 === r1 && 1 === i1) {\n                        const n1 = `\\n          float ${e1}() {\\n            return sampleTexture(${t1}, halfCR);\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(n1, [\n                            \"coordinates.sampleTexture\"\n                        ]);\n                    }\n                    const s1 = `\\n        float ${e1}() {\\n          int offset_${t1} = coordsToOffset(TexCoords, ${r1}, ${i1});\\n          vec2 uv = uvFromFlat(${r1}, ${i1}, offset_${t1});\\n          return sampleTexture(${t1}, uv);\\n        }\\n      `;\n                    return new o1.GlslLibRoutine(s1, [\n                        \"coordinates.uvFromFlat\",\n                        \"coordinates.sampleTexture\",\n                        \"coordinates.coordsToOffset\"\n                    ]);\n                }\n                getUnpackedSampler1D(e1, t1, n1) {\n                    const r1 = n1.width, i1 = n1.height;\n                    if (1 === i1 && 1 === r1) {\n                        const n1 = `\\n        float ${e1}(int index) {\\n          return sampleTexture(${t1}, halfCR);\\n        }\\n      `;\n                        return new o1.GlslLibRoutine(n1, [\n                            \"coordinates.sampleTexture\"\n                        ]);\n                    }\n                    if (1 === i1) {\n                        const n1 = `\\n          float ${e1}(int index) {\\n            vec2 uv = vec2((float(index) + 0.5) / ${r1}.0, 0.5);\\n            return sampleTexture(${t1}, uv);\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(n1, [\n                            \"coordinates.sampleTexture\"\n                        ]);\n                    }\n                    if (1 === r1) {\n                        const n1 = `\\n          float ${e1}(int index) {\\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${i1}.0);\\n            return sampleTexture(${t1}, uv);\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(n1, [\n                            \"coordinates.sampleTexture\"\n                        ]);\n                    }\n                    const s1 = `\\n        float ${e1}(int index) {\\n          vec2 uv = uvFromFlat(${r1}, ${i1}, index);\\n          return sampleTexture(${t1}, uv);\\n        }\\n      `;\n                    return new o1.GlslLibRoutine(s1, [\n                        \"coordinates.uvFromFlat\",\n                        \"coordinates.sampleTexture\"\n                    ]);\n                }\n                getUnpackedSampler2D(e1, t1, n1) {\n                    const i1 = n1.unpackedShape, u1 = [\n                        n1.height,\n                        n1.width\n                    ];\n                    if (null != u1 && r1.ArrayUtil.arraysEqual(i1, u1)) {\n                        const n1 = `\\n          float ${e1}(int row, int col) {\\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${u1[1]}.0, ${u1[0]}.0);\\n            return sampleTexture(${t1}, uv);\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(n1, [\n                            \"coordinates.sampleTexture\"\n                        ]);\n                    }\n                    const { newShape: l1, keptDims: c1 } = (0, s1.squeezeShape)(i1), p1 = l1;\n                    if (p1.length < i1.length) {\n                        const r1 = (0, a1.squeezeInputShape)(i1, p1), s1 = JSON.parse(JSON.stringify(n1));\n                        s1.unpackedShape = r1;\n                        const u1 = [\n                            \"col\",\n                            \"row\"\n                        ], l1 = `\\n          ${this.getUnpackedSamplerFromInput(e1, t1, s1).routineBody}\\n          float ${e1}(int row, int col) {\\n            return ${e1}(${(0, a1.getSqueezedParams)(u1, c1)});\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(l1, [\n                            \"coordinates.sampleTexture\"\n                        ]);\n                    }\n                    const d1 = u1[1], f1 = u1[0];\n                    if (1 === f1) {\n                        const n1 = `\\n          float ${e1}(int row, int col) {\\n            int offset_${t1} = coordsToOffset(TexCoords, ${d1}, ${f1});\\n            float index = dot(vec3(row, col, offset_${t1}), vec3(${i1[1]}, 1, 1));\\n            vec2 uv = vec2(0.5, (index + 0.5) / ${d1}.0);\\n            return sampleTexture(${t1}, uv);\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(n1, [\n                            \"coordinates.sampleTexture\",\n                            \"coordinates.coordsToOffset\"\n                        ]);\n                    }\n                    if (1 === d1) {\n                        const n1 = `\\n          float ${e1}(int row, int col) {\\n            int offset_${t1} = coordsToOffset(TexCoords, ${d1}, ${f1});\\n            float index = dot(vec3(row, col, offset_${t1}), vec3(${i1[1]}, 1, 1));\\n            vec2 uv = vec2((index + 0.5) / ${f1}.0, 0.5);\\n            return sampleTexture(${t1}, uv);\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(n1, [\n                            \"coordinates.sampleTexture\",\n                            \"coordinates.coordsToOffset\"\n                        ]);\n                    }\n                    const h1 = `\\n        float ${e1}(int row, int col) {\\n          int index = col * ${i1[1]} + row;\\n          vec2 uv = uvFromFlat(${d1}, ${f1}, index);\\n          return sampleTexture(${t1}, uv);\\n        }\\n      `;\n                    return new o1.GlslLibRoutine(h1, [\n                        \"coordinates.uvFromFlat\",\n                        \"coordinates.sampleTexture\",\n                        \"coordinates.coordsToOffset\"\n                    ]);\n                }\n                getUnpackedSampler3D(e1, t1, n1) {\n                    const r1 = n1.unpackedShape, i1 = r1[1] * r1[2], u1 = r1[2], { newShape: l1, keptDims: c1 } = (0, s1.squeezeShape)(r1), p1 = l1;\n                    if (p1.length < r1.length) {\n                        const i1 = (0, a1.squeezeInputShape)(r1, p1), s1 = [\n                            \"batch\",\n                            \"col\",\n                            \"row\"\n                        ], u1 = JSON.parse(JSON.stringify(n1));\n                        u1.unpackedShape = i1;\n                        const l1 = this.getUnpackedSamplerFromInput(e1, t1, u1), d1 = c1.reverse(), f1 = `\\n          ${l1.routineBody}\\n          float ${e1}(int batch, int row, int col) {\\n            return ${e1}(${(0, a1.getSqueezedParams)(s1, d1)});\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(f1, l1.dependencies);\n                    }\n                    const d1 = `\\n          float ${e1}(int depth, int row, int col) {\\n            // Explicitly use integer operations as dot() only works on floats.\\n            int index = depth * ${i1} + col * ${u1} + row;\\n            vec2 uv = uvFromFlat(${n1.width}, ${n1.height}, index);\\n            return sampleTexture(${t1}, uv);\\n          }\\n      `;\n                    return new o1.GlslLibRoutine(d1, [\n                        \"coordinates.uvFromFlat\",\n                        \"coordinates.sampleTexture\",\n                        \"coordinates.coordsToOffset\"\n                    ]);\n                }\n                getUnpackedSampler4D(e1, t1, n1) {\n                    const r1 = n1.unpackedShape, i1 = r1[3], s1 = r1[2] * i1, a1 = `\\n        float ${e1}(int row, int col, int depth, int depth2) {\\n          int index = row * ${r1[1] * s1} + col * ${s1} +\\n              depth2 * ${i1} + depth;\\n          vec2 uv = uvFromFlat(${n1.width}, ${n1.height}, index);\\n          return sampleTexture(${t1}, uv);\\n        }\\n      `;\n                    return new o1.GlslLibRoutine(a1, [\n                        \"coordinates.uvFromFlat\",\n                        \"coordinates.sampleTexture\"\n                    ]);\n                }\n                getUnpackedSampler5D(e1, t1, n1) {\n                    const r1 = n1.unpackedShape, i1 = r1[4], u1 = r1[3] * i1, l1 = r1[2] * u1, c1 = r1[1] * l1, { newShape: p1, keptDims: d1 } = (0, s1.squeezeShape)(r1);\n                    if (p1.length < r1.length) {\n                        const i1 = (0, a1.squeezeInputShape)(r1, p1), s1 = [\n                            \"row\",\n                            \"col\",\n                            \"depth\",\n                            \"depth2\",\n                            \"depth3\"\n                        ], u1 = JSON.parse(JSON.stringify(n1));\n                        u1.unpackedShape = i1;\n                        const l1 = `\\n          ${this.getUnpackedSamplerFromInput(e1, t1, u1).routineBody}\\n          float ${e1}(int row, int col, int depth, int depth2, int depth3) {\\n            return ${e1}(${(0, a1.getSqueezedParams)(s1, d1)});\\n          }\\n        `;\n                        return new o1.GlslLibRoutine(l1, [\n                            \"coordinates.sampleTexture\",\n                            \"coordinates.uvFromFlat\"\n                        ]);\n                    }\n                    const f1 = `\\n        float ${e1}(int row, int col, int depth, int depth2, int depth3) {\\n          int index = row * ${c1} + col * ${l1} + depth * ${u1} +\\n          depth3 * ${i1} + depth2;\\n          vec2 uv = uvFromFlat(${n1.width}, ${n1.height}, index);\\n          return sampleTexture(${t1}, uv);\\n        }\\n      `;\n                    return new o1.GlslLibRoutine(f1, [\n                        \"coordinates.sampleTexture\",\n                        \"coordinates.uvFromFlat\"\n                    ]);\n                }\n                getUnpackedSampler6D(e1, t1, n1) {\n                    const r1 = n1.unpackedShape, i1 = r1[5], u1 = r1[4] * i1, l1 = r1[3] * u1, c1 = r1[2] * l1, p1 = r1[1] * c1, { newShape: d1, keptDims: f1 } = (0, s1.squeezeShape)(r1);\n                    if (d1.length < r1.length) {\n                        const i1 = (0, a1.squeezeInputShape)(r1, d1), s1 = [\n                            \"row\",\n                            \"col\",\n                            \"depth\",\n                            \"depth2\",\n                            \"depth3\",\n                            \"depth4\"\n                        ], u1 = JSON.parse(JSON.stringify(n1));\n                        u1.unpackedShape = i1;\n                        const l1 = `\\n            ${this.getUnpackedSamplerFromInput(e1, t1, u1).routineBody}\\n            float ${e1}(int row, int col, int depth,\\n              int depth2, int depth3, int depth4) {\\n              return ${e1}(${(0, a1.getSqueezedParams)(s1, f1)});\\n            }\\n          `;\n                        return new o1.GlslLibRoutine(l1, [\n                            \"coordinates.sampleTexture\",\n                            \"coordinates.uvFromFlat\"\n                        ]);\n                    }\n                    const h1 = `\\n          float ${e1}(int row, int col, int depth,\\n            int depth2, int depth3, int depth4) {\\n            int index = row * ${p1} + col * ${c1} + depth * ${l1} +\\n            depth2 * ${u1} + depth3 * ${i1} + depth4;\\n            vec2 uv = uvFromFlat(${n1.width}, ${n1.height}, index);\\n            return sampleTexture(${t1}, uv);\\n          }\\n        `;\n                    return new o1.GlslLibRoutine(h1, [\n                        \"coordinates.uvFromFlat\",\n                        \"coordinates.sampleTexture\",\n                        \"coordinates.coordsToOffset\"\n                    ]);\n                }\n                toVec() {\n                    const e1 = this.context.outputTextureLayout, t1 = e1.shape.length, n1 = e1.strides, r1 = e1.width, i1 = e1.height, s1 = [];\n                    for(let e1 = 0; e1 < t1 - 1; ++e1)s1.push(`\\n        c[${e1}] = offset / ${n1[e1]};`), s1.push(`\\n        offset -= c[${e1}] * ${n1[e1]};`);\n                    s1.push(`\\n        c[${t1 - 1}] = offset;`);\n                    const a1 = `\\n      void toVec(vec2 texCoords, out int c[${t1}]) {\\n        int offset = coordsToOffset(texCoords, ${r1}, ${i1});\\n        ${s1.join(\"\")}\\n      }\\n      void toVec(int offset, out int c[${t1}]) {\\n        ${s1.join(\"\")}\\n      }\\n    `;\n                    return {\n                        toVec: new o1.GlslLibRoutine(a1, [\n                            \"coordinates.coordsToOffset\"\n                        ])\n                    };\n                }\n                valueFrom() {\n                    const e1 = {};\n                    return this.context.programInfo.inputNames.forEach((t1, n1)=>{\n                        const r1 = this.context.inputTextureLayouts[n1], i1 = (r1.unpackedShape.length > 0 ? r1.unpackedShape : r1.shape).length;\n                        let s1 = `_${t1}`;\n                        e1[s1] = new o1.GlslLibRoutine(this.getValueFromSingle(t1, i1, r1.width, r1.height, !1), [\n                            `shapeUtils.indicesToOffset${s1}`,\n                            \"coordinates.offsetToCoords\",\n                            \"fragcolor.getColorAsFloat\"\n                        ]), s1 += \"_T\", e1[s1] = new o1.GlslLibRoutine(this.getValueFromSingle(t1, i1, r1.width, r1.height, !0), [\n                            `shapeUtils.indicesToOffset${s1}`,\n                            \"coordinates.offsetToCoords\",\n                            \"fragcolor.getColorAsFloat\"\n                        ]);\n                    }), e1;\n                }\n                getValueFromSingle(e1, t1, n1, r1, o1) {\n                    let s1 = `_${e1}`;\n                    return o1 && (s1 += \"_T\"), `\\n        float ${s1}(int m[${t1}]) {\\n          int offset = indicesToOffset${s1}(m);\\n          vec2 coords = offsetToCoords(offset, ${n1}, ${r1});\\n          float value = getColorAsFloat(${(0, i1.getGlsl)(this.context.glContext.version).texture2D}(${e1}, coords));\\n          return value;\\n        }\\n        `;\n                }\n                getPackedValueFrom(e1, t1, n1, r1, o1) {\n                    let s1 = `_${e1}_Pack`;\n                    return o1 && (s1 += \"_T\"), `\\n        vec4 ${s1}(int m[${t1}]) {\\n          int offset = indicesToOffset_${e1}(m);\\n          vec2 coords = offsetToCoords(offset, ${n1}, ${r1});\\n          return ${(0, i1.getGlsl)(this.context.glContext.version).texture2D}(${e1}, coords);\\n        }\\n        `;\n                }\n            }\n            t1.CoordsGlslLib = u1;\n        },\n        1997: (e1, t1)=>{\n            \"use strict\";\n            var n1;\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.TopologicalSortGlslRoutines = t1.GlslLibRoutineNode = t1.GlslLibRoutine = t1.GlslLib = t1.GlslContext = t1.FunctionType = void 0, (n1 = t1.FunctionType || (t1.FunctionType = {}))[n1.ValueBased = 0] = \"ValueBased\", n1[n1.Positional = 1] = \"Positional\", t1.GlslContext = class {\n                constructor(e1, t1, n1, r1){\n                    this.glContext = e1, this.programInfo = t1, this.inputTextureLayouts = n1, this.outputTextureLayout = r1;\n                }\n            }, t1.GlslLib = class {\n                constructor(e1){\n                    this.context = e1;\n                }\n            }, t1.GlslLibRoutine = class {\n                constructor(e1, t1){\n                    this.routineBody = e1, this.dependencies = t1;\n                }\n            }, t1.GlslLibRoutineNode = class {\n                constructor(e1, t1, n1){\n                    this.name = e1, this.dependencies = n1 || [], t1 && (this.routineBody = t1);\n                }\n                addDependency(e1) {\n                    e1 && this.dependencies.push(e1);\n                }\n            }, t1.TopologicalSortGlslRoutines = class {\n                static returnOrderedNodes(e1) {\n                    if (!e1 || 0 === e1.length) return [];\n                    if (1 === e1.length) return e1;\n                    const t1 = new Set, n1 = new Set, r1 = new Array;\n                    return this.createOrderedNodes(e1, t1, n1, r1), r1;\n                }\n                static createOrderedNodes(e1, t1, n1, r1) {\n                    for(let o1 = 0; o1 < e1.length; ++o1)this.dfsTraverse(e1[o1], t1, n1, r1);\n                }\n                static dfsTraverse(e1, t1, n1, r1) {\n                    if (!e1 || n1.has(e1.name)) return;\n                    if (t1.has(e1.name)) throw new Error(\"Cyclic dependency detected. Can't topologically sort routines needed for shader.\");\n                    t1.add(e1.name);\n                    const o1 = e1.dependencies;\n                    if (o1 && o1.length > 0) for(let e1 = 0; e1 < o1.length; ++e1)this.dfsTraverse(o1[e1], t1, n1, r1);\n                    r1.push(e1), n1.add(e1.name), t1.delete(e1.name);\n                }\n            };\n        },\n        1371: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.EncodingGlslLib = void 0;\n            const r1 = n1(1997);\n            class o1 extends r1.GlslLib {\n                constructor(e1){\n                    super(e1);\n                }\n                getFunctions() {\n                    return Object.assign(Object.assign({}, this.encodeFloat32()), this.decodeFloat32());\n                }\n                getCustomTypes() {\n                    return {};\n                }\n                encodeFloat32() {\n                    return {\n                        encode: new r1.GlslLibRoutine(\"highp vec4 encode(highp float f) {\\n        return vec4(f, 0.0, 0.0, 0.0);\\n      }\\n        \")\n                    };\n                }\n                decodeFloat32() {\n                    return {\n                        decode: new r1.GlslLibRoutine(\"highp float decode(highp vec4 rgba) {\\n        return rgba.r;\\n      }\\n        \")\n                    };\n                }\n                encodeUint8() {\n                    const e1 = o1.isLittleEndian() ? \"rgba.rgba=rgba.abgr;\" : \"\";\n                    return {\n                        encode: new r1.GlslLibRoutine(`\\n      highp vec4 encode(highp float f) {\\n        highp float F = abs(f);\\n        highp float Sign = step(0.0,-f);\\n        highp float Exponent = floor(log2(F));\\n        highp float Mantissa = (exp2(- Exponent) * F);\\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\\n        highp vec4 rgba;\\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\\n        ${e1}\\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\\n        return rgba;\\n    }\\n        `)\n                    };\n                }\n                decodeUint8() {\n                    const e1 = o1.isLittleEndian() ? \"rgba.rgba=rgba.abgr;\" : \"\";\n                    return {\n                        decode: new r1.GlslLibRoutine(`\\n        highp float decode(highp vec4 rgba) {\\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\\n          ${e1}\\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\\n          return Result;\\n      }\\n        `)\n                    };\n                }\n                static isLittleEndian() {\n                    const e1 = new ArrayBuffer(4), t1 = new Uint32Array(e1), n1 = new Uint8Array(e1);\n                    if (t1[0] = 3735928559, 239 === n1[0]) return !0;\n                    if (222 === n1[0]) return !1;\n                    throw new Error(\"unknown endianness\");\n                }\n            }\n            t1.EncodingGlslLib = o1;\n        },\n        2691: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.FragColorGlslLib = void 0;\n            const r1 = n1(1997), o1 = n1(6757);\n            class i1 extends r1.GlslLib {\n                constructor(e1){\n                    super(e1);\n                }\n                getFunctions() {\n                    return Object.assign(Object.assign({}, this.setFragColor()), this.getColorAsFloat());\n                }\n                getCustomTypes() {\n                    return {};\n                }\n                setFragColor() {\n                    const e1 = (0, o1.getGlsl)(this.context.glContext.version);\n                    return {\n                        setFragColor: new r1.GlslLibRoutine(`\\n        void setFragColor(float value) {\\n            ${e1.output} = encode(value);\\n        }\\n        `, [\n                            \"encoding.encode\"\n                        ])\n                    };\n                }\n                getColorAsFloat() {\n                    return {\n                        getColorAsFloat: new r1.GlslLibRoutine(\"\\n        float getColorAsFloat(vec4 color) {\\n            return decode(color);\\n        }\\n        \", [\n                            \"encoding.decode\"\n                        ])\n                    };\n                }\n            }\n            t1.FragColorGlslLib = i1;\n        },\n        3878: (e1, t1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.replaceInlines = void 0;\n            const n1 = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\n            t1.replaceInlines = function(e1) {\n                const t1 = {};\n                let r1;\n                for(; null !== (r1 = n1.exec(e1));){\n                    const e1 = r1[3].split(\",\").map((e1)=>{\n                        const t1 = e1.trim().split(\" \");\n                        return t1 && 2 === t1.length ? {\n                            type: t1[0],\n                            name: t1[1]\n                        } : null;\n                    }).filter((e1)=>null !== e1);\n                    t1[r1[2]] = {\n                        params: e1,\n                        body: r1[4]\n                    };\n                }\n                for(const n1 in t1){\n                    const o1 = \"(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;\".replace(\"__FUNC__\", n1), i1 = new RegExp(o1, \"gm\");\n                    for(; null !== (r1 = i1.exec(e1));){\n                        const o1 = r1[1], i1 = r1[2], s1 = r1[3].split(\",\"), a1 = o1 ? `${o1} ${i1};` : \"\";\n                        let u1 = t1[n1].body, l1 = \"\";\n                        t1[n1].params.forEach((e1, t1)=>{\n                            e1 && (l1 += `${e1.type} ${e1.name} = ${s1[t1]};\\n`);\n                        }), u1 = `${l1}\\n ${u1}`, u1 = u1.replace(\"return\", `${i1} = `);\n                        const c1 = `\\n      ${a1}\\n      {\\n        ${u1}\\n      }\\n      `;\n                        e1 = e1.replace(r1[0], c1);\n                    }\n                }\n                return e1.replace(n1, \"\");\n            };\n        },\n        8897: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.GlslPreprocessor = void 0;\n            const r1 = n1(1997), o1 = n1(3878), i1 = n1(1248), s1 = n1(6757);\n            t1.GlslPreprocessor = class {\n                constructor(e1, t1, n1, o1){\n                    this.libs = {}, this.glslLibRoutineDependencyGraph = {}, this.context = new r1.GlslContext(e1, t1, n1, o1), Object.keys(i1.glslRegistry).forEach((e1)=>{\n                        const t1 = new i1.glslRegistry[e1](this.context);\n                        this.libs[e1] = t1;\n                    });\n                    const s1 = this.glslLibRoutineDependencyGraph;\n                    for(const e1 in this.libs){\n                        const t1 = this.libs[e1].getFunctions();\n                        for(const n1 in t1){\n                            const o1 = e1 + \".\" + n1;\n                            let i1;\n                            s1[o1] ? (i1 = s1[o1], i1.routineBody = t1[n1].routineBody) : (i1 = new r1.GlslLibRoutineNode(o1, t1[n1].routineBody), s1[o1] = i1);\n                            const a1 = t1[n1].dependencies;\n                            if (a1) for(let e1 = 0; e1 < a1.length; ++e1)if (s1[a1[e1]]) i1.addDependency(s1[a1[e1]]);\n                            else {\n                                const t1 = new r1.GlslLibRoutineNode(a1[e1]);\n                                s1[a1[e1]] = t1, i1.addDependency(t1);\n                            }\n                        }\n                    }\n                }\n                preprocess() {\n                    const e1 = this.context.programInfo;\n                    let t1 = e1.shaderSource;\n                    return this.context.programInfo.hasMain || (t1 = `${t1}\\n      ${(0, s1.getDefaultFragShaderMain)(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`), t1 = (0, o1.replaceInlines)(t1), `${(0, s1.getFragShaderPreamble)(this.context.glContext.version)}\\n    ${this.getUniforms(e1.inputNames, e1.variables)}\\n    ${this.getImports(t1)}\\n    ${t1}`;\n                }\n                getImports(e1) {\n                    const t1 = this.selectGlslLibRoutinesToBeIncluded(e1);\n                    if (0 === t1.length) return \"\";\n                    let n1 = \"\";\n                    for(let e1 = 0; e1 < t1.length; ++e1){\n                        if (!t1[e1].routineBody) throw new Error(`Missing body for the Glsl Library routine: ${t1[e1].name}`);\n                        n1 += t1[e1].routineBody + \"\\n\";\n                    }\n                    return n1;\n                }\n                selectGlslLibRoutinesToBeIncluded(e1) {\n                    const t1 = [];\n                    return Object.keys(this.glslLibRoutineDependencyGraph).forEach((n1)=>{\n                        const r1 = n1.split(\".\")[1];\n                        -1 !== e1.indexOf(r1) && t1.push(this.glslLibRoutineDependencyGraph[n1]);\n                    }), r1.TopologicalSortGlslRoutines.returnOrderedNodes(t1);\n                }\n                getUniforms(e1, t1) {\n                    const n1 = [];\n                    if (e1) for (const t1 of e1)n1.push(`uniform sampler2D ${t1};`);\n                    if (t1) for (const e1 of t1)n1.push(`uniform ${e1.type} ${e1.name}${e1.arrayLength ? `[${e1.arrayLength}]` : \"\"};`);\n                    return n1.join(\"\\n\");\n                }\n            };\n        },\n        1248: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.glslRegistry = void 0;\n            const r1 = n1(6859), o1 = n1(1371), i1 = n1(2691), s1 = n1(9183), a1 = n1(9314);\n            t1.glslRegistry = {\n                encoding: o1.EncodingGlslLib,\n                fragcolor: i1.FragColorGlslLib,\n                vec: a1.VecGlslLib,\n                shapeUtils: s1.ShapeUtilsGlslLib,\n                coordinates: r1.CoordsGlslLib\n            };\n        },\n        9183: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.ShapeUtilsGlslLib = void 0;\n            const r1 = n1(1997);\n            class o1 extends r1.GlslLib {\n                constructor(e1){\n                    super(e1);\n                }\n                getFunctions() {\n                    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.bcastIndex()), this.bcastMatmulIndex()), this.offsetToIndices()), this.indicesToOffset()), this.incrementIndices());\n                }\n                getCustomTypes() {\n                    return {};\n                }\n                bcastIndex() {\n                    const e1 = this.context.outputTextureLayout.shape.length, t1 = {};\n                    return this.context.programInfo.inputNames.forEach((n1, o1)=>{\n                        const i1 = this.context.inputTextureLayouts[o1].unpackedShape;\n                        if (i1.length <= e1) {\n                            const o1 = i1.length, s1 = e1 - o1, a1 = `bcastIndices_${n1}`;\n                            let u1 = \"\";\n                            for(let e1 = 0; e1 < o1; ++e1)u1 += `\\n          realIndices[${e1}] = int( mod(float(bcastedIndices[${s1 + e1}]), ${i1[e1]}.0) );\\n          `;\n                            const l1 = `\\n        void ${a1} (int bcastedIndices[${e1}], out int realIndices[${o1}]) {\\n          ${u1}\\n        }\\n        `;\n                            t1[a1] = new r1.GlslLibRoutine(l1);\n                        }\n                    }), t1;\n                }\n                bcastMatmulIndex() {\n                    const e1 = this.context.outputTextureLayout.shape.length, t1 = {};\n                    return this.context.programInfo.inputNames.forEach((n1, o1)=>{\n                        const i1 = this.context.inputTextureLayouts[o1].shape;\n                        if (!(i1.length < 2 || i1.length > e1)) {\n                            const o1 = i1.length, s1 = e1 - o1, a1 = `bcastMatmulIndices_${n1}`;\n                            let u1 = \"\";\n                            for(let e1 = 0; e1 < o1 - 2; ++e1)u1 += `\\n          realIndices[${e1}] = int( mod(float(bcastedIndices[${s1 + e1}]), ${i1[e1]}.0) );\\n          `;\n                            const l1 = `\\n        void ${a1}(int bcastedIndices[${e1}], out int realIndices[${o1}]) {\\n          ${u1}\\n          realIndices[${o1 - 1}] = bcastedIndices[${e1 - 1}];\\n          realIndices[${o1 - 2}] = bcastedIndices[${e1 - 2}];\\n        }\\n        `;\n                            t1[a1] = new r1.GlslLibRoutine(l1);\n                        }\n                    }), t1;\n                }\n                indicesToOffset() {\n                    const e1 = {};\n                    return this.context.programInfo.inputNames.forEach((t1, n1)=>{\n                        const i1 = this.context.inputTextureLayouts[n1].shape, s1 = this.context.inputTextureLayouts[n1].strides, a1 = i1.length;\n                        let u1 = `indicesToOffset_${t1}`;\n                        e1[u1] = new r1.GlslLibRoutine(o1.indexToOffsetSingle(u1, a1, s1)), u1 = `indicesToOffset_${t1}_T`, e1[u1] = new r1.GlslLibRoutine(o1.indexToOffsetSingle(u1, a1, s1.slice().reverse()));\n                    }), e1;\n                }\n                static indexToOffsetSingle(e1, t1, n1) {\n                    let r1 = \"\";\n                    for(let e1 = t1 - 1; e1 >= 0; --e1)r1 += `\\n        offset += indices[${e1}] * ${n1[e1]};\\n        `;\n                    return `\\n      int ${e1}(int indices[${t1}]) {\\n        int offset = 0;\\n        ${r1}\\n        return offset;\\n      }\\n      `;\n                }\n                offsetToIndices() {\n                    const e1 = {};\n                    return this.context.programInfo.inputNames.forEach((t1, n1)=>{\n                        const i1 = this.context.inputTextureLayouts[n1].shape, s1 = this.context.inputTextureLayouts[n1].strides, a1 = i1.length;\n                        let u1 = `offsetToIndices_${t1}`;\n                        e1[u1] = new r1.GlslLibRoutine(o1.offsetToIndicesSingle(u1, a1, s1)), u1 = `offsetToIndices_${t1}_T`, e1[u1] = new r1.GlslLibRoutine(o1.offsetToIndicesSingle(u1, a1, s1.slice().reverse()));\n                    }), e1;\n                }\n                static offsetToIndicesSingle(e1, t1, n1) {\n                    const r1 = [];\n                    for(let e1 = 0; e1 < t1 - 1; ++e1)r1.push(`\\n      indices[${e1}] = offset / ${n1[e1]};`), r1.push(`\\n        offset -= indices[${e1}] * ${n1[e1]};`);\n                    return r1.push(`\\n      indices[${t1 - 1}] = offset;`), `\\n      void ${e1}(int offset, out int indices[${t1}]) {\\n        ${r1.join(\"\")}\\n      }\\n      `;\n                }\n                incrementIndices() {\n                    const e1 = {};\n                    return this.context.programInfo.inputNames.forEach((t1, n1)=>{\n                        const o1 = this.context.inputTextureLayouts[n1].shape, i1 = o1.length, s1 = `incrementIndices_${t1}`;\n                        let a1 = \"\";\n                        for(let e1 = 0; e1 < i1; ++e1)a1 += `\\n        shape[${e1}] = ${o1[e1]};`;\n                        const u1 = `\\n        void ${s1}(int axis, out int indices[${i1}]) {\\n          int shape[${i1}];\\n          ${a1};\\n          for(int i = ${i1} -1 ; i >= 0; --i) {\\n            if(i > axis) continue;\\n            indices[i] += 1;\\n            if(indices[i] < shape[i]) {\\n              break;\\n            }\\n            indices[i] = 0;\\n          }\\n        }\\n        `;\n                        e1[s1] = new r1.GlslLibRoutine(u1);\n                    }), e1;\n                }\n            }\n            t1.ShapeUtilsGlslLib = o1;\n        },\n        6757: (e1, t1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.getDefaultFragShaderMain = t1.getFragShaderPreamble = t1.getVertexShaderSource = t1.getGlsl = void 0;\n            const n1 = {\n                version: \"\",\n                attribute: \"attribute\",\n                varyingVertex: \"varying\",\n                varyingFrag: \"varying\",\n                texture2D: \"texture2D\",\n                output: \"gl_FragColor\",\n                outputDeclaration: \"\"\n            }, r1 = {\n                version: \"#version 300 es\",\n                attribute: \"in\",\n                varyingVertex: \"out\",\n                varyingFrag: \"in\",\n                texture2D: \"texture\",\n                output: \"outputColor\",\n                outputDeclaration: \"out vec4 outputColor;\"\n            };\n            function o1(e1) {\n                return 1 === e1 ? n1 : r1;\n            }\n            t1.getGlsl = o1, t1.getVertexShaderSource = function(e1) {\n                const t1 = o1(e1);\n                return `${t1.version}\\n      precision highp float;\\n      ${t1.attribute} vec3 position;\\n      ${t1.attribute} vec2 textureCoord;\\n\\n      ${t1.varyingVertex} vec2 TexCoords;\\n\\n      void main()\\n      {\\n          gl_Position = vec4(position, 1.0);\\n          TexCoords = textureCoord;\\n      }`;\n            }, t1.getFragShaderPreamble = function(e1) {\n                const t1 = o1(e1);\n                return `${t1.version}\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    ${t1.varyingFrag} vec2 TexCoords;\\n    ${t1.outputDeclaration}\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    // Custom vector types to handle higher dimenalities.\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    `;\n            }, t1.getDefaultFragShaderMain = function(e1, t1) {\n                return `\\n  void main() {\\n    int indices[${t1}];\\n    toVec(TexCoords, indices);\\n    vec4 result = vec4(process(indices));\\n    ${o1(e1).output} = result;\\n  }\\n  `;\n            };\n        },\n        9314: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.VecGlslLib = void 0;\n            const r1 = n1(1997);\n            class o1 extends r1.GlslLib {\n                constructor(e1){\n                    super(e1);\n                }\n                getCustomTypes() {\n                    return {};\n                }\n                getFunctions() {\n                    return Object.assign(Object.assign(Object.assign(Object.assign({}, this.binaryVecFunctions()), this.copyVec()), this.setVecItem()), this.getVecItem());\n                }\n                binaryVecFunctions() {\n                    const e1 = this.context.outputTextureLayout.shape.length, t1 = {\n                        add: \"+=\",\n                        sub: \"-=\",\n                        mul: \"*=\",\n                        div: \"/=\"\n                    }, n1 = {};\n                    for(const o1 in t1){\n                        const i1 = `${o1}Vec`;\n                        let s1 = \"\";\n                        for(let n1 = 0; n1 < e1; ++n1)s1 += `\\n          dest[${n1}] ${t1[o1]} src[${n1}];\\n          `;\n                        const a1 = `\\n        void ${i1}(int src[${e1}], out int dest[${e1}]) {\\n          ${s1}\\n        }\\n        `;\n                        n1[i1] = new r1.GlslLibRoutine(a1);\n                    }\n                    return n1;\n                }\n                copyVec() {\n                    const e1 = this.context.outputTextureLayout.shape.length;\n                    let t1 = \"\";\n                    for(let n1 = 0; n1 < e1; ++n1)t1 += `\\n        dest[${n1}] = src[${n1}];\\n        `;\n                    const n1 = `\\n      void copyVec(int src[${e1}], out int dest[${e1}]) {\\n        ${t1}\\n      }\\n      `;\n                    return {\n                        copyVec: new r1.GlslLibRoutine(n1)\n                    };\n                }\n                setVecItem() {\n                    const e1 = this.context.outputTextureLayout.shape.length;\n                    let t1 = `\\n        if(index < 0)\\n            index =${e1} + index;\\n        if (index == 0)\\n            m[0] = value;\\n        `;\n                    for(let n1 = 1; n1 < e1 - 1; ++n1)t1 += `\\n        else if (index == ${n1})\\n            m[${n1}] = value;\\n            `;\n                    t1 += `\\n        else\\n            m[${e1 - 1}] = value;\\n        `;\n                    const n1 = `\\n      void setVecItem(out int m[${e1}], int index, int value) {\\n        ${t1}\\n      }\\n        `;\n                    return {\n                        setVecItem: new r1.GlslLibRoutine(n1)\n                    };\n                }\n                getVecItem() {\n                    const e1 = this.context.outputTextureLayout.shape.length;\n                    let t1 = `\\n        if(index < 0)\\n            index = ${e1} + index;\\n        if (index == 0)\\n            return m[0];\\n      `;\n                    for(let n1 = 1; n1 < e1 - 1; ++n1)t1 += `\\n        else if (index == ${n1})\\n            return m[${n1}];\\n      `;\n                    t1 += `\\n        else\\n            return m[${e1 - 1}];\\n        `;\n                    const n1 = `\\n      int getVecItem(int m[${e1}], int index) {\\n        ${t1}\\n      }\\n    `;\n                    return {\n                        getVecItem: new r1.GlslLibRoutine(n1)\n                    };\n                }\n            }\n            t1.VecGlslLib = o1;\n        },\n        7860: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.WebGLInferenceHandler = void 0;\n            const r1 = n1(1315), o1 = n1(9240), i1 = n1(7273), s1 = n1(9), a1 = n1(7379), u1 = n1(2488), l1 = n1(540), c1 = n1(3314), p1 = n1(5639);\n            t1.WebGLInferenceHandler = class {\n                constructor(e1){\n                    this.session = e1, this.packedTextureDataCache = new Map, this.unpackedTextureDataCache = new Map;\n                }\n                calculateTextureWidthAndHeight(e1, t1) {\n                    return (0, c1.calculateTextureWidthAndHeight)(this.session.layoutStrategy, e1, t1);\n                }\n                executeProgram(e1, t1) {\n                    if (t1.length < e1.inputNames.length) throw new Error(`Input size mustn't be less than ${e1.inputNames.length}.`);\n                    if (e1.inputNames.length !== e1.inputTypes.length) throw new Error(\"input names size does not match input types\");\n                    const n1 = [];\n                    for(let r1 = 0; r1 < e1.inputNames.length; ++r1)n1[r1] = this.getOrCreateTextureData(t1[r1], e1.inputTypes[r1]);\n                    const r1 = ((e1, t1)=>{\n                        const n1 = t1.map((e1)=>`${e1.unpackedShape.join(\",\")};${e1.width}x${e1.height}`).join(\"_\");\n                        let r1 = e1.name;\n                        return e1.cacheHint && (r1 += \"[\" + e1.cacheHint + \"]\"), r1 += \":\" + n1, r1;\n                    })(e1, n1);\n                    let o1 = this.session.programManager.getArtifact(r1);\n                    const i1 = o1 ? o1.programInfo : \"function\" == typeof e1.get ? e1.get() : e1, s1 = (0, c1.createTextureLayoutFromTextureType)(this.session.layoutStrategy, i1.output.dims, i1.output.textureType), a1 = this.createTextureData(s1, i1.output.type);\n                    return o1 || (o1 = this.session.programManager.build(i1, n1, a1), this.session.programManager.setArtifact(r1, o1)), this.runProgram(o1, n1, a1), a1;\n                }\n                run(e1, t1) {\n                    return this.executeProgram(e1, t1).tensor;\n                }\n                runProgram(e1, t1, n1) {\n                    for(let n1 = 0; n1 < t1.length; ++n1)if (!!t1[n1].isPacked != (e1.programInfo.inputTypes[n1] === p1.TextureType.packed)) throw new Error(`input[${n1}] property packed inconsistent`);\n                    if (!!n1.isPacked != (e1.programInfo.output.textureType === p1.TextureType.packed)) throw new Error(\"output property packed inconsistent\");\n                    this.session.programManager.run(e1, t1, n1);\n                }\n                getOrCreateTextureData(e1, t1) {\n                    let n1 = this.getTextureData(e1.dataId, t1 === p1.TextureType.packed);\n                    if (!n1 && (n1 = this.getTextureData(e1.dataId, t1 !== p1.TextureType.packed), n1)) return t1 === p1.TextureType.packed ? this.pack(n1) : this.unpack(n1);\n                    if (!n1) {\n                        const r1 = (0, c1.createTextureLayoutFromTextureType)(this.session.layoutStrategy, e1.dims, t1);\n                        if (t1 === p1.TextureType.packedLastDimension) {\n                            const n1 = 1, r1 = 4, o1 = e1.dims;\n                            if (4 === o1.length) {\n                                const i1 = [\n                                    o1[0],\n                                    Math.ceil(o1[1] * o1[2] * o1[3] / r1)\n                                ], s1 = (0, c1.createTextureLayoutFromTextureType)(this.session.layoutStrategy, i1, t1);\n                                let a1 = e1.numberData;\n                                if (o1[1] * o1[2] * o1[3] % r1 != 0) {\n                                    const t1 = o1[0], i1 = o1[1] * o1[2] * o1[3], s1 = Math.ceil(i1 * n1 / r1) * r1;\n                                    a1 = new Float32Array(t1 * s1);\n                                    for(let r1 = 0; r1 < t1; ++r1){\n                                        const t1 = r1 * i1, o1 = r1 * s1 + r1 % n1 * i1;\n                                        a1.set(e1.numberData.subarray(t1, t1 + i1), o1);\n                                    }\n                                }\n                                return this.createTextureData(s1, e1.type, a1, e1, 1);\n                            }\n                        }\n                        if (t1 === p1.TextureType.packed) {\n                            const t1 = (0, c1.createTextureLayoutFromShape)(this.session.layoutStrategy, e1.dims, 1, [], {\n                                reverseWH: !0\n                            }), r1 = this.createTextureData(t1, e1.type, e1.numberData, e1, 1);\n                            n1 = this.pack(r1);\n                        } else n1 = this.createTextureData(r1, e1.type, e1.numberData, e1, 1);\n                    }\n                    return n1;\n                }\n                createTextureDataFromLayoutBindTensor(e1, t1, n1, r1) {\n                    return this.createTextureData(e1, t1, n1, r1, 1);\n                }\n                createTextureData(e1, t1, n1, o1, i1) {\n                    r1.Logger.verbose(\"InferenceHandler\", `Creating TextureData: layout:[${JSON.stringify(e1)}]`);\n                    const s1 = this.session.textureManager.createTextureFromLayout(t1, e1, n1, i1);\n                    return this.createTextureDataFromTexture(e1, t1, s1, o1);\n                }\n                reshapeUnpacked(e1, t1) {\n                    const n1 = this.getOrCreateTextureData(e1, p1.TextureType.unpacked), r1 = {\n                        channels: n1.channels,\n                        height: n1.height,\n                        width: n1.width,\n                        shape: 0 !== t1.length ? t1 : [\n                            1\n                        ],\n                        strides: i1.ShapeUtil.computeStrides(t1),\n                        unpackedShape: t1\n                    };\n                    return this.createTextureDataFromTexture(r1, e1.type, n1.texture).tensor;\n                }\n                reshapePacked(e1, t1) {\n                    const n1 = this.getOrCreateTextureData(e1, p1.TextureType.packed);\n                    if ((0, a1.isReshapeCheap)(e1.dims, t1)) {\n                        const r1 = {\n                            channels: n1.channels,\n                            height: n1.height,\n                            width: n1.width,\n                            shape: 0 !== t1.length ? t1 : [\n                                1\n                            ],\n                            strides: i1.ShapeUtil.computeStrides(t1),\n                            unpackedShape: t1,\n                            isPacked: !0\n                        };\n                        return this.createTextureDataFromTexture(r1, e1.type, n1.texture).tensor;\n                    }\n                    const r1 = (0, a1.processDims3D)(e1.dims), o1 = (0, a1.processDims3D)(t1), s1 = this.reshapePacked(e1, r1), u1 = this.run((0, a1.createPackedReshape3DProgramInfoLoader)(this, s1, o1), [\n                        s1\n                    ]);\n                    return this.reshapePacked(u1, t1);\n                }\n                cast(e1, t1) {\n                    const n1 = this.getOrCreateTextureData(e1, p1.TextureType.unpacked);\n                    return this.createTextureDataFromTexture(n1, t1, n1.texture).tensor;\n                }\n                createTextureDataFromTexture(e1, t1, n1, r1, i1) {\n                    const s1 = Object.assign(Object.assign({}, e1), {\n                        tensor: r1 || new o1.Tensor(e1.unpackedShape, t1, (e1)=>this.readTexture(s1), async (e1)=>this.readTextureAsync(s1), void 0, i1),\n                        texture: n1\n                    });\n                    return this.setTextureData(s1.tensor.dataId, s1, e1.isPacked), s1;\n                }\n                getTextureData(e1, t1 = !1) {\n                    return this.session.isInitializer(e1) ? this.session.getTextureData(e1, t1) : t1 ? this.packedTextureDataCache.get(e1) : this.unpackedTextureDataCache.get(e1);\n                }\n                setTextureData(e1, t1, n1 = !1) {\n                    this.session.isInitializer(e1) ? this.session.setTextureData(e1, t1, n1) : (n1 ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(e1, t1);\n                }\n                isTextureLayoutCached(e1, t1 = !1) {\n                    return !!this.getTextureData(e1.dataId, t1);\n                }\n                dispose() {\n                    this.session.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((e1)=>this.session.textureManager.releaseTexture(e1)), this.packedTextureDataCache = new Map, this.unpackedTextureDataCache.forEach((e1)=>this.session.textureManager.releaseTexture(e1)), this.unpackedTextureDataCache = new Map;\n                }\n                readTexture(e1) {\n                    return e1.isPacked ? this.readTexture(this.unpack(e1)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTexture(e1, e1.tensor.type, e1.channels) : this.session.textureManager.readUint8TextureAsFloat((0, u1.encodeAsUint8)(this, e1));\n                }\n                async readTextureAsync(e1) {\n                    return e1.isPacked ? this.readTextureAsync(this.unpack(e1)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTextureAsync(e1, e1.tensor.type, e1.channels) : this.session.textureManager.readUint8TextureAsFloat((0, u1.encodeAsUint8)(this, e1));\n                }\n                pack(e1) {\n                    return this.executeProgram((0, s1.createPackProgramInfoLoader)(this, e1.tensor), [\n                        e1.tensor\n                    ]);\n                }\n                unpack(e1) {\n                    return this.executeProgram((0, l1.createUnpackProgramInfoLoader)(this, e1.tensor), [\n                        e1.tensor\n                    ]);\n                }\n            };\n        },\n        4110: function(e1, t1, n1) {\n            \"use strict\";\n            var r1 = this && this.__createBinding || (Object.create ? function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1);\n                var o1 = Object.getOwnPropertyDescriptor(t1, n1);\n                o1 && !(\"get\" in o1 ? !t1.__esModule : o1.writable || o1.configurable) || (o1 = {\n                    enumerable: !0,\n                    get: function() {\n                        return t1[n1];\n                    }\n                }), Object.defineProperty(e1, r1, o1);\n            } : function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1), e1[r1] = t1[n1];\n            }), o1 = this && this.__setModuleDefault || (Object.create ? function(e1, t1) {\n                Object.defineProperty(e1, \"default\", {\n                    enumerable: !0,\n                    value: t1\n                });\n            } : function(e1, t1) {\n                e1.default = t1;\n            }), i1 = this && this.__importStar || function(e1) {\n                if (e1 && e1.__esModule) return e1;\n                var t1 = {};\n                if (null != e1) for(var n1 in e1)\"default\" !== n1 && Object.prototype.hasOwnProperty.call(e1, n1) && r1(t1, e1, n1);\n                return o1(t1, e1), t1;\n            };\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.WEBGL_OP_RESOLVE_RULES = void 0;\n            const s1 = n1(8817), a1 = i1(n1(5194)), u1 = n1(4752), l1 = n1(6668), c1 = n1(9754), p1 = n1(5042), d1 = n1(6742), f1 = n1(4125), h1 = n1(6149), g1 = n1(5378), b1 = n1(6981), m1 = n1(7413), y1 = n1(7006), _1 = n1(8276), v1 = n1(5565), T1 = n1(2834), x1 = n1(1010), w1 = n1(8126), O1 = n1(2801), S1 = n1(565), A1 = n1(2444), P1 = n1(815), I1 = n1(564), E1 = n1(5416), D1 = n1(1240), $1 = n1(5944), k1 = n1(5707), F1 = i1(n1(9087)), N1 = n1(7862), L1 = n1(3980);\n            t1.WEBGL_OP_RESOLVE_RULES = [\n                [\n                    \"Abs\",\n                    \"\",\n                    \"6+\",\n                    F1.abs\n                ],\n                [\n                    \"Acos\",\n                    \"\",\n                    \"7+\",\n                    F1.acos\n                ],\n                [\n                    \"Add\",\n                    \"\",\n                    \"7+\",\n                    a1.add\n                ],\n                [\n                    \"And\",\n                    \"\",\n                    \"7+\",\n                    a1.and\n                ],\n                [\n                    \"Asin\",\n                    \"\",\n                    \"7+\",\n                    F1.asin\n                ],\n                [\n                    \"Atan\",\n                    \"\",\n                    \"7+\",\n                    F1.atan\n                ],\n                [\n                    \"AveragePool\",\n                    \"\",\n                    \"7+\",\n                    T1.averagePool,\n                    T1.parseAveragePoolAttributes\n                ],\n                [\n                    \"BatchNormalization\",\n                    \"\",\n                    \"7+\",\n                    s1.batchNormalization,\n                    s1.parseBatchNormalizationAttributes\n                ],\n                [\n                    \"Cast\",\n                    \"\",\n                    \"6+\",\n                    u1.cast,\n                    u1.parseCastAttributes\n                ],\n                [\n                    \"Ceil\",\n                    \"\",\n                    \"6+\",\n                    F1.ceil\n                ],\n                [\n                    \"Clip\",\n                    \"\",\n                    \"6-10\",\n                    F1.clip,\n                    F1.parseClipAttributes\n                ],\n                [\n                    \"Clip\",\n                    \"\",\n                    \"11+\",\n                    F1.clipV11\n                ],\n                [\n                    \"Concat\",\n                    \"\",\n                    \"4+\",\n                    l1.concat,\n                    l1.parseConcatAttributes\n                ],\n                [\n                    \"Conv\",\n                    \"\",\n                    \"1+\",\n                    c1.conv,\n                    c1.parseConvAttributes\n                ],\n                [\n                    \"ConvTranspose\",\n                    \"\",\n                    \"1+\",\n                    p1.convTranspose,\n                    p1.parseConvTransposeAttributes\n                ],\n                [\n                    \"Cos\",\n                    \"\",\n                    \"7+\",\n                    F1.cos\n                ],\n                [\n                    \"Div\",\n                    \"\",\n                    \"7+\",\n                    a1.div\n                ],\n                [\n                    \"Dropout\",\n                    \"\",\n                    \"7+\",\n                    F1.identity\n                ],\n                [\n                    \"DepthToSpace\",\n                    \"\",\n                    \"1+\",\n                    d1.depthToSpace,\n                    d1.parseDepthToSpaceAttributes\n                ],\n                [\n                    \"Equal\",\n                    \"\",\n                    \"7+\",\n                    a1.equal\n                ],\n                [\n                    \"Elu\",\n                    \"\",\n                    \"6+\",\n                    F1.elu,\n                    F1.parseEluAttributes\n                ],\n                [\n                    \"Exp\",\n                    \"\",\n                    \"6+\",\n                    F1.exp\n                ],\n                [\n                    \"Flatten\",\n                    \"\",\n                    \"1+\",\n                    f1.flatten,\n                    f1.parseFlattenAttributes\n                ],\n                [\n                    \"Floor\",\n                    \"\",\n                    \"6+\",\n                    F1.floor\n                ],\n                [\n                    \"FusedConv\",\n                    \"com.microsoft\",\n                    \"1+\",\n                    c1.conv,\n                    c1.parseConvAttributes\n                ],\n                [\n                    \"Gather\",\n                    \"\",\n                    \"1+\",\n                    h1.gather,\n                    h1.parseGatherAttributes\n                ],\n                [\n                    \"Gemm\",\n                    \"\",\n                    \"7-10\",\n                    g1.gemm,\n                    g1.parseGemmAttributesV7\n                ],\n                [\n                    \"Gemm\",\n                    \"\",\n                    \"11+\",\n                    g1.gemm,\n                    g1.parseGemmAttributesV11\n                ],\n                [\n                    \"GlobalAveragePool\",\n                    \"\",\n                    \"1+\",\n                    T1.globalAveragePool,\n                    T1.parseGlobalAveragePoolAttributes\n                ],\n                [\n                    \"GlobalMaxPool\",\n                    \"\",\n                    \"1+\",\n                    T1.globalMaxPool\n                ],\n                [\n                    \"Greater\",\n                    \"\",\n                    \"7+\",\n                    a1.greater\n                ],\n                [\n                    \"Identity\",\n                    \"\",\n                    \"1+\",\n                    F1.identity\n                ],\n                [\n                    \"ImageScaler\",\n                    \"\",\n                    \"1+\",\n                    b1.imageScaler,\n                    b1.parseImageScalerAttributes\n                ],\n                [\n                    \"InstanceNormalization\",\n                    \"\",\n                    \"6+\",\n                    m1.instanceNormalization,\n                    m1.parseInstanceNormalizationAttributes\n                ],\n                [\n                    \"LeakyRelu\",\n                    \"\",\n                    \"6+\",\n                    F1.leakyRelu,\n                    F1.parseLeakyReluAttributes\n                ],\n                [\n                    \"Less\",\n                    \"\",\n                    \"7+\",\n                    a1.less\n                ],\n                [\n                    \"LRN\",\n                    \"\",\n                    \"1+\",\n                    y1.lrn,\n                    y1.parseLrnAttributes\n                ],\n                [\n                    \"Log\",\n                    \"\",\n                    \"6+\",\n                    F1.log\n                ],\n                [\n                    \"MatMul\",\n                    \"\",\n                    \"1+\",\n                    _1.matMul,\n                    _1.parseMatMulAttributes\n                ],\n                [\n                    \"MaxPool\",\n                    \"\",\n                    \"1+\",\n                    T1.maxPool,\n                    T1.parseMaxPoolAttributes\n                ],\n                [\n                    \"Mul\",\n                    \"\",\n                    \"7+\",\n                    a1.mul\n                ],\n                [\n                    \"Neg\",\n                    \"\",\n                    \"6+\",\n                    F1.neg\n                ],\n                [\n                    \"Not\",\n                    \"\",\n                    \"1+\",\n                    F1.not\n                ],\n                [\n                    \"Or\",\n                    \"\",\n                    \"7+\",\n                    a1.or\n                ],\n                [\n                    \"Pad\",\n                    \"\",\n                    \"2-10\",\n                    v1.padV2,\n                    v1.parsePadAttributesV2\n                ],\n                [\n                    \"Pad\",\n                    \"\",\n                    \"11+\",\n                    v1.padV11,\n                    v1.parsePadAttributesV11\n                ],\n                [\n                    \"Pow\",\n                    \"\",\n                    \"7+\",\n                    a1.pow\n                ],\n                [\n                    \"PRelu\",\n                    \"\",\n                    \"7+\",\n                    a1.pRelu\n                ],\n                [\n                    \"ReduceLogSum\",\n                    \"\",\n                    \"1+\",\n                    x1.reduceLogSum,\n                    x1.parseReduceAttributes\n                ],\n                [\n                    \"ReduceMax\",\n                    \"\",\n                    \"1+\",\n                    x1.reduceMax,\n                    x1.parseReduceAttributes\n                ],\n                [\n                    \"ReduceMean\",\n                    \"\",\n                    \"1+\",\n                    x1.reduceMean,\n                    x1.parseReduceAttributes\n                ],\n                [\n                    \"ReduceMin\",\n                    \"\",\n                    \"1+\",\n                    x1.reduceMin,\n                    x1.parseReduceAttributes\n                ],\n                [\n                    \"ReduceProd\",\n                    \"\",\n                    \"1+\",\n                    x1.reduceProd,\n                    x1.parseReduceAttributes\n                ],\n                [\n                    \"ReduceSum\",\n                    \"\",\n                    \"1-12\",\n                    x1.reduceSum,\n                    x1.parseReduceAttributes\n                ],\n                [\n                    \"ReduceSumSquare\",\n                    \"\",\n                    \"1+\",\n                    x1.reduceLogSumSquare,\n                    x1.parseReduceAttributes\n                ],\n                [\n                    \"Relu\",\n                    \"\",\n                    \"6+\",\n                    F1.relu\n                ],\n                [\n                    \"Reshape\",\n                    \"\",\n                    \"5+\",\n                    w1.reshape\n                ],\n                [\n                    \"Resize\",\n                    \"\",\n                    \"10\",\n                    O1.resize,\n                    O1.parseResizeAttributesV10\n                ],\n                [\n                    \"Resize\",\n                    \"\",\n                    \"11+\",\n                    O1.resize,\n                    O1.parseResizeAttributesV11\n                ],\n                [\n                    \"Shape\",\n                    \"\",\n                    \"1+\",\n                    S1.shape\n                ],\n                [\n                    \"Sigmoid\",\n                    \"\",\n                    \"6+\",\n                    F1.sigmoid\n                ],\n                [\n                    \"Sin\",\n                    \"\",\n                    \"7+\",\n                    F1.sin\n                ],\n                [\n                    \"Slice\",\n                    \"\",\n                    \"10+\",\n                    A1.sliceV10\n                ],\n                [\n                    \"Slice\",\n                    \"\",\n                    \"1-9\",\n                    A1.slice,\n                    A1.parseSliceAttributes\n                ],\n                [\n                    \"Softmax\",\n                    \"\",\n                    \"1-12\",\n                    P1.softmax,\n                    P1.parseSoftmaxAttributes\n                ],\n                [\n                    \"Softmax\",\n                    \"\",\n                    \"13+\",\n                    P1.softmaxV13,\n                    P1.parseSoftmaxAttributesV13\n                ],\n                [\n                    \"Split\",\n                    \"\",\n                    \"2-12\",\n                    I1.split,\n                    I1.parseSplitAttributes\n                ],\n                [\n                    \"Sqrt\",\n                    \"\",\n                    \"6+\",\n                    F1.sqrt\n                ],\n                [\n                    \"Squeeze\",\n                    \"\",\n                    \"1-12\",\n                    E1.squeeze,\n                    E1.parseSqueezeAttributes\n                ],\n                [\n                    \"Squeeze\",\n                    \"\",\n                    \"13+\",\n                    E1.squeezeV13\n                ],\n                [\n                    \"Sub\",\n                    \"\",\n                    \"7+\",\n                    a1.sub\n                ],\n                [\n                    \"Sum\",\n                    \"\",\n                    \"6+\",\n                    D1.sum\n                ],\n                [\n                    \"Tan\",\n                    \"\",\n                    \"7+\",\n                    F1.tan\n                ],\n                [\n                    \"Tanh\",\n                    \"\",\n                    \"6+\",\n                    F1.tanh\n                ],\n                [\n                    \"Tile\",\n                    \"\",\n                    \"6+\",\n                    $1.tile\n                ],\n                [\n                    \"Transpose\",\n                    \"\",\n                    \"1+\",\n                    k1.transpose,\n                    k1.parseTransposeAttributes\n                ],\n                [\n                    \"Upsample\",\n                    \"\",\n                    \"7-8\",\n                    L1.upsample,\n                    L1.parseUpsampleAttributesV7\n                ],\n                [\n                    \"Upsample\",\n                    \"\",\n                    \"9\",\n                    L1.upsample,\n                    L1.parseUpsampleAttributesV9\n                ],\n                [\n                    \"Unsqueeze\",\n                    \"\",\n                    \"1-12\",\n                    N1.unsqueeze,\n                    N1.parseUnsqueezeAttributes\n                ],\n                [\n                    \"Unsqueeze\",\n                    \"\",\n                    \"13+\",\n                    N1.unsqueezeV13\n                ],\n                [\n                    \"Xor\",\n                    \"\",\n                    \"7+\",\n                    a1.xor\n                ]\n            ];\n        },\n        8817: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseBatchNormalizationAttributes = t1.batchNormalization = void 0;\n            const r1 = n1(4910), o1 = n1(6757), i1 = n1(5639), s1 = {\n                name: \"BatchNormalization\",\n                inputNames: [\n                    \"A\",\n                    \"Scale\",\n                    \"B\",\n                    \"Mean\",\n                    \"Variance\"\n                ],\n                inputTypes: [\n                    i1.TextureType.unpacked,\n                    i1.TextureType.unpacked,\n                    i1.TextureType.unpacked,\n                    i1.TextureType.unpacked,\n                    i1.TextureType.unpacked\n                ]\n            };\n            t1.batchNormalization = (e1, t1, n1)=>(u1(t1), [\n                    e1.run(Object.assign(Object.assign({}, s1), {\n                        cacheHint: n1.cacheKey,\n                        get: ()=>a1(e1, t1, n1)\n                    }), t1)\n                ]), t1.parseBatchNormalizationAttributes = (e1)=>{\n                const t1 = e1.attributes.getFloat(\"epsilon\", 1e-5), n1 = e1.attributes.getFloat(\"momentum\", .9), o1 = e1.attributes.getInt(\"spatial\", 1);\n                return (0, r1.createAttributeWithCacheKey)({\n                    epsilon: t1,\n                    momentum: n1,\n                    spatial: o1\n                });\n            };\n            const a1 = (e1, t1, n1)=>{\n                const r1 = (0, o1.getGlsl)(e1.session.backend.glContext.version), a1 = t1[0].dims.length, [u1, l1] = e1.calculateTextureWidthAndHeight(t1[1].dims, i1.TextureType.unpacked), c1 = `\\n  float process(int[${a1}] indices) {\\n    vec2 position = offsetToCoords(indices[1], ${u1}, ${l1});\\n    float scale = getColorAsFloat(${r1.texture2D}(Scale, position));\\n    float mean = getColorAsFloat(${r1.texture2D}(Mean, position));\\n    float variance = getColorAsFloat(${r1.texture2D}(Variance, position));\\n    float b = getColorAsFloat(${r1.texture2D}(B, position));\\n\\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${n1.epsilon})) ) + b;\\n  }`;\n                return Object.assign(Object.assign({}, s1), {\n                    output: {\n                        dims: t1[0].dims,\n                        type: t1[0].type,\n                        textureType: i1.TextureType.unpacked\n                    },\n                    shaderSource: c1\n                });\n            }, u1 = (e1)=>{\n                if (!e1 || 5 !== e1.length) throw new Error(\"BatchNormalization requires 5 inputs.\");\n                const t1 = e1[0], n1 = e1[1], r1 = e1[2], o1 = e1[3], i1 = e1[4];\n                if (t1.dims.length < 3 || 1 !== n1.dims.length || 1 !== r1.dims.length || 1 !== o1.dims.length || 1 !== i1.dims.length) throw new Error(\"invalid input shape.\");\n                if (n1.dims[0] !== t1.dims[1] || r1.dims[0] !== t1.dims[1] || o1.dims[0] !== t1.dims[1] || i1.dims[0] !== t1.dims[1]) throw new Error(\"invalid input shape.\");\n                if (\"float32\" !== t1.type && \"float64\" !== t1.type || \"float32\" !== n1.type && \"float64\" !== n1.type || \"float32\" !== r1.type && \"float64\" !== r1.type || \"float32\" !== o1.type && \"float64\" !== o1.type || \"float32\" !== i1.type && \"float64\" !== i1.type) throw new Error(\"invalid input tensor types.\");\n            };\n        },\n        5194: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.xor = t1.sub = t1.pRelu = t1.pow = t1.or = t1.mul = t1.less = t1.greater = t1.equal = t1.div = t1.and = t1.add = t1.glslPRelu = t1.glslPow = t1.glslXor = t1.glslOr = t1.glslAnd = t1.glslLess = t1.glslGreater = t1.glslEqual = t1.glslSub = t1.glslMul = t1.glslDiv = t1.glslAdd = void 0;\n            const r1 = n1(7273), o1 = n1(1997), i1 = n1(6757), s1 = n1(5639);\n            function a1() {\n                const e1 = \"add_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return a + b;\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    return v1 + v2;\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function u1() {\n                const e1 = \"div_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return a / b;\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    return v1 / v2;\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function l1() {\n                const e1 = \"mul_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return a * b;\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    return v1 * v2;\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function c1() {\n                const e1 = \"sub_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return a - b;\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    return v1 - v2;\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function p1() {\n                const e1 = \"equal_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return float(a == b);\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    return vec4(equal(v1, v2));\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function d1() {\n                const e1 = \"greater_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return float(a > b);\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    return vec4( v1.r > v2.r ,\\n      v1.g > v2.g,\\n      v1.b > v2.b,\\n      v1.a > v2.a );\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function f1() {\n                const e1 = \"less_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return float(a < b);\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    return vec4( v1.r < v2.r ,\\n                v1.g < v2.g,\\n                v1.b < v2.b,\\n                v1.a < v2.a );\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function h1() {\n                const e1 = \"and_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return float( bool(a) && bool(b) );\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    bvec4 b1 = bvec4(v1);\\n    bvec4 b2 = bvec4(v2);\\n    return vec4( b1.r && b2.r ,\\n                b1.g && b2.g,\\n                b1.b && b2.b,\\n                b1.a && b2.a );\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function g1() {\n                const e1 = \"or_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return float( bool(a) || bool(b) );\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    bvec4 b1 = bvec4(v1);\\n    bvec4 b2 = bvec4(v2);\\n    return vec4( b1.r || b2.r ,\\n                b1.g || b2.g,\\n                b1.b || b2.b,\\n                b1.a || b2.a );\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function b1() {\n                const e1 = \"xor_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return float( bool(a) ^^ bool(b) );\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    bvec4 b1 = bvec4(v1);\\n    bvec4 b2 = bvec4(v2);\\n    return vec4( b1.r ^^ b2.r ,\\n                b1.g ^^ b2.g,\\n                b1.b ^^ b2.b,\\n                b1.a ^^ b2.a );\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            function m1() {\n                return function(e1) {\n                    const t1 = `${e1}_`;\n                    return {\n                        body: `\\n  float ${t1}(float a, float b) {\\n    return ${e1}(a, b);\\n  }\\n  vec4 ${t1}(vec4 v1, vec4 v2) {\\n    return ${e1}(v1, v2);\\n  }\\n  `,\n                        name: t1,\n                        type: o1.FunctionType.ValueBased\n                    };\n                }(\"pow\");\n            }\n            function y1() {\n                const e1 = \"prelu_\";\n                return {\n                    body: `\\n  float ${e1}(float a, float b) {\\n    return a < 0.0 ? a * b: a;\\n  }\\n  vec4 ${e1}(vec4 v1, vec4 v2) {\\n    return vec4(\\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\\n      );\\n  }\\n  `,\n                    name: e1,\n                    type: o1.FunctionType.ValueBased\n                };\n            }\n            t1.glslAdd = a1, t1.glslDiv = u1, t1.glslMul = l1, t1.glslSub = c1, t1.glslEqual = p1, t1.glslGreater = d1, t1.glslLess = f1, t1.glslAnd = h1, t1.glslOr = g1, t1.glslXor = b1, t1.glslPow = m1, t1.glslPRelu = y1;\n            const _1 = (e1, t1, n1, r1 = t1[0].type, o1)=>{\n                const i1 = e1.session.pack ? s1.TextureType.packed : s1.TextureType.unpacked;\n                return {\n                    name: n1.name,\n                    inputNames: [\n                        \"A\",\n                        \"B\"\n                    ],\n                    inputTypes: [\n                        i1,\n                        i1\n                    ],\n                    cacheHint: o1,\n                    get: ()=>v1(e1, t1, n1, r1)\n                };\n            }, v1 = (e1, t1, n1, o1 = t1[0].type)=>{\n                const a1 = e1.session.pack ? s1.TextureType.packed : s1.TextureType.unpacked, u1 = !r1.ShapeUtil.areEqual(t1[0].dims, t1[1].dims);\n                let l1 = t1[0].dims;\n                const c1 = e1.session.pack;\n                if (u1) {\n                    const s1 = r1.BroadcastUtil.calcShape(t1[0].dims, t1[1].dims, !1);\n                    if (!s1) throw new Error(\"Can't perform binary op on the given tensors\");\n                    l1 = s1;\n                    const u1 = l1.length, p1 = 0 !== t1[0].dims.length ? t1[0].dims.length : 1, d1 = 0 !== t1[1].dims.length ? t1[1].dims.length : 1, f1 = 0 !== t1[0].dims.length ? \"bcastIndices_A(indices, aindices);\" : \"aindices[0] = 0;\", h1 = 0 !== t1[1].dims.length ? \"bcastIndices_B(indices, bindices);\" : \"bindices[0] = 0;\", g1 = (0, i1.getGlsl)(e1.session.backend.glContext.version), b1 = c1 ? `\\n      ${n1.body}\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n        vec4 result = ${n1.name}(a, b);\\n        ${g1.output} = result;\\n      }` : `\\n      ${n1.body}\\n      float process(int indices[${u1}]) {\\n        int aindices[${p1}];\\n        int bindices[${d1}];\\n        ${f1}\\n        ${h1}\\n        return ${n1.name}(_A(aindices), _B(bindices));\\n      }`;\n                    return {\n                        name: n1.name,\n                        inputNames: [\n                            \"A\",\n                            \"B\"\n                        ],\n                        inputTypes: [\n                            a1,\n                            a1\n                        ],\n                        output: {\n                            dims: l1,\n                            type: o1,\n                            textureType: a1\n                        },\n                        shaderSource: b1,\n                        hasMain: c1\n                    };\n                }\n                const p1 = (0, i1.getGlsl)(e1.session.backend.glContext.version), d1 = `\\n    ${n1.body}\\n    void main() {\\n      vec4 v1 = ${p1.texture2D}(A, TexCoords);\\n      vec4 v2 = ${p1.texture2D}(B, TexCoords);\\n      vec4 result = ${n1.name}(v1, v2);\\n      ${p1.output} = result;\\n    }\\n    `;\n                return {\n                    name: n1.name,\n                    inputNames: [\n                        \"A\",\n                        \"B\"\n                    ],\n                    inputTypes: [\n                        a1,\n                        a1\n                    ],\n                    output: {\n                        dims: t1[0].dims,\n                        type: o1,\n                        textureType: a1\n                    },\n                    shaderSource: d1,\n                    hasMain: !0\n                };\n            };\n            t1.add = (e1, t1)=>[\n                    e1.run(_1(e1, t1, a1()), t1)\n                ], t1.and = (e1, t1)=>[\n                    e1.run(_1(e1, t1, h1(), \"bool\"), t1)\n                ], t1.div = (e1, t1)=>[\n                    e1.run(_1(e1, t1, u1()), t1)\n                ], t1.equal = (e1, t1)=>[\n                    e1.run(_1(e1, t1, p1(), \"bool\"), t1)\n                ], t1.greater = (e1, t1)=>[\n                    e1.run(_1(e1, t1, d1(), \"bool\"), t1)\n                ], t1.less = (e1, t1)=>[\n                    e1.run(_1(e1, t1, f1(), \"bool\"), t1)\n                ], t1.mul = (e1, t1)=>[\n                    e1.run(_1(e1, t1, l1()), t1)\n                ], t1.or = (e1, t1)=>[\n                    e1.run(_1(e1, t1, g1(), \"bool\"), t1)\n                ], t1.pow = (e1, t1)=>[\n                    e1.run(_1(e1, t1, m1()), t1)\n                ], t1.pRelu = (e1, t1)=>[\n                    e1.run(_1(e1, t1, y1()), t1)\n                ], t1.sub = (e1, t1)=>[\n                    e1.run(_1(e1, t1, c1()), t1)\n                ], t1.xor = (e1, t1)=>[\n                    e1.run(_1(e1, t1, b1(), \"bool\"), t1)\n                ];\n        },\n        4752: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseCastAttributes = t1.cast = void 0;\n            const r1 = n1(7273);\n            t1.cast = (e1, t1, n1)=>(o1(t1), [\n                    e1.cast(t1[0], n1)\n                ]), t1.parseCastAttributes = (e1)=>r1.ProtoUtil.tensorDataTypeFromProto(e1.attributes.getInt(\"to\"));\n            const o1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Cast requires 1 input.\");\n                if (\"string\" === e1[0].type) throw new Error(\"Invalid input type.\");\n            };\n        },\n        4595: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createPackedConcatProgramInfoLoader = void 0;\n            const r1 = n1(6757), o1 = n1(5639), i1 = n1(432), s1 = n1(5614);\n            t1.createPackedConcatProgramInfoLoader = (e1, t1, n1)=>{\n                const u1 = (l1 = t1.length, c1 = n1.cacheKey, {\n                    name: \"Concat (packed)\",\n                    inputNames: Array.from({\n                        length: l1\n                    }, (e1, t1)=>`X${t1}`),\n                    inputTypes: Array(l1).fill(o1.TextureType.packed),\n                    cacheHint: c1\n                });\n                var l1, c1;\n                return Object.assign(Object.assign({}, u1), {\n                    get: ()=>((e1, t1, n1, u1)=>{\n                            const l1 = n1[0].dims.slice();\n                            if (u1 >= l1.length || u1 < -1 * l1.length) throw new Error(\"axis specified for concat doesn't match input dimensionality\");\n                            u1 < 0 && (u1 = l1.length + u1);\n                            const c1 = l1.slice(0);\n                            for(let e1 = 1; e1 < n1.length; e1++){\n                                const t1 = n1[e1].dims.slice();\n                                for(let e1 = 0; e1 < l1.length; e1++)if (e1 === u1) c1[u1] += t1[e1];\n                                else if (l1[e1] !== t1[e1]) throw new Error(\"non concat dimensions must match\");\n                            }\n                            const p1 = c1.length, d1 = (0, s1.getChannels)(\"coords\", p1), f1 = (0, i1.getCoordsDataType)(p1), h1 = (0, s1.unpackFromChannel)(), g1 = n1.map((e1)=>e1.dims), b1 = (0, i1.getGlChannels)(p1), m1 = new Array(g1.length - 1);\n                            m1[0] = g1[0][u1];\n                            for(let e1 = 1; e1 < m1.length; e1++)m1[e1] = m1[e1 - 1] + g1[e1][u1];\n                            const y1 = b1[u1], _1 = b1.slice(-2), v1 = b1.join();\n                            let T1 = `if (${y1} < ${m1[0]}) {\\n        return getChannel(\\n            getX0(${v1}), vec2(${_1.join()}));\\n        }`;\n                            for(let e1 = 1; e1 < m1.length; e1++){\n                                const t1 = m1[e1 - 1];\n                                T1 += `\\n            if (${y1} < ${m1[e1]}  && ${y1} >= ${m1[e1 - 1]}) {\\n              return getChannel(\\n                getX${e1}(${a1(b1, y1, t1)}),\\n                vec2(${a1(_1, y1, t1)}));\\n            }`;\n                            }\n                            const x1 = m1.length, w1 = m1[m1.length - 1];\n                            T1 += `\\n            return getChannel(\\n              getX${x1}(${a1(b1, y1, w1)}),\\n              vec2(${a1(_1, y1, w1)}));`;\n                            const O1 = (0, r1.getGlsl)(e1.session.backend.glContext.version), S1 = `\\n          ${h1}\\n          float getValue(${b1.map((e1)=>\"int \" + e1)}) {\\n            ${T1}\\n          }\\n\\n          void main() {\\n            ${f1} coords = getOutputCoords();\\n            int lastDim = coords.${b1[p1 - 1]};\\n            coords.${b1[p1 - 1]} = coords.${b1[p1 - 2]};\\n            coords.${b1[p1 - 2]} = lastDim;\\n\\n            vec4 result = vec4(getValue(${d1}), 0., 0., 0.);\\n\\n            ${d1[p1 - 1]} = ${d1[p1 - 1]} + 1;\\n            if (${d1[p1 - 1]} < ${c1[p1 - 1]}) {\\n              result.g = getValue(${d1});\\n            }\\n\\n            ${d1[p1 - 2]} = ${d1[p1 - 2]} + 1;\\n            if (${d1[p1 - 2]} < ${c1[p1 - 2]}) {\\n              result.a = getValue(${d1});\\n            }\\n\\n            ${d1[p1 - 1]} = ${d1[p1 - 1]} - 1;\\n            if (${d1[p1 - 2]} < ${c1[p1 - 2]} &&\\n                ${d1[p1 - 1]} < ${c1[p1 - 1]}) {\\n              result.b = getValue(${d1});\\n            }\\n            ${O1.output} = result;\\n          }\\n        `;\n                            return Object.assign(Object.assign({}, t1), {\n                                output: {\n                                    dims: c1,\n                                    type: n1[0].type,\n                                    textureType: o1.TextureType.packed\n                                },\n                                shaderSource: S1,\n                                hasMain: !0\n                            });\n                        })(e1, u1, t1, n1.axis)\n                });\n            };\n            const a1 = (e1, t1, n1)=>{\n                const r1 = e1.indexOf(t1);\n                return e1.map((e1, t1)=>t1 === r1 ? `${e1} - ${n1}` : e1).join();\n            };\n        },\n        6668: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseConcatAttributes = t1.concat = void 0;\n            const r1 = n1(4910), o1 = n1(5639), i1 = n1(4595);\n            t1.concat = (e1, t1, n1)=>(p1(t1), e1.session.pack && t1[0].dims.length > 1 ? [\n                    e1.run((0, i1.createPackedConcatProgramInfoLoader)(e1, t1, n1), t1)\n                ] : [\n                    e1.run(s1(e1, t1, n1), t1)\n                ]);\n            const s1 = (e1, t1, n1)=>{\n                const r1 = (i1 = t1.length, s1 = n1.cacheKey, {\n                    name: \"Concat\",\n                    inputNames: Array.from({\n                        length: i1\n                    }, (e1, t1)=>`X${t1}`),\n                    inputTypes: Array(i1).fill(o1.TextureType.unpacked),\n                    cacheHint: s1\n                });\n                var i1, s1;\n                return Object.assign(Object.assign({}, r1), {\n                    get: ()=>((e1, t1, n1, r1)=>{\n                            const i1 = n1[0].dims.slice();\n                            if (r1 >= i1.length || r1 < -1 * i1.length) throw new Error(\"axis specified for concat doesn't match input dimensionality\");\n                            r1 < 0 && (r1 = i1.length + r1);\n                            const s1 = i1.slice(0);\n                            for(let e1 = 1; e1 < n1.length; e1++){\n                                const t1 = n1[e1].dims.slice();\n                                for(let e1 = 0; e1 < i1.length; e1++)if (e1 === r1) s1[r1] += t1[e1];\n                                else if (i1[e1] !== t1[e1]) throw new Error(\"non concat dimensions must match\");\n                            }\n                            const p1 = s1.length, d1 = new Array(n1.length);\n                            let f1 = 0;\n                            for(let e1 = 0; e1 < d1.length; ++e1)f1 += n1[e1].dims[r1], d1[e1] = f1;\n                            let h1 = \"\";\n                            h1 = n1.length < 5 ? a1(d1) : u1(d1);\n                            const g1 = `\\n        ${l1(n1.length, p1)}\\n        ${c1(d1)}\\n        ${h1}\\n        float process(int indices[${p1}]) {\\n          int textureIndex = getTextureWhereDataResides (indices[${r1}]);\\n\\n          if(textureIndex != 0) {\\n            indices[${r1}] = indices[${r1}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\\n          }\\n\\n          return fetchDataFromCorrectTexture(textureIndex, indices);\\n        }`;\n                            return Object.assign(Object.assign({}, t1), {\n                                output: {\n                                    dims: s1,\n                                    type: n1[0].type,\n                                    textureType: o1.TextureType.unpacked\n                                },\n                                shaderSource: g1\n                            });\n                        })(0, r1, t1, n1.axis)\n                });\n            }, a1 = (e1)=>{\n                const t1 = e1.map((e1, t1)=>`if(index<${e1}) {return ${t1};}\\n`);\n                return `int getTextureWhereDataResides(int index) {\\n      ${t1.join(\"\")}\\n    }`;\n            }, u1 = (e1)=>a1(e1), l1 = (e1, t1)=>{\n                const n1 = [\n                    `float fetchDataFromCorrectTexture(int textureIndex, int indices[${t1}]) {`\n                ];\n                for(let t1 = 0; t1 < e1; ++t1)0 === t1 ? n1.push(`\\tif (textureIndex == ${t1}) { return _X${t1}(indices); }`) : t1 === e1 - 1 ? n1.push(`\\telse { return _X${t1}(indices); }`) : n1.push(`\\telse if (textureIndex == ${t1}) { return _X${t1}(indices); }`);\n                return n1.push(\"\t}\"), n1.join(\"\\n\");\n            }, c1 = (e1)=>{\n                const t1 = [\n                    \"int getSizeInConcatAxisValueFromIndex(int index) {\"\n                ];\n                for(let n1 = 0; n1 < e1.length; ++n1)0 === n1 ? t1.push(`\\tif (index == ${n1}) { return ${e1[n1]}; }`) : n1 === e1.length - 1 ? t1.push(`\\telse { return ${e1[n1]}; }`) : t1.push(`\\telse if (index == ${n1}) { return ${e1[n1]}; }`);\n                return t1.push(\"\t}\"), t1.join(\"\\n\");\n            };\n            t1.parseConcatAttributes = (e1)=>(0, r1.createAttributeWithCacheKey)({\n                    axis: e1.attributes.getInt(\"axis\")\n                });\n            const p1 = (e1)=>{\n                if (!e1 || e1.length < 1) throw new Error(\"too few inputs\");\n                const t1 = e1[0].type, n1 = e1[0].dims.length;\n                if (\"string\" === t1) throw new Error(\"string tensor is not supported yet\");\n                for (const r1 of e1){\n                    if (r1.type !== t1) throw new Error(\"input tensors should be one type\");\n                    if (r1.dims.length !== n1) throw new Error(\"input tensors should have the same shape\");\n                }\n            };\n        },\n        7825: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createUnpackedGroupedConvProgramInfoLoader = void 0;\n            const r1 = n1(1315), o1 = n1(6757), i1 = n1(5639), s1 = n1(9754), a1 = n1(2150);\n            t1.createUnpackedGroupedConvProgramInfoLoader = (e1, t1, n1)=>{\n                const u1 = (l1 = t1.length > 2, c1 = n1.cacheKey, {\n                    name: \"GroupedConv\",\n                    inputNames: l1 ? [\n                        \"X\",\n                        \"W\",\n                        \"Bias\"\n                    ] : [\n                        \"X\",\n                        \"W\"\n                    ],\n                    inputTypes: l1 ? [\n                        i1.TextureType.unpacked,\n                        i1.TextureType.unpacked,\n                        i1.TextureType.unpacked\n                    ] : [\n                        i1.TextureType.unpacked,\n                        i1.TextureType.unpacked\n                    ],\n                    cacheHint: c1\n                });\n                var l1, c1;\n                return Object.assign(Object.assign({}, u1), {\n                    get: ()=>((e1, t1, n1, u1)=>{\n                            const l1 = t1.length > 2 ? \"value += getBias(output_channel);\" : \"\", c1 = t1[0].dims.slice(), p1 = t1[1].dims.slice(), d1 = p1[0] / u1.group;\n                            r1.Logger.verbose(\"GroupedConv\", `autpPad:${u1.autoPad}, dilations:${u1.dilations}, group:${u1.group}, kernelShape:${u1.kernelShape}, pads:${u1.pads}, strides:${u1.strides}`);\n                            const f1 = (0, s1.calculateOutputShape)(c1, p1, u1.dilations, u1.pads, u1.strides), h1 = (0, o1.getGlsl)(e1.session.backend.glContext.version), { activationFunction: g1, applyActivation: b1 } = (0, a1.getActivationSnippet)(u1), m1 = `\\n  const ivec2 strides = ivec2(${u1.strides[0]}, ${u1.strides[1]});\\n  const ivec2 pads = ivec2(${u1.pads[0]}, ${u1.pads[1]});\\n  ${g1}\\n  void main() {\\n    ivec4 coords = getOutputCoords();\\n    int batch = coords.x;\\n    int output_channel = coords.y;\\n    ivec2 xRCCorner = coords.zw * strides - pads;\\n    int group_id = output_channel / ${d1};\\n\\n    float value = 0.0;\\n    for (int wInChannel = 0; wInChannel < ${p1[1]}; wInChannel++) {\\n      int input_channel = group_id * ${p1[1]} + wInChannel;\\n      for (int wHeight = 0; wHeight < ${p1[2]}; wHeight++) {\\n        int xHeight = xRCCorner.x + wHeight * ${u1.dilations[0]};\\n\\n        if (xHeight < 0 || xHeight >= ${c1[2]}) {\\n          continue;\\n        }\\n\\n        for (int wWidth = 0; wWidth < ${p1[3]}; wWidth++) {\\n          int xWidth = xRCCorner.y + wWidth * ${u1.dilations[1]};\\n          if (xWidth < 0 || xWidth >= ${c1[3]}) {\\n            continue;\\n          }\\n\\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\\n          value += xVal*wVal;\\n        }\\n      }\\n    }\\n    ${l1}\\n    ${b1}\\n    ${h1.output} = vec4(value, .0, .0, .0);\\n  }\\n`;\n                            return Object.assign(Object.assign({}, n1), {\n                                output: {\n                                    dims: f1,\n                                    type: t1[0].type,\n                                    textureType: i1.TextureType.unpacked\n                                },\n                                shaderSource: m1,\n                                hasMain: !0\n                            });\n                        })(e1, t1, u1, n1)\n                });\n            };\n        },\n        7708: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.conv2DPacked = t1.conv2DPackedPointwise = void 0;\n            const r1 = n1(9754), o1 = n1(5950), i1 = n1(5632);\n            t1.conv2DPackedPointwise = (e1, t1, n1)=>{\n                const o1 = t1[0].dims, s1 = t1[1].dims, a1 = (0, r1.calculateOutputShape)(o1, s1, n1.dilations, n1.pads, n1.strides), u1 = e1.reshapePacked(t1[0], [\n                    o1[1],\n                    o1[2] * o1[3]\n                ]), l1 = e1.reshapePacked(t1[1], [\n                    s1[0],\n                    s1[1]\n                ]), c1 = t1.length > 2 ? [\n                    l1,\n                    u1,\n                    t1[2]\n                ] : [\n                    l1,\n                    u1\n                ], p1 = e1.run((0, i1.createPackedMatmulProgramInfoLoader)(e1, c1, n1), c1);\n                return e1.reshapePacked(p1, a1);\n            }, t1.conv2DPacked = (e1, t1, n1)=>{\n                const s1 = t1[0].dims, a1 = t1[1].dims, u1 = (0, r1.calculateOutputShape)(s1, a1, n1.dilations, n1.pads, n1.strides), l1 = e1.run((0, o1.createPackedIm2ColProgramInfoLoader)(e1, t1[0], t1[1], u1, n1), [\n                    t1[0]\n                ]), c1 = e1.reshapePacked(t1[1], [\n                    a1[0],\n                    a1[1] * a1[2] * a1[3]\n                ]), p1 = 3 === t1.length ? [\n                    c1,\n                    l1,\n                    t1[2]\n                ] : [\n                    c1,\n                    l1\n                ], d1 = e1.run((0, i1.createPackedMatmulProgramInfoLoader)(e1, p1, n1), p1);\n                return e1.reshapePacked(d1, u1);\n            };\n        },\n        5042: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseConvTransposeAttributes = t1.convTranspose = void 0;\n            const r1 = n1(4910), o1 = n1(6757), i1 = n1(5639), s1 = n1(2150), a1 = (e1, t1, n1, r1, o1, i1)=>(e1 - 1) * t1 + n1 + (r1 - 1) * o1 + 1 - i1, u1 = (e1, t1, n1, r1, o1)=>{\n                const i1 = Math.floor(e1 / 2);\n                \"SAME_UPPER\" === t1 ? (n1[r1] = i1, n1[o1] = e1 - i1) : \"SAME_LOWER\" === t1 && (n1[r1] = e1 - i1, n1[o1] = i1);\n            };\n            t1.convTranspose = (e1, t1, n1)=>(d1(t1, n1), l1(e1, t1, n1));\n            const l1 = (e1, t1, n1)=>{\n                const r1 = p1(n1, t1);\n                return [\n                    c1(e1, t1, r1)\n                ];\n            }, c1 = (e1, t1, n1)=>e1.run(((e1, t1, n1)=>{\n                    const r1 = (a1 = t1.length > 2, u1 = n1.cacheKey, {\n                        name: \"ConvTranspose\",\n                        inputNames: a1 ? [\n                            \"X\",\n                            \"W\",\n                            \"B\"\n                        ] : [\n                            \"X\",\n                            \"W\"\n                        ],\n                        inputTypes: a1 ? [\n                            i1.TextureType.unpacked,\n                            i1.TextureType.unpacked,\n                            i1.TextureType.unpacked\n                        ] : [\n                            i1.TextureType.unpacked,\n                            i1.TextureType.unpacked\n                        ],\n                        cacheHint: u1\n                    });\n                    var a1, u1;\n                    return Object.assign(Object.assign({}, r1), {\n                        get: ()=>((e1, t1, n1, r1)=>{\n                                const a1 = t1.length > 2 ? \"getB(output_channel)\" : \"0.0\", u1 = t1[0].dims, l1 = t1[1].dims, c1 = l1[1], p1 = l1[0] / r1.group, d1 = [\n                                    t1[0].dims[0],\n                                    t1[1].dims[1] * r1.group,\n                                    ...r1.outputShape\n                                ], f1 = (0, o1.getGlsl)(e1.session.backend.glContext.version), { activationFunction: h1, applyActivation: g1 } = (0, s1.getActivationSnippet)(r1), b1 = `\\n  const ivec2 strides = ivec2(${r1.strides[0]}, ${r1.strides[1]});\\n  const ivec2 pads = ivec2(${r1.pads[0]}, ${r1.pads[1]});\\n  ${h1}\\n  void main() {\\n    ivec4 coords = getOutputCoords();\\n    int batch = coords.x;\\n    int output_channel = coords.y;\\n\\n    ivec2 loc = coords.zw + pads;\\n\\n    int group_id = output_channel / ${c1};\\n    int wOutChannel = output_channel - group_id * ${c1};\\n\\n    float value = ${a1};\\n    for (int inChannelOffset = 0; inChannelOffset < ${p1}; inChannelOffset++) {\\n      int input_channel = group_id * ${p1} + inChannelOffset;\\n      for (int wWOff = 0; wWOff < ${l1[2]}; wWOff++) {\\n        for (int wHOff = 0; wHOff < ${l1[3]}; wHOff++) {\\n          ivec2 wOff = ivec2(wWOff * ${r1.dilations[0]}, wHOff * ${r1.dilations[1]});\\n          ivec2 wLoc = loc - wOff;\\n          ivec2 wLocIn = wLoc / strides;\\n          if (\\n            wLocIn * strides == wLoc &&\\n            wLocIn.x >= 0 && wLocIn.x < ${u1[2]} &&\\n            wLocIn.y >= 0 && wLocIn.y < ${u1[3]}\\n          ) {\\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\\n            value += xVal * wVal;\\n          }\\n        }\\n      }\\n    }\\n    ${g1}\\n    ${f1.output} = vec4(value, .0, .0, .0);\\n  }\\n`;\n                                return Object.assign(Object.assign({}, n1), {\n                                    output: {\n                                        dims: d1,\n                                        type: t1[0].type,\n                                        textureType: i1.TextureType.unpacked\n                                    },\n                                    shaderSource: b1,\n                                    hasMain: !0\n                                });\n                            })(e1, t1, r1, n1)\n                    });\n                })(e1, t1, n1), t1), p1 = (e1, t1)=>{\n                const n1 = e1.kernelShape.slice();\n                if (0 === e1.kernelShape.length) for(let e1 = 2; e1 < t1[1].dims.length; ++e1)n1.push(t1[1].dims[e1]);\n                const r1 = e1.pads.slice(), o1 = e1.outputShape.slice();\n                ((e1, t1, n1, r1, o1, i1, s1, l1)=>{\n                    const c1 = e1.length - 2, p1 = 0 === l1.length;\n                    for(let d1 = 0; d1 < c1; ++d1){\n                        const f1 = p1 ? e1[d1 + 2] * i1[d1] : l1[d1], h1 = a1(e1[d1 + 2], i1[d1], o1[d1], t1[d1], n1[d1], f1);\n                        u1(h1, r1, o1, d1, d1 + c1), p1 && l1.push(i1[d1] * (e1[d1 + 2] - 1) + s1[d1] + (t1[d1] - 1) * n1[d1] + 1 - o1[d1] - o1[d1 + c1]);\n                    }\n                })(t1[0].dims, n1, e1.dilations, e1.autoPad, r1, e1.strides, e1.outputPadding, o1);\n                const i1 = Object.assign({}, e1);\n                return Object.assign(i1, {\n                    kernelShape: n1,\n                    pads: r1,\n                    outputShape: o1,\n                    cacheKey: e1.cacheKey\n                }), i1;\n            };\n            t1.parseConvTransposeAttributes = (e1)=>{\n                const t1 = e1.attributes, n1 = (0, s1.parseInternalActivationAttributes)(t1), o1 = t1.getString(\"auto_pad\", \"NOTSET\"), i1 = t1.getInts(\"dilations\", [\n                    1,\n                    1\n                ]), a1 = t1.getInt(\"group\", 1), u1 = t1.getInts(\"kernel_shape\", []), l1 = t1.getInts(\"output_padding\", [\n                    0,\n                    0\n                ]), c1 = t1.getInts(\"output_shape\", []), p1 = t1.getInts(\"pads\", [\n                    0,\n                    0,\n                    0,\n                    0\n                ]), d1 = t1.getInts(\"strides\", [\n                    1,\n                    1\n                ]);\n                return (0, r1.createAttributeWithCacheKey)(Object.assign({\n                    autoPad: o1,\n                    dilations: i1,\n                    group: a1,\n                    kernelShape: u1,\n                    outputPadding: l1,\n                    outputShape: c1,\n                    pads: p1,\n                    strides: d1\n                }, n1));\n            };\n            const d1 = (e1, t1)=>{\n                if (!e1 || 2 !== e1.length && 3 !== e1.length) throw new Error(\"Conv requires 2 or 3 inputs\");\n                if (4 !== e1[0].dims.length || 4 !== e1[1].dims.length) throw new Error(\"currently only support 2-dimensional conv\");\n                if (e1[0].dims[1] !== e1[1].dims[0]) throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");\n                const n1 = e1[1].dims[1] * t1.group;\n                if (3 === e1.length && (1 !== e1[2].dims.length || e1[2].dims[0] !== n1)) throw new Error(\"invalid bias\");\n                const r1 = e1[0].dims.length - 2;\n                if (t1.dilations.length !== r1) throw new Error(`dilations should be ${r1}D`);\n                if (t1.strides.length !== r1) throw new Error(`strides should be ${r1}D`);\n                if (t1.pads.length !== 2 * r1) throw new Error(`pads should be ${2 * r1}D`);\n                if (t1.outputPadding.length !== r1) throw new Error(`output_padding should be ${r1}D`);\n                if (0 !== t1.kernelShape.length && t1.kernelShape.length !== e1[1].dims.length - 2) throw new Error(\"invalid kernel shape\");\n                if (0 !== t1.outputShape.length && t1.outputShape.length !== e1[0].dims.length - 2) throw new Error(\"invalid output shape\");\n                if (\"float32\" !== e1[0].type || \"float32\" !== e1[1].type) throw new Error(\"ConvTranspose input(X,W) should be float tensor\");\n                if (3 === e1.length && \"float32\" !== e1[2].type) throw new Error(\"ConvTranspose input(bias) should be float tensor\");\n            };\n        },\n        9754: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseConvAttributes = t1.conv = t1.calculateOutputShape = void 0;\n            const r1 = n1(4910), o1 = n1(7273), i1 = n1(7825), s1 = n1(7708), a1 = n1(3281), u1 = n1(2150), l1 = n1(1625), c1 = n1(8276);\n            t1.calculateOutputShape = (e1, t1, n1, r1, o1)=>{\n                const i1 = e1[0], s1 = e1.slice(2), a1 = s1.length, u1 = t1[0], l1 = t1.slice(2).map((e1, t1)=>e1 + (e1 - 1) * (n1[t1] - 1)), c1 = s1.map((e1, t1)=>e1 + r1[t1] + r1[t1 + a1]), p1 = c1.map((e1, t1)=>Math.floor((e1 - l1[t1] + o1[t1]) / o1[t1]));\n                return [\n                    i1,\n                    u1\n                ].concat(...p1);\n            }, t1.conv = (e1, t1, n1)=>(g1(t1, n1), p1(e1, t1, n1));\n            const p1 = (e1, t1, n1)=>{\n                const r1 = h1(n1, t1), o1 = e1.session.pack, a1 = 1 === r1.kernelShape[0] && 1 === r1.kernelShape[1];\n                return r1.group > 1 ? [\n                    e1.run((0, i1.createUnpackedGroupedConvProgramInfoLoader)(e1, t1, r1), t1)\n                ] : a1 && o1 ? [\n                    d1(e1, t1, r1)\n                ] : o1 && 4 === t1[0].dims.length && 1 === t1[0].dims[0] && !a1 ? [\n                    (0, s1.conv2DPacked)(e1, t1, r1)\n                ] : [\n                    f1(e1, t1, r1)\n                ];\n            }, d1 = (e1, n1, r1)=>{\n                const o1 = n1[0].dims, i1 = n1[1].dims, s1 = (0, t1.calculateOutputShape)(o1, i1, r1.dilations, r1.pads, r1.strides), a1 = e1.reshapeUnpacked(n1[0], [\n                    o1[1],\n                    o1[2] * o1[3]\n                ]), u1 = e1.reshapeUnpacked(n1[1], [\n                    i1[0],\n                    i1[1]\n                ]), l1 = n1.length > 2 ? [\n                    u1,\n                    a1,\n                    n1[2]\n                ] : [\n                    u1,\n                    a1\n                ], p1 = e1.run((0, c1.createMatmulProgramInfoLoader)(l1, r1), l1);\n                return e1.reshapeUnpacked(p1, s1);\n            }, f1 = (e1, n1, r1)=>{\n                const o1 = n1[0].dims, i1 = n1[1].dims, s1 = (0, t1.calculateOutputShape)(o1, i1, r1.dilations, r1.pads, r1.strides), u1 = e1.run((0, l1.createIm2ColProgramInfoLoader)(e1, n1[0], n1[1], s1, r1), [\n                    n1[0]\n                ]), c1 = 3 === n1.length ? [\n                    u1,\n                    n1[1],\n                    n1[2]\n                ] : [\n                    u1,\n                    n1[1]\n                ];\n                return e1.run((0, a1.createDotProductProgramInfoLoader)(e1, n1, s1, r1), c1);\n            }, h1 = (e1, t1)=>{\n                const n1 = e1.kernelShape.slice();\n                if (0 === e1.kernelShape.length) for(let e1 = 2; e1 < t1[1].dims.length; ++e1)n1.push(t1[1].dims[e1]);\n                const r1 = e1.pads.slice();\n                o1.PoolConvUtil.adjustPadsBasedOnAutoPad(t1[0].dims, e1.strides, e1.dilations, n1, r1, e1.autoPad);\n                const i1 = Object.assign({}, e1);\n                return Object.assign(i1, {\n                    kernelShape: n1,\n                    pads: r1,\n                    cacheKey: e1.cacheKey\n                }), i1;\n            };\n            t1.parseConvAttributes = (e1)=>{\n                const t1 = e1.attributes, n1 = (0, u1.parseInternalActivationAttributes)(t1), o1 = t1.getString(\"auto_pad\", \"NOTSET\"), i1 = t1.getInts(\"dilations\", [\n                    1,\n                    1\n                ]), s1 = t1.getInt(\"group\", 1), a1 = t1.getInts(\"kernel_shape\", []), l1 = t1.getInts(\"pads\", [\n                    0,\n                    0,\n                    0,\n                    0\n                ]), c1 = t1.getInts(\"strides\", [\n                    1,\n                    1\n                ]);\n                return (0, r1.createAttributeWithCacheKey)(Object.assign({\n                    autoPad: o1,\n                    dilations: i1,\n                    group: s1,\n                    kernelShape: a1,\n                    pads: l1,\n                    strides: c1\n                }, n1));\n            };\n            const g1 = (e1, t1)=>{\n                if (!e1 || 2 !== e1.length && 3 !== e1.length) throw new Error(\"Conv requires 2 or 3 inputs\");\n                if (4 !== e1[0].dims.length || 4 !== e1[1].dims.length) throw new Error(\"currently only support 2-dimensional conv\");\n                if (e1[0].dims[1] !== e1[1].dims[1] * t1.group) throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");\n                if (3 === e1.length && (1 !== e1[2].dims.length || e1[1].dims[0] !== e1[2].dims[0])) throw new Error(\"invalid bias\");\n                const n1 = e1[0].dims.length - 2;\n                if (t1.dilations.length !== n1) throw new Error(`dilations should be ${n1}D`);\n                if (t1.strides.length !== n1) throw new Error(`strides should be ${n1}D`);\n                if (t1.pads.length !== 2 * n1) throw new Error(`pads should be ${2 * n1}D`);\n                if (0 !== t1.kernelShape.length && t1.kernelShape.length !== e1[1].dims.length - 2) throw new Error(\"invalid kernel shape\");\n                if (\"float32\" !== e1[0].type || \"float32\" !== e1[1].type) throw new Error(\"Conv input(X,W) should be float tensor\");\n                if (3 === e1.length && \"float32\" !== e1[2].type) throw new Error(\"Conv input(bias) should be float tensor\");\n            };\n        },\n        6742: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseDepthToSpaceAttributes = t1.depthToSpace = void 0;\n            const r1 = n1(5707);\n            t1.depthToSpace = (e1, t1, n1)=>{\n                o1(t1);\n                const i1 = n1.blocksize, s1 = i1 * i1, a1 = \"DCR\" === n1.mode ? [\n                    0,\n                    3,\n                    4,\n                    1,\n                    5,\n                    2\n                ] : [\n                    0,\n                    1,\n                    4,\n                    2,\n                    5,\n                    3\n                ], u1 = \"DCR\" === n1.mode ? [\n                    t1[0].dims[0],\n                    i1,\n                    i1,\n                    t1[0].dims[1] / s1,\n                    t1[0].dims[2],\n                    t1[0].dims[3]\n                ] : [\n                    t1[0].dims[0],\n                    t1[0].dims[1] / s1,\n                    i1,\n                    i1,\n                    t1[0].dims[2],\n                    t1[0].dims[3]\n                ], l1 = e1.reshapeUnpacked(t1[0], u1), c1 = {\n                    perm: a1,\n                    cacheKey: `${a1}`\n                }, [p1] = (0, r1.transpose)(e1, [\n                    l1\n                ], c1), d1 = [\n                    t1[0].dims[0],\n                    t1[0].dims[1] / s1,\n                    t1[0].dims[2] * i1,\n                    t1[0].dims[3] * i1\n                ];\n                return [\n                    e1.reshapeUnpacked(p1, d1)\n                ];\n            }, t1.parseDepthToSpaceAttributes = (e1)=>{\n                const t1 = e1.attributes.getInt(\"blocksize\");\n                if (t1 < 1) throw new Error(`blocksize must be >= 1, but got : ${t1} for DepthToSpace`);\n                const n1 = e1.attributes.getString(\"mode\", \"DCR\");\n                if (\"DCR\" !== n1 && \"CRD\" !== n1) throw new Error(`unrecognized mode: ${n1} for DepthToSpace`);\n                return {\n                    mode: n1,\n                    blocksize: t1\n                };\n            };\n            const o1 = (e1)=>{\n                if (1 !== e1.length) throw new Error(`DepthToSpace expect 1 inputs, but got ${e1.length}`);\n                if (\"string\" === e1[0].type || 4 !== e1[0].dims.length) throw new TypeError(\"DepthToSpace input should be a 4-D numeric tensor\");\n            };\n        },\n        3281: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createDotProductProgramInfoLoader = void 0;\n            const r1 = n1(7273), o1 = n1(6757), i1 = n1(5639), s1 = n1(2150), a1 = n1(1625);\n            t1.createDotProductProgramInfoLoader = (e1, t1, n1, u1)=>{\n                const l1 = ((e1, t1)=>({\n                        name: \"ConvDotProduct\",\n                        inputNames: e1 ? [\n                            \"Im2Col\",\n                            \"K\",\n                            \"B\"\n                        ] : [\n                            \"Im2Col\",\n                            \"K\"\n                        ],\n                        inputTypes: e1 ? [\n                            i1.TextureType.unpacked,\n                            i1.TextureType.packedLastDimension,\n                            i1.TextureType.unpacked\n                        ] : [\n                            i1.TextureType.unpacked,\n                            i1.TextureType.packedLastDimension\n                        ],\n                        cacheKey: t1.activationCacheKey\n                    }))(t1.length > 2, u1);\n                return Object.assign(Object.assign({}, l1), {\n                    get: ()=>((e1, t1, n1, u1, l1)=>{\n                            const c1 = n1[0].dims, p1 = n1[1].dims, d1 = [\n                                p1[0],\n                                Math.ceil(c1[1] * p1[2] * p1[3] / 4)\n                            ], f1 = (0, a1.calculateIm2ColDims)(c1, p1, u1), [h1, g1] = e1.calculateTextureWidthAndHeight(d1, i1.TextureType.packedLastDimension), b1 = r1.ShapeUtil.computeStrides(f1), [m1, y1] = e1.calculateTextureWidthAndHeight(f1, i1.TextureType.packedLastDimension), _1 = u1.length, v1 = n1.length < 3 ? \"0.0\" : \"_B(b)\", T1 = Math.ceil(c1[1] * p1[2] * p1[3] / 4), { activationFunction: x1, applyActivation: w1 } = (0, s1.getActivationSnippet)(l1), O1 = (0, o1.getGlsl)(e1.session.backend.glContext.version), S1 = `\\n${x1}\\nfloat process(int indices[${_1}]) {\\n  int b[1];\\n  b[0] = indices[1];\\n  int im2col[4];\\n  im2col[0] = indices[0];\\n  im2col[1] = indices[2];\\n  im2col[2] = indices[3];\\n  int im2colOffset = im2col[0] * ${b1[0]} + im2col[1] * ${b1[1]} + im2col[2] * ${b1[2]};\\n  int kernelOffset = indices[1] * ${d1[1]};\\n  float value = ${v1};\\n  for (int i = 0; i < ${T1}; ++i) {\\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${m1}, ${y1});\\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${h1}, ${g1});\\n    value += dot(${O1.texture2D}(Im2Col, im2colCoords), ${O1.texture2D}(K, kernelCoords));\\n    ++im2colOffset;\\n    ++kernelOffset;\\n  }\\n  ${w1}\\n  return value;\\n}`;\n                            return Object.assign(Object.assign({}, t1), {\n                                output: {\n                                    dims: u1,\n                                    type: n1[0].type,\n                                    textureType: i1.TextureType.unpacked\n                                },\n                                shaderSource: S1\n                            });\n                        })(e1, l1, t1, n1, u1)\n                });\n            };\n        },\n        4125: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseFlattenAttributes = t1.flatten = void 0;\n            const r1 = n1(7273);\n            t1.flatten = (e1, t1, n1)=>{\n                o1(t1, n1);\n                const i1 = r1.ShapeUtil.flattenShape(t1[0].dims, n1);\n                return [\n                    e1.reshapeUnpacked(t1[0], i1)\n                ];\n            }, t1.parseFlattenAttributes = (e1)=>e1.attributes.getInt(\"axis\", 1);\n            const o1 = (e1, t1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Flatten requires 1 input.\");\n                const n1 = e1[0].dims.length;\n                if (0 === n1) throw new Error(\"scalar tensor is not supported.\");\n                if (t1 < -n1 || t1 > n1) throw new Error(\"Invalid axis\");\n                if (\"string\" === e1[0].type) throw new Error(\"string tensor is not supported.\");\n            };\n        },\n        2150: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseInternalActivationAttributes = t1.getActivationSnippet = void 0;\n            const r1 = n1(7273), o1 = n1(9087);\n            t1.getActivationSnippet = function(e1) {\n                let t1;\n                switch(e1.activation){\n                    case \"Relu\":\n                        t1 = (0, o1.glslRelu)();\n                        break;\n                    case \"Sigmoid\":\n                        t1 = (0, o1.glslSigmoid)();\n                        break;\n                    case \"Clip\":\n                        t1 = (0, o1.glslClip)(e1.clipMin, e1.clipMax);\n                        break;\n                    default:\n                        return {\n                            activationFunction: \"\",\n                            applyActivation: \"\"\n                        };\n                }\n                const n1 = t1.name;\n                return {\n                    activationFunction: t1.body,\n                    applyActivation: `value = ${n1}_(value);`\n                };\n            }, t1.parseInternalActivationAttributes = (e1)=>{\n                const t1 = e1.getString(\"activation\", \"\");\n                if (\"Clip\" === t1) {\n                    const [n1, o1] = e1.getFloats(\"activation_params\", [\n                        r1.MIN_CLIP,\n                        r1.MAX_CLIP\n                    ]);\n                    return {\n                        activation: t1,\n                        clipMax: o1,\n                        clipMin: n1,\n                        activationCacheKey: `${t1}:${n1},${o1}`\n                    };\n                }\n                return {\n                    activation: t1,\n                    activationCacheKey: t1\n                };\n            };\n        },\n        6149: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseGatherAttributes = t1.gather = void 0;\n            const r1 = n1(4910), o1 = n1(6145), i1 = n1(7273), s1 = n1(5639);\n            t1.gather = (e1, t1, n1)=>(l1(t1, n1.axis), [\n                    e1.run(u1(e1, t1, n1), t1)\n                ]), t1.parseGatherAttributes = (e1)=>(0, r1.createAttributeWithCacheKey)({\n                    axis: e1.attributes.getInt(\"axis\", 0)\n                });\n            const a1 = {\n                name: \"Gather\",\n                inputNames: [\n                    \"A\",\n                    \"B\"\n                ],\n                inputTypes: [\n                    s1.TextureType.unpacked,\n                    s1.TextureType.unpacked\n                ]\n            }, u1 = (e1, t1, n1)=>{\n                const r1 = Object.assign(Object.assign({}, a1), {\n                    cacheHint: n1.cacheKey\n                });\n                return Object.assign(Object.assign({}, r1), {\n                    get: ()=>((e1, t1, n1, r1)=>{\n                            const o1 = n1[0].dims.slice(), a1 = n1[1].dims.slice(), u1 = new Array(o1.length + a1.length - 1);\n                            r1 = i1.ShapeUtil.normalizeAxis(r1, o1.length);\n                            const l1 = [];\n                            for(let e1 = 0; e1 < u1.length; e1++)e1 < r1 ? (u1[e1] = o1[e1], l1.push(`inputIdx[${e1}] = outputIdx[${e1}];`)) : e1 < r1 + a1.length ? (u1[e1] = a1[e1 - r1], l1.push(`indexDataIdx[${e1 - r1}] = outputIdx[${e1}];`)) : (u1[e1] = o1[e1 - a1.length + 1], l1.push(`inputIdx[${e1 - a1.length + 1}] = outputIdx[${e1}];`));\n                            const c1 = `\\n      float process(int outputIdx[${u1.length || 1}]) {\\n        int inputIdx[${o1.length}];\\n        int indexDataIdx[${a1.length || 1}];\\n        indexDataIdx[0] = 0;\\n        ${l1.join(\"\\n        \")}\\n        int idx = int(_B(indexDataIdx));\\n        inputIdx[${r1}] = idx < 0 ? idx + ${o1[r1]} : idx;\\n        return _A(inputIdx);\\n      }`;\n                            return Object.assign(Object.assign({}, t1), {\n                                output: {\n                                    dims: u1,\n                                    type: n1[0].type,\n                                    textureType: s1.TextureType.unpacked\n                                },\n                                shaderSource: c1\n                            });\n                        })(0, r1, t1, n1.axis)\n                });\n            }, l1 = (e1, t1)=>{\n                if (!e1 || 2 !== e1.length) throw new Error(\"Gather requires 2 inputs.\");\n                const n1 = e1[0].dims.length;\n                if (n1 < 1) throw new Error(\"Invalid input shape.\");\n                if (t1 < -n1 || t1 > n1 - 1) throw new Error(\"Invalid axis.\");\n                if (-1 === o1.NUMBER_TYPES.indexOf(e1[0].type)) throw new Error(\"Invaid input type.\");\n                if (\"int32\" !== e1[1].type && \"int16\" !== e1[1].type) throw new Error(\"Invaid input type.\");\n            };\n        },\n        5378: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseGemmAttributesV11 = t1.parseGemmAttributesV7 = t1.gemm = void 0;\n            const r1 = n1(4910), o1 = n1(7273), i1 = n1(5639);\n            t1.gemm = (e1, t1, n1)=>(l1(t1, n1), [\n                    e1.run(a1(t1, n1), t1)\n                ]);\n            const s1 = (e1, t1)=>{\n                const n1 = 0 !== e1.attributes.getInt(\"transA\", 0), o1 = 0 !== e1.attributes.getInt(\"transB\", 0), i1 = e1.attributes.getFloat(\"alpha\", 1), s1 = e1.attributes.getFloat(\"beta\", 1);\n                return (0, r1.createAttributeWithCacheKey)({\n                    transA: n1,\n                    transB: o1,\n                    alpha: i1,\n                    beta: s1,\n                    isOptionalC: t1\n                });\n            };\n            t1.parseGemmAttributesV7 = (e1)=>s1(e1, !1), t1.parseGemmAttributesV11 = (e1)=>s1(e1, !0);\n            const a1 = (e1, t1)=>{\n                const n1 = {\n                    name: \"Gemm\",\n                    inputNames: 3 === e1.length ? [\n                        \"A\",\n                        \"B\",\n                        \"C\"\n                    ] : [\n                        \"A\",\n                        \"B\"\n                    ],\n                    inputTypes: 3 === e1.length ? [\n                        i1.TextureType.unpacked,\n                        i1.TextureType.unpacked,\n                        i1.TextureType.unpacked\n                    ] : [\n                        i1.TextureType.unpacked,\n                        i1.TextureType.unpacked\n                    ],\n                    key: t1.cacheKey\n                };\n                return Object.assign(Object.assign({}, n1), {\n                    get: ()=>u1(n1, e1, t1)\n                });\n            }, u1 = (e1, t1, n1)=>{\n                const r1 = t1[0].dims.slice(), s1 = t1[1].dims.slice(), [a1, u1] = o1.GemmUtil.getShapeOfGemmResult(r1, n1.transA, s1, n1.transB, 3 === t1.length ? t1[2].dims : void 0), l1 = [\n                    a1,\n                    u1\n                ];\n                if (!l1) throw new Error(\"Can't use gemm on the given tensors\");\n                let c1 = r1[r1.length - 1], p1 = \"\";\n                n1.transA && (c1 = r1[0]), n1.transA && n1.transB ? p1 = \"value += _A_T(a) * _B_T(b);\" : n1.transA && !n1.transB ? p1 = \"value += _A_T(a) * _B(b);\" : !n1.transA && n1.transB ? p1 = \"value += _A(a) * _B_T(b);\" : n1.transA || n1.transB || (p1 = \"value += _A(a) * _B(b);\");\n                const d1 = l1.length, f1 = `\\n      float process(int indices[${d1}]) {\\n          int a[${d1}];\\n          int b[${d1}];\\n          ${3 === t1.length ? `int c[${t1[2].dims.length}];` : \"\"}\\n\\n          copyVec(indices, a);\\n          copyVec(indices, b);\\n          ${3 === t1.length ? \"bcastIndices_C(indices, c);\" : \"\"}\\n\\n          float value = 0.0;\\n          for (int k=0; k<${c1}; ++k) {\\n              a[${d1 - 1}] = k;\\n              b[${d1 - 2}] = k;\\n              ${p1}\\n          }\\n\\n          value = value * alpha;\\n          ${3 === t1.length ? \"value += beta * _C(c);\" : \"\"}\\n          return value;\\n      }`;\n                return Object.assign(Object.assign({}, e1), {\n                    output: {\n                        dims: l1,\n                        type: t1[0].type,\n                        textureType: i1.TextureType.unpacked\n                    },\n                    variables: [\n                        {\n                            name: \"alpha\",\n                            type: \"float\",\n                            data: n1.alpha\n                        },\n                        {\n                            name: \"beta\",\n                            type: \"float\",\n                            data: n1.beta\n                        }\n                    ],\n                    shaderSource: f1\n                });\n            }, l1 = (e1, t1)=>{\n                if (!e1) throw new Error(\"Input is missing\");\n                if (t1.isOptionalC && (e1.length < 2 || e1.length > 3)) throw new Error(\"Invaid input shape.\");\n                if (!t1.isOptionalC && 3 !== e1.length) throw new Error(\"Gemm requires 3 inputs\");\n                if (3 === e1.length && 1 !== e1[2].dims.length && 2 !== e1[2].dims.length) throw new Error(\"Invalid input shape of C\");\n                if (\"float32\" !== e1[0].type && \"float64\" !== e1[0].type || \"float32\" !== e1[1].type && \"float64\" !== e1[1].type || 3 === e1.length && \"float32\" !== e1[2].type && \"float64\" !== e1[2].type) throw new Error(\"Invalid input type.\");\n                if (e1[0].type !== e1[1].type || 3 === e1.length && e1[0].type !== e1[2].type) throw new Error(\"Input types are mismatched\");\n            };\n        },\n        5950: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createPackedIm2ColProgramInfoLoader = void 0;\n            const r1 = n1(6757), o1 = n1(5639), i1 = n1(5614);\n            t1.createPackedIm2ColProgramInfoLoader = (e1, t1, n1, s1, a1)=>{\n                const u1 = (l1 = a1.cacheKey, {\n                    name: \"Im2Col (packed)\",\n                    inputNames: [\n                        \"A\"\n                    ],\n                    inputTypes: [\n                        o1.TextureType.packed\n                    ],\n                    cacheHint: l1\n                });\n                var l1;\n                return Object.assign(Object.assign({}, u1), {\n                    get: ()=>((e1, t1, n1, s1, a1, u1)=>{\n                            const l1 = n1.dims, c1 = s1.dims, p1 = a1.length, d1 = [\n                                c1[1] * c1[2] * c1[3],\n                                a1[2] * a1[3]\n                            ], f1 = c1[2] * c1[3], h1 = (0, i1.unpackFromChannel)(), g1 = (0, r1.getGlsl)(e1.session.backend.glContext.version);\n                            let b1 = \"\";\n                            for(let e1 = 0; e1 <= 1; e1++)for(let t1 = 0; t1 <= 1; t1++)b1 += `\\n            blockIndex = rc.x + ${t1};\\n            pos = rc.y + ${e1};\\n\\n            if(blockIndex < ${d1[1]} && pos < ${d1[0]}) {\\n              offsetY = int(blockIndex / (${a1[p1 - 1]})) * ${u1.strides[0]} -\\n                ${u1.pads[0]};\\n              d0 = offsetY + ${u1.dilations[0]} * (imod(pos, ${f1}) / ${c1[2]});\\n\\n              if(d0 < ${l1[2]} && d0 >= 0) {\\n                offsetX = imod(blockIndex, ${a1[p1 - 1]}) * ${u1.strides[1]} -\\n                  ${u1.pads[1]};\\n                d1 = offsetX + ${u1.dilations[1]} * imod(imod(pos, ${f1}), ${c1[2]});\\n\\n                if(d1 < ${l1[3]} && d1 >= 0) {\\n\\n                  ch = int(float(pos)/ ${f1}.);\\n                    innerDims = vec2(d0, d1);\\n                    result[${2 * e1 + t1}] = getChannel(\\n                      getA(0, ch, int(innerDims.x),\\n                      int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n\\n          `;\n                            const m1 = `\\n      ${h1}\\n\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n          vec4 result = vec4(0.0);\\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n          vec2 innerDims;\\n          ${b1}\\n          ${g1.output} = result;\\n      }\\n            `;\n                            return Object.assign(Object.assign({}, t1), {\n                                output: {\n                                    dims: d1,\n                                    type: n1.type,\n                                    textureType: o1.TextureType.packed\n                                },\n                                shaderSource: m1,\n                                hasMain: !0\n                            });\n                        })(e1, u1, t1, n1, s1, a1)\n                });\n            };\n        },\n        1625: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.calculateIm2ColDims = t1.createIm2ColProgramInfoLoader = void 0;\n            const r1 = n1(5639);\n            t1.createIm2ColProgramInfoLoader = (e1, n1, o1, i1, s1)=>{\n                const a1 = (u1 = s1.cacheKey, {\n                    name: \"Im2Col\",\n                    inputNames: [\n                        \"X\"\n                    ],\n                    inputTypes: [\n                        r1.TextureType.unpacked\n                    ],\n                    cacheHint: u1\n                });\n                var u1;\n                return Object.assign(Object.assign({}, a1), {\n                    get: ()=>((e1, n1, o1, i1, s1, a1)=>{\n                            const u1 = o1.dims, l1 = i1.dims, c1 = s1.length, p1 = (0, t1.calculateIm2ColDims)(u1, l1, s1, 4), d1 = `\\n        const int XC = ${u1[1]};\\n        const int XH = ${u1[2]};\\n        const int XW = ${u1[3]};\\n        const int KH = ${a1.kernelShape[0]};\\n        const int KW = ${a1.kernelShape[1]};\\n        const int dilationH = ${a1.dilations[0]};\\n        const int dilationW = ${a1.dilations[1]};\\n        const int strideH = ${a1.strides[0]};\\n        const int strideW = ${a1.strides[1]};\\n        const int padH = ${a1.pads[0]};\\n        const int padW = ${a1.pads[1]};\\n        const int KHKW = KH*KW;\\n        const int XCKHKW = XC * KHKW;\\n        const int outputChannels = 4;\\n        vec4 process(int indices[${c1}]) {\\n          int b  = indices[0]; // batch size\\n          int oh = indices[1] * strideH - padH; //output height\\n          int ow = indices[2] * strideW - padW; //output width\\n          int p = indices[3] * outputChannels; //patch\\n          vec4 value = vec4(0.0);\\n          for(int i=0; i < outputChannels; ++i) {\\n            if(p < XCKHKW) {\\n              int patchC = p / KHKW;\\n              int patchH = (p - patchC*KHKW) / KW;\\n              int patchW = (p - patchC*KHKW) - patchH * KW;\\n              int xh2 = oh + patchH * dilationH;\\n              int xw2 = ow + patchW * dilationW;\\n              int x[${u1.length}];\\n              x[0] = b;\\n              x[1] = patchC;\\n              x[2] = xh2;\\n              x[3] = xw2;\\n              if(xh2 >= 0 &&\\n                  xh2 < XH &&\\n                  xw2 >= 0 &&\\n                  xw2 < XW) {\\n                value[i] = _X(x);\\n              }\\n            }\\n            ++p;\\n          }\\n          return value;\\n        }\\n        `;\n                            return Object.assign(Object.assign({}, n1), {\n                                output: {\n                                    dims: p1,\n                                    type: o1.type,\n                                    textureType: r1.TextureType.packedLastDimension\n                                },\n                                shaderSource: d1\n                            });\n                        })(0, a1, n1, o1, i1, s1)\n                });\n            }, t1.calculateIm2ColDims = (e1, t1, n1, r1 = 4)=>[\n                    n1[0],\n                    n1[2],\n                    n1[3],\n                    Math.ceil(e1[1] * t1[2] * t1[3] / r1)\n                ];\n        },\n        6981: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseImageScalerAttributes = t1.imageScaler = void 0;\n            const r1 = n1(4910), o1 = n1(5639);\n            t1.imageScaler = (e1, t1, n1)=>(u1(t1), [\n                    e1.run(s1(e1, t1, n1), t1)\n                ]), t1.parseImageScalerAttributes = (e1)=>{\n                const t1 = e1.attributes.getFloat(\"scale\"), n1 = e1.attributes.getFloats(\"bias\");\n                return (0, r1.createAttributeWithCacheKey)({\n                    scale: t1,\n                    bias: n1\n                });\n            };\n            const i1 = {\n                name: \"ImageScaler\",\n                inputNames: [\n                    \"X\"\n                ],\n                inputTypes: [\n                    o1.TextureType.unpacked\n                ]\n            }, s1 = (e1, t1, n1)=>{\n                const r1 = Object.assign(Object.assign({}, i1), {\n                    cacheHint: n1.cacheKey\n                });\n                return Object.assign(Object.assign({}, r1), {\n                    get: ()=>((e1, t1, n1, r1)=>{\n                            const i1 = n1[0].dims.slice(), s1 = i1.length, u1 = `\\n      ${a1(r1.bias.length)}\\n      float process(int indices[${s1}]) {\\n        return _X(indices) * scale + getBias(bias, indices[1]);\\n      }`;\n                            return Object.assign(Object.assign({}, t1), {\n                                output: {\n                                    dims: i1,\n                                    type: n1[0].type,\n                                    textureType: o1.TextureType.unpacked\n                                },\n                                variables: [\n                                    {\n                                        name: \"bias\",\n                                        type: \"float\",\n                                        arrayLength: r1.bias.length,\n                                        data: r1.bias\n                                    },\n                                    {\n                                        name: \"scale\",\n                                        type: \"float\",\n                                        data: r1.scale\n                                    }\n                                ],\n                                shaderSource: u1\n                            });\n                        })(0, r1, t1, n1)\n                });\n            }, a1 = (e1)=>{\n                const t1 = [\n                    `float getBias(float bias[${e1}], int channel) {`\n                ];\n                for(let n1 = 0; n1 < e1; ++n1)0 === n1 ? t1.push(`\\tif (channel == ${n1}) { return bias[${n1}]; }`) : n1 === e1 - 1 ? t1.push(`\\telse { return bias[${n1}]; }`) : t1.push(`\\telse if (channel == ${n1}) { return bias[${n1}]; }`);\n                return t1.push(\"\t}\"), t1.join(\"\\n\");\n            }, u1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"ImageScaler requires 1 input.\");\n                if (4 !== e1[0].dims.length) throw new Error(\"Invalid input shape.\");\n                if (\"float32\" !== e1[0].type && \"float64\" !== e1[0].type) throw new Error(\"Invalid input type.\");\n            };\n        },\n        7413: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseInstanceNormalizationAttributes = t1.instanceNormalization = void 0;\n            const r1 = n1(6757), o1 = n1(5639);\n            t1.instanceNormalization = (e1, t1, n1)=>{\n                l1(t1);\n                const r1 = e1.run(s1(t1[0]), t1);\n                return [\n                    e1.run(u1(e1, t1[0], n1, r1.dims), [\n                        t1[0],\n                        r1,\n                        t1[1],\n                        t1[2]\n                    ])\n                ];\n            }, t1.parseInstanceNormalizationAttributes = (e1)=>e1.attributes.getFloat(\"epsilon\", 1e-5);\n            const i1 = {\n                name: \"InstanceNormalization_MeanAndVariance\",\n                inputNames: [\n                    \"X\"\n                ],\n                inputTypes: [\n                    o1.TextureType.unpacked\n                ]\n            }, s1 = (e1)=>Object.assign(Object.assign({}, i1), {\n                    get: ()=>((e1, t1)=>{\n                            const n1 = t1.dims.slice(), r1 = n1[1], i1 = n1[2] * n1[3], s1 = [\n                                n1[0],\n                                r1\n                            ], a1 = `\\n      vec4 process(int[2] indices) {\\n        vec4 v = vec4(0.0);\\n        int a[4];\\n        a[0] = indices[0];\\n        a[1] = indices[1];\\n        float temp = 0.0;\\n        for(int a2=0; a2<${n1[2]}; a2++) {\\n          a[2] = a2;\\n          for(int a3=0; a3<${n1[3]}; a3++) {\\n            a[3] = a3;\\n            float x = _X(a);\\n            temp += x;\\n          }\\n        }\\n        float mean = temp / float(${i1});\\n        temp = 0.0;\\n        for(int a2=0; a2<${n1[2]}; a2++) {\\n          a[2] = a2;\\n          for(int a3=0; a3<${n1[3]}; a3++) {\\n            a[3] = a3;\\n            float x = _X(a);\\n            temp += (x - mean) * (x - mean);\\n          }\\n        }\\n        v.r = mean;\\n        v.g = temp / float(${i1});\\n\\n        return v;\\n      }`;\n                            return Object.assign(Object.assign({}, e1), {\n                                output: {\n                                    dims: s1,\n                                    type: t1.type,\n                                    textureType: o1.TextureType.packedLastDimension\n                                },\n                                shaderSource: a1\n                            });\n                        })(i1, e1)\n                }), a1 = {\n                name: \"InstanceNormalization_ComputeOutput\",\n                inputNames: [\n                    \"X\",\n                    \"MeanAndVariance\",\n                    \"Scale\",\n                    \"B\"\n                ],\n                inputTypes: [\n                    o1.TextureType.unpacked,\n                    o1.TextureType.packedLastDimension,\n                    o1.TextureType.unpacked,\n                    o1.TextureType.unpacked\n                ]\n            }, u1 = (e1, t1, n1, i1)=>{\n                const s1 = Object.assign(Object.assign({}, a1), {\n                    cacheHint: `${n1}`\n                });\n                return Object.assign(Object.assign({}, s1), {\n                    get: ()=>((e1, t1, n1, i1, s1)=>{\n                            const a1 = (0, r1.getGlsl)(e1.session.backend.glContext.version), [u1, l1] = e1.calculateTextureWidthAndHeight(s1, o1.TextureType.packedLastDimension), [c1, p1] = [\n                                u1 / 4,\n                                l1\n                            ], d1 = `\\n      vec4 get_MeanAndVariance(int[2] mv) {\\n        int offset = indicesToOffset_MeanAndVariance(mv);\\n        vec2 coords = offsetToCoords(offset, ${c1}, ${p1});\\n        return ${a1.texture2D}(MeanAndVariance, coords);\\n      }\\n\\n      float process(int[4] indices) {\\n        int mv[2];\\n        mv[0] = indices[0];\\n        mv[1] = indices[1];\\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\\n        float mean = mean_and_variance.r;\\n        float variance = mean_and_variance.g;\\n\\n        int sb[1];\\n        sb[0] = indices[1];\\n        float scale = _Scale(sb);\\n        float b = _B(sb);\\n\\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\\n      }`;\n                            return Object.assign(Object.assign({}, t1), {\n                                output: {\n                                    dims: n1.dims,\n                                    type: n1.type,\n                                    textureType: o1.TextureType.unpacked\n                                },\n                                variables: [\n                                    {\n                                        name: \"epsilon\",\n                                        type: \"float\",\n                                        data: i1\n                                    }\n                                ],\n                                shaderSource: d1\n                            });\n                        })(e1, s1, t1, n1, i1)\n                });\n            }, l1 = (e1)=>{\n                if (!e1 || 3 !== e1.length) throw new Error(\"InstanceNormalization requires 3 inputs.\");\n                const t1 = e1[0], n1 = e1[1], r1 = e1[2];\n                if (t1.dims.length < 3 || 1 !== n1.dims.length || 1 !== r1.dims.length) throw new Error(\"Invalid input shape.\");\n                if (n1.dims[0] !== t1.dims[1] || r1.dims[0] !== t1.dims[1]) throw new Error(\"Input shapes are mismatched.\");\n                if (\"float32\" !== t1.type && \"float64\" !== t1.type || \"float32\" !== n1.type && \"float64\" !== n1.type || \"float32\" !== r1.type && \"float64\" !== r1.type) throw new Error(\"Invalid input type.\");\n                if (4 !== e1[0].dims.length) throw new Error(\"Only support 4-D input shape.\");\n            };\n        },\n        7006: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createLrnProgramInfoLoader = t1.parseLrnAttributes = t1.lrn = void 0;\n            const r1 = n1(4910), o1 = n1(5639);\n            t1.lrn = (e1, t1, n1)=>(a1(t1), [\n                    e1.run(s1(t1, n1), t1)\n                ]), t1.parseLrnAttributes = (e1)=>{\n                const t1 = e1.attributes.getFloat(\"alpha\", 1e-4), n1 = e1.attributes.getFloat(\"beta\", .75), o1 = e1.attributes.getFloat(\"bias\", 1), i1 = e1.attributes.getInt(\"size\");\n                return (0, r1.createAttributeWithCacheKey)({\n                    alpha: t1,\n                    beta: n1,\n                    bias: o1,\n                    size: i1\n                });\n            };\n            const i1 = {\n                name: \"LRN\",\n                inputNames: [\n                    \"X\"\n                ],\n                inputTypes: [\n                    o1.TextureType.unpacked\n                ]\n            };\n            function s1(e1, t1) {\n                return Object.assign(Object.assign({}, i1), {\n                    cacheHint: t1.cacheKey,\n                    get: ()=>(function(e1, t1) {\n                            const n1 = e1[0].dims[1], r1 = e1[0].dims.length, s1 = -Math.floor((t1.size - 1) / 2), a1 = Math.ceil((t1.size - 1) / 2), u1 = `float(${t1.alpha}) / float(${t1.size})`, l1 = `\\n    float process(int indices[${r1}]) {\\n        int c = indices[1];\\n        float x = _X(indices);\\n        float square_sum = 0.0;\\n\\n        for (int i = ${s1}; i <= ${a1}; i++) {\\n          int idx = c + i;\\n          if (c >= 0 && c < ${n1}) {\\n            indices[1] = idx;\\n            float j = _X(indices);\\n            square_sum += j * j;\\n          }\\n        }\\n        return x / pow(float(${t1.bias}) + ${u1} * square_sum, float(${t1.beta}));\\n    }`;\n                            return Object.assign(Object.assign({}, i1), {\n                                cacheHint: t1.cacheKey,\n                                output: {\n                                    dims: e1[0].dims,\n                                    type: e1[0].type,\n                                    textureType: o1.TextureType.unpacked\n                                },\n                                shaderSource: l1\n                            });\n                        })(e1, t1)\n                });\n            }\n            t1.createLrnProgramInfoLoader = s1;\n            const a1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"LRN requires 1 input.\");\n                if (4 !== e1[0].dims.length) throw new Error('currently only support LRN for input with \"NCHW\" format');\n                if (\"float32\" !== e1[0].type) throw new Error(\"input should be float type\");\n            };\n        },\n        5632: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createPackedMatmulProgramInfoLoader = void 0;\n            const r1 = n1(7273), o1 = n1(6757), i1 = n1(5639), s1 = n1(432), a1 = n1(2150), u1 = n1(8276);\n            t1.createPackedMatmulProgramInfoLoader = (e1, t1, n1)=>{\n                const l1 = (c1 = t1.length > 2, p1 = n1.activationCacheKey, {\n                    name: \"MatMul (packed)\",\n                    inputNames: c1 ? [\n                        \"A\",\n                        \"B\",\n                        \"Bias\"\n                    ] : [\n                        \"A\",\n                        \"B\"\n                    ],\n                    inputTypes: c1 ? [\n                        i1.TextureType.packed,\n                        i1.TextureType.packed,\n                        i1.TextureType.packed\n                    ] : [\n                        i1.TextureType.packed,\n                        i1.TextureType.packed\n                    ],\n                    cacheHint: p1\n                });\n                var c1, p1;\n                return Object.assign(Object.assign({}, l1), {\n                    get: ()=>((e1, t1, n1, l1)=>{\n                            const c1 = n1.length > 2, p1 = c1 ? \"value += getBiasForMatmul();\" : \"\", d1 = n1[0].dims, f1 = n1[1].dims, h1 = r1.BroadcastUtil.calcShape(d1, f1, !0), g1 = !r1.ShapeUtil.areEqual(n1[0].dims, n1[1].dims);\n                            if (!h1) throw new Error(\"Can't use matmul on the given tensors\");\n                            const b1 = d1[d1.length - 1], m1 = Math.ceil(b1 / 2), y1 = d1.length, _1 = f1.length, v1 = (0, o1.getGlsl)(e1.session.backend.glContext.version), T1 = (0, s1.getCoordsDataType)(h1.length), x1 = h1.length, w1 = (0, s1.getGlChannels)(), { activationFunction: O1, applyActivation: S1 } = (0, a1.getActivationSnippet)(l1), A1 = c1 ? `${(0, u1.getBiasForMatmul)(T1, w1, n1[2].dims, h1, !0)}` : \"\", P1 = g1 ? `${function(e1, t1, n1, o1) {\n                                let i1 = [], s1 = [];\n                                const a1 = n1[0].dims, u1 = n1[1].dims, l1 = a1.length, c1 = u1.length, p1 = o1.length, d1 = p1 - l1, f1 = p1 - c1;\n                                i1 = a1.map((e1, n1)=>`coords.${t1[n1 + d1]}`), i1[l1 - 1] = \"i*2\", i1.join(\", \"), s1 = u1.map((e1, n1)=>`coords.${t1[n1 + f1]}`), s1[c1 - 2] = \"i*2\", s1.join(\", \");\n                                const h1 = r1.BroadcastUtil.getBroadcastDims(a1, o1), g1 = r1.BroadcastUtil.getBroadcastDims(u1, o1), b1 = h1.map((e1)=>`coords.${t1[e1 + d1]} = 0;`).join(\"\\n\"), m1 = g1.map((e1)=>`coords.${t1[e1 + f1]} = 0;`).join(\"\\n\"), y1 = `int lastDim = coords.${t1[p1 - 1]};\\n  coords.${t1[p1 - 1]} = coords.${t1[p1 - 2]};\\n  coords.${t1[p1 - 2]} = lastDim;`;\n                                return `\\nvec4 getAAtOutCoordsMatmul(int i) {\\n  ${e1} coords = getOutputCoords();\\n  ${y1}\\n  ${b1}\\n  vec4 outputValue = getA(${i1});\\n  return outputValue;\\n}\\n\\nvec4 getBAtOutCoordsMatmul(int i) {\\n  ${e1} coords = getOutputCoords();\\n  ${y1}\\n  ${m1}\\n  vec4 outputValue = getB(${s1});\\n  return outputValue;\\n}`;\n                            }(T1, w1, n1, h1)}` : \"\", I1 = g1 ? \"getAAtOutCoordsMatmul(i)\" : `getA(${function(e1, t1) {\n                                let n1 = \"\";\n                                for(let r1 = 0; r1 < t1 - 2; r1++)n1 += `rc.${e1[r1]}, `;\n                                return n1 += `rc.${e1[t1 - 2]}, i*2`, n1;\n                            }(w1, y1)})`, E1 = g1 ? \"getBAtOutCoordsMatmul(i)\" : `getB(${function(e1, t1) {\n                                let n1 = \"\";\n                                for(let r1 = 0; r1 < t1 - 2; r1++)n1 += `rc.${e1[r1]}, `;\n                                return n1 += `i*2, rc.${e1[t1 - 1]}`, n1;\n                            }(w1, _1)})`, D1 = `\\n            ${P1}\\n            ${A1}\\n            ${O1}\\n            void main() {\\n              ${g1 ? \"\" : `${T1} rc =\\n          getOutputCoords(); int lastDim = rc.${w1[x1 - 1]}; rc.${w1[x1 - 1]} =\\n          rc.${w1[x1 - 2]}; rc.${w1[x1 - 2]} = lastDim;\\n      `}\\n\\n              vec4 value = vec4(0);\\n              for (int i = 0; i < ${m1}; i++) {\\n                vec4 a = ${I1};\\n                vec4 b = ${E1};\\n\\n                value += (a.rrbb * b.rgrg);\\n                value += (a.ggaa * b.baba);\\n              }\\n              ${p1}\\n              ${S1}\\n              ${v1.output} = value;\\n            }`;\n                            return Object.assign(Object.assign({}, t1), {\n                                output: {\n                                    dims: h1,\n                                    type: n1[0].type,\n                                    textureType: i1.TextureType.packed\n                                },\n                                shaderSource: D1,\n                                hasMain: !0\n                            });\n                        })(e1, l1, t1, n1)\n                });\n            };\n        },\n        8276: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.getBiasForMatmul = t1.createMatmulProgramInfoLoader = t1.parseMatMulAttributes = t1.matMul = void 0;\n            const r1 = n1(7273), o1 = n1(5639), i1 = n1(432), s1 = n1(2150), a1 = n1(5632);\n            t1.matMul = (e1, t1, n1)=>(c1(t1), e1.session.pack ? [\n                    e1.run((0, a1.createPackedMatmulProgramInfoLoader)(e1, t1, n1), t1)\n                ] : [\n                    e1.run(l1(t1, n1), t1)\n                ]), t1.parseMatMulAttributes = (e1)=>(0, s1.parseInternalActivationAttributes)(e1.attributes);\n            const u1 = (e1, t1)=>({\n                    name: \"MatMul\",\n                    inputNames: e1 ? [\n                        \"A\",\n                        \"B\",\n                        \"Bias\"\n                    ] : [\n                        \"A\",\n                        \"B\"\n                    ],\n                    inputTypes: e1 ? [\n                        o1.TextureType.unpacked,\n                        o1.TextureType.unpacked,\n                        o1.TextureType.unpacked\n                    ] : [\n                        o1.TextureType.unpacked,\n                        o1.TextureType.unpacked\n                    ],\n                    cacheHint: t1\n                });\n            function l1(e1, t1) {\n                const n1 = u1(e1.length > 2, t1.activationCacheKey);\n                return Object.assign(Object.assign({}, n1), {\n                    get: ()=>(function(e1, t1, n1) {\n                            const a1 = t1[0].dims, u1 = t1[1].dims, l1 = r1.BroadcastUtil.calcShape(a1, u1, !0);\n                            if (!l1) throw new Error(\"Can't use matmul on the given tensors\");\n                            const c1 = (0, i1.getCoordsDataType)(l1.length), d1 = (0, i1.getGlChannels)(), { activationFunction: f1, applyActivation: h1 } = (0, s1.getActivationSnippet)(n1), g1 = t1.length > 2, b1 = g1 ? \"value += getBiasForMatmul();\" : \"\", m1 = g1 ? `${p1(c1, d1, t1[2].dims, l1, !1)}` : \"\", y1 = l1.length, _1 = a1.length, v1 = u1.length, T1 = `\\n    ${f1}\\n    ${m1}\\n    float process(int indices[${y1}]) {\\n        int a[${_1}];\\n        int b[${v1}];\\n        bcastMatmulIndices_A(indices, a);\\n        bcastMatmulIndices_B(indices, b);\\n\\n        float value;\\n        for (int k=0; k<${a1[a1.length - 1]}; ++k) {\\n            a[${_1 - 1}] = k;\\n            b[${v1 - 2}] = k;\\n            value += _A(a) * _B(b);\\n        }\\n        ${b1}\\n        ${h1}\\n        return value;\\n    }`;\n                            return Object.assign(Object.assign({}, e1), {\n                                output: {\n                                    dims: l1,\n                                    type: t1[0].type,\n                                    textureType: o1.TextureType.unpacked\n                                },\n                                shaderSource: T1\n                            });\n                        })(n1, e1, t1)\n                });\n            }\n            t1.createMatmulProgramInfoLoader = l1;\n            const c1 = (e1)=>{\n                if (!e1 || 2 !== e1.length) throw new Error(\"MatMul requires 2 inputs.\");\n                if (e1[0].dims[e1[0].dims.length - 1] !== e1[1].dims[e1[1].dims.length - 2]) throw new Error(\"shared dimension does not match.\");\n                if (\"float32\" !== e1[0].type && \"float64\" !== e1[0].type || \"float32\" !== e1[1].type && \"float64\" !== e1[1].type) throw new Error(\"inputs should be float type\");\n                if (e1[0].type !== e1[1].type) throw new Error(\"inputs types should match\");\n            };\n            function p1(e1, t1, n1, o1, i1) {\n                let s1 = \"\";\n                const a1 = n1.length, u1 = o1.length, l1 = u1 - a1;\n                s1 = u1 < 2 && a1 > 0 ? \"coords\" : n1.map((e1, n1)=>`coords.${t1[n1 + l1]}`).join(\", \");\n                const c1 = r1.BroadcastUtil.getBroadcastDims(n1, o1).map((e1)=>`coords.${t1[e1 + l1]} = 0;`).join(\"\\n\");\n                let p1 = \"vec4(outputValue.xx, outputValue.yy)\";\n                return 1 === r1.ShapeUtil.size(n1) && (p1 = \"vec4(outputValue.x)\"), i1 ? `\\nvec4 getBiasForMatmul() {\\n  ${e1} coords = getOutputCoords();\\n  ${c1}\\n  vec4 outputValue = getBias(${s1});\\n  return ${p1};\\n}` : `\\nfloat getBiasForMatmul() {\\n  ${e1} coords = getOutputCoords();\\n  ${c1}\\n  return getBias(coords.x);\\n}`;\n            }\n            t1.getBiasForMatmul = p1;\n        },\n        9: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createPackProgramInfoLoader = void 0;\n            const r1 = n1(6757), o1 = n1(5639), i1 = n1(432), s1 = n1(5614), a1 = {\n                name: \"pack\",\n                inputNames: [\n                    \"A\"\n                ],\n                inputTypes: [\n                    o1.TextureType.unpackedReversed\n                ]\n            };\n            t1.createPackProgramInfoLoader = (e1, t1)=>Object.assign(Object.assign({}, a1), {\n                    get: ()=>((e1, t1)=>{\n                            const n1 = (0, r1.getGlsl)(e1.session.backend.glContext.version), u1 = t1.dims, l1 = u1.length, c1 = t1.dims.length, p1 = (0, i1.getCoordsDataType)(c1), d1 = (0, s1.getChannels)(\"rc\", c1), f1 = (h1 = c1, g1 = d1, b1 = u1[u1.length - 2], m1 = u1[u1.length - 1], 0 === h1 || 1 === h1 ? \"\" : `\\n    int r = ${g1[h1 - 2]};\\n    int c = ${g1[h1 - 1]};\\n    int rp1 = ${g1[h1 - 2]} + 1;\\n    int cp1 = ${g1[h1 - 1]} + 1;\\n    bool rEdge = rp1 >= ${m1};\\n    bool cEdge = cp1 >= ${b1};\\n    `);\n                            var h1, g1, b1, m1;\n                            let y1;\n                            y1 = 0 === l1 ? [\n                                1,\n                                1\n                            ] : 1 === l1 ? [\n                                u1[0],\n                                1\n                            ] : [\n                                u1[c1 - 1],\n                                u1[c1 - 2]\n                            ];\n                            const _1 = function(e1, t1, n1) {\n                                if (0 === e1) return \"false\";\n                                if (1 === e1) return `rc > ${t1[0]}`;\n                                let r1 = \"\";\n                                for(let o1 = e1 - 2; o1 < e1; o1++)r1 += `${n1[o1]} >= ${t1[o1 - e1 + 2]}`, o1 < e1 - 1 && (r1 += \"||\");\n                                return r1;\n                            }(c1, y1, d1), v1 = function(e1, t1) {\n                                const n1 = e1.length;\n                                if (0 === n1) return \"getA(), 0, 0, 0\";\n                                if (1 === n1) return `getA(rc),\\n            rc + 1 >= ${e1[0]} ? 0. : getA(rc + 1),\\n            0, 0`;\n                                let r1 = \"\";\n                                if (n1 > 2) for(let e1 = 0; e1 < n1 - 2; ++e1)r1 += `${t1[e1]},`;\n                                return `getA(${r1}r, c),\\n          rEdge ? 0. : getA(${r1}rp1, c),\\n          cEdge ? 0. : getA(${r1}r, cp1),\\n          rEdge || cEdge ? 0. : getA(${r1}rp1, cp1)`;\n                            }(u1, d1), T1 = `\\n        void main() {\\n          ${p1} rc = getOutputCoords();\\n\\n          if(${_1}) {\\n            ${n1.output} = vec4(0);\\n          } else {\\n            ${f1}\\n\\n            ${n1.output} = vec4(${v1});\\n          }\\n        }\\n      `;\n                            return Object.assign(Object.assign({}, a1), {\n                                hasMain: !0,\n                                output: {\n                                    dims: t1.dims,\n                                    type: t1.type,\n                                    textureType: o1.TextureType.packed\n                                },\n                                shaderSource: T1\n                            });\n                        })(e1, t1)\n                });\n        },\n        5614: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.unpackFromChannel = t1.getChannels = t1.getVecChannels = void 0;\n            const r1 = n1(432);\n            function o1(e1, t1) {\n                return (0, r1.getGlChannels)(t1).map((t1)=>`${e1}.${t1}`);\n            }\n            t1.getVecChannels = o1, t1.getChannels = function(e1, t1) {\n                return 1 === t1 ? [\n                    e1\n                ] : o1(e1, t1);\n            }, t1.unpackFromChannel = function() {\n                return \"\\n    float getChannel(vec4 frag, int dim) {\\n      int modCoord = imod(dim, 2);\\n      return modCoord == 0 ? frag.r : frag.g;\\n    }\\n\\n    float getChannel(vec4 frag, vec2 innerDims) {\\n      vec2 modCoord = mod(innerDims, 2.);\\n      return modCoord.x == 0. ?\\n        (modCoord.y == 0. ? frag.r : frag.g) :\\n        (modCoord.y == 0. ? frag.b : frag.a);\\n    }\\n  \";\n            };\n        },\n        5565: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parsePadAttributesV11 = t1.padV11 = t1.parsePadAttributesV2 = t1.padV2 = void 0;\n            const r1 = n1(4910), o1 = n1(7273), i1 = n1(6757), s1 = n1(5639), a1 = {\n                name: \"Pad\",\n                inputNames: [\n                    \"A\"\n                ],\n                inputTypes: [\n                    s1.TextureType.unpacked\n                ]\n            };\n            t1.padV2 = (e1, t1, n1)=>(c1(t1), [\n                    e1.run(Object.assign(Object.assign({}, a1), {\n                        cacheHint: n1.cacheKey,\n                        get: ()=>l1(e1, t1[0], n1)\n                    }), t1)\n                ]), t1.parsePadAttributesV2 = (e1)=>{\n                const t1 = e1.attributes.getString(\"mode\", \"constant\"), n1 = e1.attributes.getFloat(\"value\", 0), o1 = e1.attributes.getInts(\"pads\");\n                return (0, r1.createAttributeWithCacheKey)({\n                    mode: t1,\n                    value: n1,\n                    pads: o1\n                });\n            }, t1.padV11 = (e1, n1, r1)=>{\n                p1(n1);\n                const o1 = u1(e1, n1, r1);\n                return (0, t1.padV2)(e1, [\n                    n1[0]\n                ], o1);\n            }, t1.parsePadAttributesV11 = (e1)=>e1.attributes.getString(\"mode\", \"constant\");\n            const u1 = (e1, t1, n1)=>{\n                if (!e1.session.isInitializer(t1[1].dataId) || t1.length >= 3 && !e1.session.isInitializer(t1[2].dataId)) throw new Error(\"dynamic pad attributes are not allowed\");\n                const o1 = Array.from(t1[1].integerData), i1 = t1.length >= 3 ? t1[2].floatData[0] : 0;\n                return (0, r1.createAttributeWithCacheKey)({\n                    mode: n1,\n                    pads: o1,\n                    value: i1\n                });\n            }, l1 = (e1, t1, n1)=>{\n                const r1 = o1.ShapeUtil.padShape(t1.dims.slice(), n1.pads), i1 = r1.length, a1 = `\\n      ${d1(e1, t1, n1)}\\n      float process(int[${i1}] indices) {\\n          return padA(indices);\\n      }`;\n                return {\n                    name: \"Pad\",\n                    inputNames: [\n                        \"A\"\n                    ],\n                    inputTypes: [\n                        s1.TextureType.unpacked\n                    ],\n                    output: {\n                        dims: r1,\n                        type: t1.type,\n                        textureType: s1.TextureType.unpacked\n                    },\n                    shaderSource: a1\n                };\n            }, c1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Pad requires 1 input\");\n                if (\"float32\" !== e1[0].type && \"float64\" !== e1[0].type) throw new Error(\"Invalid input type.\");\n            }, p1 = (e1)=>{\n                if (!e1 || 2 !== e1.length && 3 !== e1.length) throw new Error(\"Pad requires 2 or 3 inputs\");\n                if (\"int32\" !== e1[1].type) throw new Error(\"Invalid input type.\");\n                if (e1.length >= 3 && \"string\" === e1[2].type) throw new Error(\"Invalid input type.\");\n            }, d1 = (e1, t1, n1)=>{\n                const r1 = (0, i1.getGlsl)(e1.session.backend.glContext.version), [a1, u1] = e1.calculateTextureWidthAndHeight(t1.dims, s1.TextureType.unpacked), l1 = o1.ShapeUtil.computeStrides(t1.dims);\n                switch(n1.mode){\n                    case \"constant\":\n                        return f1(r1, t1.dims, l1, a1, u1, n1.pads, n1.value);\n                    case \"reflect\":\n                        return h1(r1, t1.dims, l1, a1, u1, n1.pads);\n                    case \"edge\":\n                        return g1(r1, t1.dims, l1, a1, u1, n1.pads);\n                    default:\n                        throw new Error(\"Invalid mode\");\n                }\n            }, f1 = (e1, t1, n1, r1, o1, i1, s1)=>{\n                const a1 = t1.length;\n                let u1 = \"\";\n                for(let e1 = a1 - 1; e1 >= 0; --e1)u1 += `\\n        k = m[${e1}] - ${i1[e1]};\\n        if (k < 0)  return constant;\\n        if (k >= ${t1[e1]}) return constant;\\n        offset += k * ${n1[e1]};\\n        `;\n                return `\\n      float padA(int m[${a1}]) {\\n        const float constant = float(${s1});\\n        int offset = 0;\\n        int k = 0;\\n        ${u1}\\n        vec2 coords = offsetToCoords(offset, ${r1}, ${o1});\\n        float value = getColorAsFloat(${e1.texture2D}(A, coords));\\n        return value;\\n      }\\n      `;\n            }, h1 = (e1, t1, n1, r1, o1, i1)=>{\n                const s1 = t1.length;\n                let a1 = \"\";\n                for(let e1 = s1 - 1; e1 >= 0; --e1)a1 += `\\n        k = m[${e1}] - ${i1[e1]};\\n        if (k < 0) { k = -k; }\\n        {\\n          const int _2n_1 = ${2 * (t1[e1] - 1)};\\n          k = int( mod( float(k), float(_2n_1) ) ) ;\\n          if(k >= ${t1[e1]}) { k = _2n_1 - k; }\\n        }\\n        offset += k * ${n1[e1]};\\n        `;\n                return `\\n      float padA(int m[${s1}]) {\\n        int offset = 0;\\n        int k = 0;\\n        ${a1}\\n        vec2 coords = offsetToCoords(offset, ${r1}, ${o1});\\n        float value = getColorAsFloat(${e1.texture2D}(A, coords));\\n        return value;\\n      }\\n      `;\n            }, g1 = (e1, t1, n1, r1, o1, i1)=>{\n                const s1 = t1.length;\n                let a1 = \"\";\n                for(let e1 = s1 - 1; e1 >= 0; --e1)a1 += `\\n        k = m[${e1}] - ${i1[e1]};\\n        if (k < 0)  k = 0;\\n        if (k >= ${t1[e1]}) k = ${t1[e1] - 1};\\n        offset += k * ${n1[e1]};\\n      `;\n                return `\\n      float padA(int m[${s1}]) {\\n        int offset = 0;\\n        int k = 0;\\n        ${a1}\\n        vec2 coords = offsetToCoords(offset, ${r1}, ${o1});\\n        float value = getColorAsFloat(${e1.texture2D}(A, coords));\\n        return value;\\n      }\\n      `;\n            };\n        },\n        2834: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.globalMaxPool = t1.parseMaxPoolAttributes = t1.maxPool = t1.parseGlobalAveragePoolAttributes = t1.globalAveragePool = t1.parseAveragePoolAttributes = t1.averagePool = void 0;\n            const r1 = n1(4910), o1 = n1(7273), i1 = n1(5639);\n            t1.averagePool = (e1, t1, n1)=>{\n                p1(t1);\n                const r1 = {\n                    name: \"AveragePool\",\n                    inputNames: [\n                        \"X\"\n                    ],\n                    inputTypes: [\n                        i1.TextureType.unpacked\n                    ],\n                    cacheHint: n1.cacheKey\n                };\n                return [\n                    e1.run(Object.assign(Object.assign({}, r1), {\n                        get: ()=>s1(t1, r1, !1, n1)\n                    }), t1)\n                ];\n            }, t1.parseAveragePoolAttributes = (e1)=>{\n                const t1 = e1.attributes.getString(\"auto_pad\", \"NOTSET\"), n1 = e1.attributes.getInt(\"ceil_mode\", 0), o1 = 0 !== e1.attributes.getInt(\"count_include_pad\", 0), i1 = e1.attributes.getInts(\"kernel_shape\"), s1 = e1.attributes.getInts(\"strides\", []), a1 = e1.attributes.getInts(\"pads\", []);\n                if (0 !== n1) throw new Error(\"using ceil() in shape computation is not yet supported for AveragePool\");\n                return (0, r1.createAttributeWithCacheKey)({\n                    autoPad: t1,\n                    ceilMode: n1,\n                    countIncludePad: o1,\n                    kernelShape: i1,\n                    strides: s1,\n                    pads: a1\n                });\n            };\n            const s1 = (e1, t1, n1, r1)=>{\n                const [s1, a1] = u1(e1, r1, n1), l1 = o1.ShapeUtil.size(s1.kernelShape);\n                let c1 = \"\";\n                s1.countIncludePad ? c1 += `value /= float(${l1});` : c1 += `value /= float(${l1} - pad);`;\n                const p1 = `\\n        ${d1(e1[0].dims, s1, \"value += _X(x);\", c1, \"0.0\")}\\n      `;\n                return Object.assign(Object.assign({}, t1), {\n                    output: {\n                        dims: a1,\n                        type: e1[0].type,\n                        textureType: i1.TextureType.unpacked\n                    },\n                    shaderSource: p1\n                });\n            };\n            t1.globalAveragePool = (e1, t1, n1)=>{\n                p1(t1);\n                const r1 = {\n                    name: \"GlobalAveragePool\",\n                    inputNames: [\n                        \"X\"\n                    ],\n                    inputTypes: [\n                        i1.TextureType.unpacked\n                    ],\n                    cacheHint: `${n1.countIncludePad}`\n                };\n                return [\n                    e1.run(Object.assign(Object.assign({}, r1), {\n                        get: ()=>s1(t1, r1, !0, n1)\n                    }), t1)\n                ];\n            }, t1.parseGlobalAveragePoolAttributes = (e1)=>{\n                const t1 = 0 !== e1.attributes.getInt(\"count_include_pad\", 0);\n                return (0, r1.createAttributeWithCacheKey)({\n                    autoPad: \"\",\n                    ceilMode: 0,\n                    countIncludePad: t1,\n                    kernelShape: [],\n                    strides: [],\n                    pads: []\n                });\n            }, t1.maxPool = (e1, t1, n1)=>{\n                p1(t1);\n                const r1 = {\n                    name: \"MaxPool\",\n                    inputNames: [\n                        \"X\"\n                    ],\n                    inputTypes: [\n                        i1.TextureType.unpacked\n                    ],\n                    cacheHint: n1.cacheKey\n                };\n                return [\n                    e1.run(Object.assign(Object.assign({}, r1), {\n                        get: ()=>a1(t1, r1, !1, n1)\n                    }), t1)\n                ];\n            }, t1.parseMaxPoolAttributes = (e1)=>{\n                const t1 = e1.attributes.getString(\"auto_pad\", \"NOTSET\"), n1 = e1.attributes.getInt(\"ceil_mode\", 0), o1 = e1.attributes.getInts(\"kernel_shape\"), i1 = e1.attributes.getInts(\"strides\", []), s1 = e1.attributes.getInts(\"pads\", []), a1 = e1.attributes.getInt(\"storage_order\", 0), u1 = e1.attributes.getInts(\"dilations\", []);\n                if (0 !== a1) throw new Error(\"column major storage order is not yet supported for MaxPool\");\n                if (0 !== n1) throw new Error(\"using ceil() in shape computation is not yet supported for MaxPool\");\n                return (0, r1.createAttributeWithCacheKey)({\n                    autoPad: t1,\n                    ceilMode: n1,\n                    countIncludePad: !1,\n                    kernelShape: o1,\n                    strides: i1,\n                    pads: s1,\n                    storageOrder: a1,\n                    dilations: u1\n                });\n            };\n            const a1 = (e1, t1, n1, r1)=>{\n                const [o1, s1] = u1(e1, r1, n1), a1 = `\\n      ${d1(e1[0].dims, o1, \"\\n      value = max(_X(x), value);\\n    \", \"\", \"-1e5\")}\\n    `;\n                return Object.assign(Object.assign({}, t1), {\n                    output: {\n                        dims: s1,\n                        type: e1[0].type,\n                        textureType: i1.TextureType.unpacked\n                    },\n                    shaderSource: a1\n                });\n            }, u1 = (e1, t1, n1)=>{\n                const r1 = e1[0].dims.slice(), i1 = Object.hasOwnProperty.call(t1, \"dilations\"), s1 = t1.kernelShape.slice(), a1 = t1.strides.slice(), u1 = i1 ? t1.dilations.slice() : [], l1 = t1.pads.slice();\n                o1.PoolConvUtil.adjustPoolAttributes(n1, r1, s1, a1, u1, l1);\n                const c1 = o1.PoolConvUtil.computePoolOutputShape(n1, r1, a1, u1, s1, l1, t1.autoPad), p1 = Object.assign({}, t1);\n                return i1 ? Object.assign(p1, {\n                    kernelShape: s1,\n                    strides: a1,\n                    pads: l1,\n                    dilations: u1,\n                    cacheKey: t1.cacheKey\n                }) : Object.assign(p1, {\n                    kernelShape: s1,\n                    strides: a1,\n                    pads: l1,\n                    cacheKey: t1.cacheKey\n                }), [\n                    p1,\n                    c1\n                ];\n            }, l1 = {\n                autoPad: \"\",\n                ceilMode: 0,\n                countIncludePad: !1,\n                kernelShape: [],\n                strides: [],\n                pads: [],\n                storageOrder: 0,\n                dilations: [],\n                cacheKey: \"\"\n            }, c1 = {\n                name: \"GlobalMaxPool\",\n                inputNames: [\n                    \"X\"\n                ],\n                inputTypes: [\n                    i1.TextureType.unpacked\n                ]\n            };\n            t1.globalMaxPool = (e1, t1)=>(p1(t1), [\n                    e1.run(Object.assign(Object.assign({}, c1), {\n                        get: ()=>a1(t1, c1, !0, l1)\n                    }), t1)\n                ]);\n            const p1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Pool ops requires 1 input.\");\n                if (\"float32\" !== e1[0].type && \"float64\" !== e1[0].type) throw new Error(\"Invalid input type.\");\n            }, d1 = (e1, t1, n1, r1, i1)=>{\n                const s1 = e1.length;\n                if (t1.kernelShape.length <= 2) {\n                    const o1 = t1.kernelShape[t1.kernelShape.length - 1], a1 = t1.strides[t1.strides.length - 1], u1 = t1.pads[t1.pads.length / 2 - 1], l1 = t1.pads[t1.pads.length - 1], c1 = e1[s1 - 1];\n                    let p1 = \"\", d1 = \"\", f1 = \"\";\n                    if (p1 = u1 + l1 !== 0 ? `\\n          for (int i = 0; i < ${o1}; i++) {\\n            x[${s1} - 1] = indices[${s1} - 1] * ${a1} - ${u1} + i;\\n            if (x[${s1} - 1] < 0 || x[${s1} - 1] >= ${c1}) {\\n              pad++;\\n              continue;\\n            }\\n            ${n1}\\n          }` : `\\n          for (int i = 0; i < ${o1}; i++) {\\n            x[${s1} - 1] = indices[${s1} - 1] * ${a1} - ${u1} + i;\\n            ${n1}\\n          }`, 2 === t1.kernelShape.length) {\n                        const n1 = t1.kernelShape[t1.kernelShape.length - 2], r1 = t1.strides[t1.strides.length - 2], i1 = t1.pads[t1.pads.length / 2 - 2], a1 = t1.pads[t1.pads.length - 2], u1 = e1[s1 - 2];\n                        d1 = i1 + a1 !== 0 ? `\\n            for (int j = 0; j < ${n1}; j++) {\\n              x[${s1} - 2] = indices[${s1} - 2] * ${r1} - ${i1} + j;\\n              if (x[${s1} - 2] < 0 || x[${s1} - 2] >= ${u1}) {\\n                pad+= ${o1};\\n                continue;\\n              }\\n          ` : `\\n            for (int j = 0; j < ${n1}; j++) {\\n              x[${s1} - 2] = indices[${s1} - 2] * ${r1} - ${i1} + j;\\n            `, f1 = \"\\n          }\\n        \";\n                    }\n                    return `\\n        float process(int indices[${s1}]) {\\n          int x[${s1}];\\n          copyVec(indices, x);\\n\\n          float value = ${i1};\\n          int pad = 0;\\n          ${d1}\\n          ${p1}\\n          ${f1}\\n          ${r1}\\n          return value;\\n        }\\n      `;\n                }\n                {\n                    const a1 = o1.ShapeUtil.size(t1.kernelShape), u1 = o1.ShapeUtil.computeStrides(t1.kernelShape), l1 = u1.length, c1 = t1.pads.length, p1 = h1(l1), d1 = f1(e1, \"inputDims\"), g1 = f1(t1.pads, \"pads\"), b1 = f1(u1, \"kernelStrides\"), m1 = f1(t1.strides, \"strides\");\n                    let y1 = \"\";\n                    return y1 = t1.pads.reduce((e1, t1)=>e1 + t1) ? `\\n            if (x[j] >= inputDims[j] || x[j] < 0) {\\n              pad++;\\n              isPad = true;\\n              break;\\n            }\\n          }\\n          if (!isPad) {\\n            ${n1}\\n          }` : `\\n          }\\n          ${n1}\\n        `, `\\n        ${p1}\\n        float process(int indices[${s1}]) {\\n          int x[${s1}];\\n          copyVec(indices, x);\\n          int offset[${l1}];\\n          int pads[${c1}];\\n          int inputDims[${s1}];\\n          int kernelStrides[${l1}];\\n          int strides[${l1}];\\n          ${g1}\\n          ${d1}\\n          ${m1}\\n          ${b1}\\n\\n          float value = ${i1};\\n          int pad = 0;\\n          bool isPad = false;\\n          for (int i = 0; i < ${a1}; i++) {\\n            offsetToIndices(i, kernelStrides, offset);\\n            isPad = false;\\n            for (int j = ${s1} - ${l1}; j < ${s1}; j++) {\\n              x[j] = indices[j] * strides[j - ${s1} + ${l1}]\\n                + offset[j - ${s1} + ${l1}] - pads[j - 2];\\n              ${y1}\\n          }\\n          ${r1}\\n\\n          return value;\\n        }\\n      `;\n                }\n            }, f1 = (e1, t1)=>{\n                let n1 = \"\";\n                for(let r1 = 0; r1 < e1.length; r1++)n1 += `\\n      ${t1}[${r1}] = ${e1[r1]};\\n    `;\n                return n1;\n            }, h1 = (e1)=>`\\n  void offsetToIndices(int offset, int[${e1}] strides, out int[${e1}] indices) {\\n    if (${e1} == 0) {\\n      return;\\n    }\\n    for (int i = 0; i < ${e1} - 1; ++i) {\\n      indices[i] = offset / strides[i];\\n      offset -= indices[i] * strides[i];\\n    }\\n    indices[${e1} - 1] = offset;\\n  }`;\n        },\n        1010: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.reduceLogSumSquare = t1.reduceLogSum = t1.reduceProd = t1.reduceMin = t1.reduceMax = t1.reduceMean = t1.reduceSum = t1.parseReduceAttributes = void 0;\n            const r1 = n1(4910), o1 = n1(6145), i1 = n1(7273), s1 = n1(5639), a1 = (e1, t1, n1, r1, o1)=>{\n                l1(t1);\n                const i1 = {\n                    name: r1,\n                    inputNames: [\n                        \"A\"\n                    ],\n                    inputTypes: [\n                        s1.TextureType.unpacked\n                    ]\n                };\n                return [\n                    e1.run(Object.assign(Object.assign({}, i1), {\n                        cacheHint: n1.cacheKey,\n                        get: ()=>u1(e1, t1, n1, r1, o1, i1)\n                    }), t1)\n                ];\n            };\n            t1.parseReduceAttributes = (e1)=>{\n                const t1 = e1.attributes.getInts(\"axes\", []), n1 = 1 === e1.attributes.getInt(\"keepdims\", 1);\n                return (0, r1.createAttributeWithCacheKey)({\n                    axes: t1,\n                    keepDims: n1\n                });\n            };\n            const u1 = (e1, t1, n1, r1, o1, a1)=>{\n                const u1 = [], l1 = t1[0].dims.length || 1, c1 = [], p1 = i1.ShapeUtil.normalizeAxes(n1.axes, t1[0].dims.length), d1 = o1(t1, p1);\n                let f1 = d1[1];\n                for(let e1 = 0; e1 < t1[0].dims.length; e1++)p1.indexOf(e1) >= 0 || 0 === p1.length ? (n1.keepDims && u1.push(1), f1 = `\\n          for(int j${e1} = 0; j${e1} < ${t1[0].dims[e1]}; j${e1}++) {\\n            inputIdx[${e1}] = j${e1};\\n            ${f1}\\n          }`) : (c1.push(`inputIdx[${e1}] = outputIdx[${u1.length}];`), u1.push(t1[0].dims[e1]));\n                const h1 = `\\n      float process(int outputIdx[${u1.length || 1}]) {\\n        float value;                 // final result\\n        int inputIdx[${l1}];      // addressing input data\\n        ${c1.join(\"\\n\")}\\n        ${d1[0]}       // init ops for reduce max/min\\n        ${f1}\\n        ${d1[2]}       // final computation for reduce mean\\n        return value;\\n      }`;\n                return Object.assign(Object.assign({}, a1), {\n                    output: {\n                        dims: u1,\n                        type: t1[0].type,\n                        textureType: s1.TextureType.unpacked\n                    },\n                    shaderSource: h1\n                });\n            }, l1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Reduce op requires 1 input.\");\n                if (-1 === o1.NUMBER_TYPES.indexOf(e1[0].type)) throw new Error(\"Invalid input type.\");\n            };\n            t1.reduceSum = (e1, t1, n1)=>a1(e1, t1, n1, \"ReduceSum\", ()=>[\n                        \"value = 0.0;\",\n                        \"value += _A(inputIdx);\",\n                        \"\"\n                    ]), t1.reduceMean = (e1, t1, n1)=>a1(e1, t1, n1, \"ReduceMean\", (e1, t1)=>{\n                    let n1 = 1;\n                    for(let r1 = 0; r1 < e1[0].dims.length; r1++)(t1.indexOf(r1) >= 0 || 0 === t1.length) && (n1 *= e1[0].dims[r1]);\n                    return [\n                        \"value = 0.0;\",\n                        \"value += _A(inputIdx);\",\n                        `value /= ${n1}.;`\n                    ];\n                }), t1.reduceMax = (e1, t1, n1)=>a1(e1, t1, n1, \"ReduceMax\", (e1, t1)=>{\n                    const n1 = [];\n                    for(let r1 = 0; r1 < e1[0].dims.length; r1++)(t1.indexOf(r1) >= 0 || 0 === t1.length) && n1.push(`inputIdx[${r1}] = 0;`);\n                    return [\n                        `${n1.join(\"\\n\")}\\nvalue = _A(inputIdx);`,\n                        \"value = max(value, _A(inputIdx));\",\n                        \"\"\n                    ];\n                }), t1.reduceMin = (e1, t1, n1)=>a1(e1, t1, n1, \"ReduceMin\", (e1, t1)=>{\n                    const n1 = [];\n                    for(let r1 = 0; r1 < e1[0].dims.length; r1++)(t1.indexOf(r1) >= 0 || 0 === t1.length) && n1.push(`inputIdx[${r1}] = 0;`);\n                    return [\n                        `${n1.join(\"\\n\")}\\nvalue = _A(inputIdx);`,\n                        \"value = min(value, _A(inputIdx));\",\n                        \"\"\n                    ];\n                }), t1.reduceProd = (e1, t1, n1)=>a1(e1, t1, n1, \"ReduceProd\", ()=>[\n                        \"value = 1.0;\",\n                        \"value *= _A(inputIdx);\",\n                        \"\"\n                    ]), t1.reduceLogSum = (e1, t1, n1)=>a1(e1, t1, n1, \"ReduceLogSum\", ()=>[\n                        \"value = 0.0;\",\n                        \"value += _A(inputIdx);\",\n                        \"value = log(value);\"\n                    ]), t1.reduceLogSumSquare = (e1, t1, n1)=>a1(e1, t1, n1, \"ReduceLogSumSquare\", ()=>[\n                        \"float t; value = 0.0;\",\n                        \"t = _A(inputIdx); value += t * t;\",\n                        \"\"\n                    ]);\n        },\n        7379: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.isReshapeCheap = t1.processDims3D = t1.createPackedReshape3DProgramInfoLoader = void 0;\n            const r1 = n1(7273), o1 = n1(6757), i1 = n1(5639), s1 = n1(5614);\n            t1.createPackedReshape3DProgramInfoLoader = (e1, t1, n1)=>{\n                const a1 = ((e1)=>({\n                        name: \"Reshape (packed)\",\n                        inputTypes: [\n                            i1.TextureType.packed\n                        ],\n                        inputNames: [\n                            \"A\"\n                        ],\n                        cacheHint: `${e1}`\n                    }))(n1);\n                return Object.assign(Object.assign({}, a1), {\n                    get: ()=>((e1, t1, n1, a1)=>{\n                            const u1 = t1.dims, l1 = a1;\n                            let c1 = \"\";\n                            for(let e1 = 0; e1 < 4; e1++){\n                                let t1 = \"\";\n                                switch(e1){\n                                    case 0:\n                                        t1 = \"outputCoords = rc;\";\n                                        break;\n                                    case 1:\n                                        t1 = \"outputCoords = ivec3(rc.x, rc.y+1, rc.z);\";\n                                        break;\n                                    case 2:\n                                        t1 = \"outputCoords = ivec3(rc.x, rc.y, rc.z+1);\";\n                                        break;\n                                    case 3:\n                                        t1 = \"outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);\";\n                                        break;\n                                    default:\n                                        throw new Error;\n                                }\n                                c1 += `\\n        ${t1}\\n        ${e1 > 0 ? \"if(outputCoords.y < rows && outputCoords.z < cols){\" : \"\"}\\n          int flattenedIndex = getFlattenedIndex(outputCoords);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[${e1}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\\n\\n        ${e1 > 0 ? \"}\" : \"\"}\\n      `;\n                            }\n                            const p1 = (0, o1.getGlsl)(e1.session.backend.glContext.version), d1 = `\\n      ${function(e1) {\n                                const t1 = r1.ShapeUtil.computeStrides(e1), n1 = [\n                                    \"b\",\n                                    \"r\",\n                                    \"c\"\n                                ], o1 = \"index\", i1 = t1.map((e1, r1)=>`int ${n1[r1]} = ${o1} / ${e1}; ${r1 === t1.length - 1 ? `int ${n1[r1 + 1]} = ${o1} - ${n1[r1]} * ${e1}` : `index -= ${n1[r1]} * ${e1}`};`).join(\"\");\n                                return `\\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      ${i1}\\n      return ivec3(b, r, c);\\n    }\\n  `;\n                            }(u1)}\\n      ${function(e1) {\n                                const t1 = r1.ShapeUtil.computeStrides(e1);\n                                return `\\n  int getFlattenedIndex(ivec3 coords) {\\n    // reverse y, z order\\n    return coords.x * ${t1[0]} + coords.z * ${t1[1]} + coords.y;\\n  }\\n`;\n                            }(l1)}\\n      ${(0, s1.unpackFromChannel)()}\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.0);\\n\\n        ivec3 outputCoords;\\n        int rows = ${l1[2]};\\n        int cols = ${l1[1]};\\n\\n        ${c1}\\n        ${p1.output} = result;\\n      }\\n    `;\n                            return Object.assign(Object.assign({}, n1), {\n                                output: {\n                                    dims: l1,\n                                    type: t1.type,\n                                    textureType: i1.TextureType.packed\n                                },\n                                shaderSource: d1,\n                                hasMain: !0\n                            });\n                        })(e1, t1, a1, n1)\n                });\n            }, t1.processDims3D = function(e1) {\n                if (0 === e1.length) return [\n                    1,\n                    1,\n                    1\n                ];\n                let t1 = 1;\n                for(let n1 = 0; n1 < e1.length - 2; ++n1)t1 *= e1[n1];\n                return [\n                    t1,\n                    e1.length > 1 ? e1[e1.length - 2] : 1,\n                    e1[e1.length - 1]\n                ];\n            }, t1.isReshapeCheap = function(e1, t1) {\n                let n1 = !1;\n                return n1 = 0 === e1.length || 0 === t1.length || (e1.length < 2 || t1.length < 2 ? e1[e1.length - 1] === t1[t1.length - 1] : e1[e1.length - 1] === t1[t1.length - 1] && e1[e1.length - 2] === t1[t1.length - 2]), n1;\n            };\n        },\n        8126: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.reshape = void 0;\n            const r1 = n1(7273);\n            t1.reshape = (e1, t1)=>{\n                const n1 = r1.ShapeUtil.calculateReshapedDims(t1[0].dims, t1[1].integerData);\n                return e1.session.pack ? [\n                    e1.reshapePacked(t1[0], n1)\n                ] : [\n                    e1.reshapeUnpacked(t1[0], n1)\n                ];\n            };\n        },\n        2801: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseResizeAttributesV11 = t1.parseResizeAttributesV10 = t1.resize = void 0;\n            const r1 = n1(6757), o1 = n1(5639), i1 = n1(432), s1 = n1(5614), a1 = n1(3980), u1 = {\n                name: \"Resize\",\n                inputNames: [\n                    \"A\"\n                ],\n                inputTypes: [\n                    o1.TextureType.packed\n                ]\n            };\n            t1.resize = (e1, t1, n1)=>((0, a1.validateInputs)(t1, n1), [\n                    e1.run(Object.assign(Object.assign({}, u1), {\n                        cacheHint: n1.cacheKey,\n                        get: ()=>l1(e1, t1, n1)\n                    }), t1)\n                ]), t1.parseResizeAttributesV10 = (e1)=>(0, a1.parseUpsampleAttributes)(e1, 10), t1.parseResizeAttributesV11 = (e1)=>(0, a1.parseUpsampleAttributes)(e1, 11);\n            const l1 = (e1, t1, n1)=>{\n                const a1 = (0, r1.getGlsl)(e1.session.backend.glContext.version), [l1, p1] = c1(t1, n1);\n                if (l1.every((e1)=>1 === e1) && \"tf_crop_and_resize\" !== n1.coordinateTransformMode) return Object.assign(Object.assign({}, u1), {\n                    output: {\n                        dims: p1,\n                        type: t1[0].type,\n                        textureType: o1.TextureType.packed\n                    },\n                    hasMain: !0,\n                    shaderSource: `void main() {\\n                    vec4 v = ${a1.texture2D}(X, TexCoords);\\n                    ${a1.output} = v;\\n                }`\n                });\n                const d1 = p1.length;\n                if (d1 < 2) throw new Error(`output dimension should be at least 2, but got ${d1}`);\n                const f1 = p1[d1 - 2], h1 = p1[d1 - 1], g1 = t1[0].dims;\n                if (d1 !== g1.length) throw new Error(`output dimension should match input ${g1.length}, but got ${d1}`);\n                const b1 = g1[d1 - 2], m1 = g1[d1 - 1], y1 = l1[d1 - 2], _1 = l1[d1 - 1];\n                let v1 = \"\";\n                if (\"linear\" !== n1.mode) throw new Error(`resize (packed) does not support mode: '${n1.mode}'`);\n                switch(n1.coordinateTransformMode){\n                    case \"asymmetric\":\n                        v1 = \"\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        return vec4(coords) / scaleWHWH;\\n                    }\\n                \";\n                        break;\n                    case \"half_pixel\":\n                        v1 = \"\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\\n                    }\\n                \";\n                        break;\n                    case \"pytorch_half_pixel\":\n                        v1 = `\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        vec4 fcoords = vec4(coords);\\n                        return vec4(\\n                            ${h1}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\\n                            ${f1}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\\n                            ${h1}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\\n                            ${f1}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\\n                          );\\n                    }\\n                `;\n                        break;\n                    case \"align_corners\":\n                        v1 = `\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        vec4 resized = vec4(${h1}.0 - 1.0, ${f1}.0 - 1.0, ${h1}.0 - 1.0,\\n                            ${f1}.0 - 1.0);\\n                        vec4 original = vec4(${m1}.0 - 1.0, ${b1}.0 - 1.0, ${m1}.0 - 1.0,\\n                            ${b1}.0 - 1.0);\\n                        vec4 new_scale = original / resized;\\n                        return vec4(coords) * new_scale;\\n                    }\\n                `;\n                        break;\n                    default:\n                        throw new Error(`resize (packed) does not support coordinateTransformMode:                                 '${n1.coordinateTransformMode}'`);\n                }\n                const T1 = (0, i1.getCoordsDataType)(d1), x1 = `\\n            const vec2 inputWH = vec2(${b1}.0, ${m1}.0);\\n            const vec4 scaleWHWH = vec4(float(${y1}), float(${_1}), float(${y1}), float(${_1}));\\n            ${(0, s1.unpackFromChannel)()}\\n            ${v1}\\n            float getAValue(int x10, int r, int c, int d) {\\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\\n            }\\n            void main() {\\n                ${T1} rc = getOutputCoords();\\n\\n                int batch = rc[0];\\n                int depth = rc[1];\\n\\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\\n\\n                // calculate the source index in fraction\\n                vec4 sourceFrac = getSourceFracIndex(coords);\\n\\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\\n\\n                bool hasNextRow = rc.w < ${f1 - 1};\\n                bool hasNextCol = rc.z < ${h1 - 1};\\n\\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\\n                vec4 topLeft = vec4(\\n                    getAValue(batch, depth, x00.x, x00.y),\\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\\n\\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\\n                vec4 topRight = vec4(\\n                    getAValue(batch, depth, x00.x, x00.w),\\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\\n\\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\\n                vec4 bottomLeft = vec4(\\n                    getAValue(batch, depth, x00.z, x00.y),\\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\\n\\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\\n                vec4 bottomRight = vec4(\\n                    getAValue(batch, depth, x00.z, x00.w),\\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\\n\\n                // calculate the interpolation fraction on u and v direction\\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\\n\\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\\n\\n                ${a1.output} = vec4(newValue);\\n            }\\n        `;\n                return Object.assign(Object.assign({}, u1), {\n                    output: {\n                        dims: p1,\n                        type: t1[0].type,\n                        textureType: o1.TextureType.packed\n                    },\n                    hasMain: !0,\n                    shaderSource: x1\n                });\n            }, c1 = (e1, t1)=>{\n                const n1 = e1[0].dims;\n                let r1, o1 = t1.scales;\n                if (0 === o1.length) {\n                    const i1 = e1[t1.scalesInputIdx];\n                    if (i1 && 0 !== i1.size) {\n                        if (e1[t1.sizesInputIdx]) throw new Error(\"Only one of scales or sizes must be provided as input.\");\n                        o1 = p1(i1, t1.mode, t1.isResize);\n                    } else {\n                        const i1 = e1[t1.sizesInputIdx];\n                        if (!i1 || 0 === i1.size) throw new Error(\"Either scales or sizes MUST be provided as input.\");\n                        r1 = Array.from(i1.integerData), o1 = d1(r1, n1, t1.mode, t1.isResize);\n                    }\n                } else if (e1[t1.sizesInputIdx]) throw new Error(\"Only one of scales or sizes must be provided as input.\");\n                const i1 = r1 || n1.map((e1, t1)=>Math.floor(e1 * o1[t1]));\n                return [\n                    o1,\n                    i1\n                ];\n            }, p1 = (e1, t1, n1)=>{\n                const r1 = Array.from(e1.floatData);\n                return (0, a1.scalesValidation)(r1, t1, n1), r1;\n            }, d1 = (e1, t1, n1, r1)=>{\n                const o1 = t1.length, i1 = new Array(o1);\n                for(let n1 = 0, r1 = o1; n1 < r1; n1++)if (0 === t1[n1]) {\n                    if (0 !== e1[n1]) throw new Error(\"Input dim is zero but required output dim is non-zero.\");\n                    i1[n1] = 1;\n                } else i1[n1] = e1[n1] / t1[n1];\n                return (0, a1.scalesValidation)(i1, n1, r1), i1;\n            };\n        },\n        565: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.shape = void 0;\n            const r1 = n1(9240);\n            t1.shape = (e1, t1)=>(o1(t1), [\n                    new r1.Tensor([\n                        t1[0].dims.length\n                    ], \"int32\", void 0, void 0, new Int32Array(t1[0].dims))\n                ]);\n            const o1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Shape requires 1 input.\");\n            };\n        },\n        2444: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.sliceV10 = t1.parseSliceAttributes = t1.slice = void 0;\n            const r1 = n1(4910), o1 = n1(6145), i1 = n1(7273), s1 = n1(5639), a1 = {\n                name: \"Slice\",\n                inputNames: [\n                    \"A\"\n                ],\n                inputTypes: [\n                    s1.TextureType.unpacked\n                ]\n            };\n            t1.slice = (e1, t1, n1)=>(l1(t1), [\n                    e1.run(Object.assign(Object.assign({}, a1), {\n                        cacheHint: n1.cacheKey,\n                        get: ()=>u1(e1, t1[0], n1)\n                    }), t1)\n                ]), t1.parseSliceAttributes = (e1)=>{\n                const t1 = e1.attributes.getInts(\"starts\"), n1 = e1.attributes.getInts(\"ends\"), o1 = e1.attributes.getInts(\"axes\", []);\n                return (0, r1.createAttributeWithCacheKey)({\n                    starts: t1,\n                    ends: n1,\n                    axes: o1\n                });\n            };\n            const u1 = (e1, t1, n1)=>{\n                const r1 = 0 === n1.axes.length ? t1.dims.slice(0).map((e1, t1)=>t1) : n1.axes, o1 = i1.ShapeUtil.normalizeAxes(r1, t1.dims.length), u1 = n1.starts.map((e1, n1)=>e1 > t1.dims[o1[n1]] - 1 ? t1.dims[o1[n1]] : i1.ShapeUtil.normalizeAxis(e1, t1.dims[o1[n1]])), l1 = n1.ends.map((e1, n1)=>e1 > t1.dims[o1[n1]] - 1 ? t1.dims[o1[n1]] : i1.ShapeUtil.normalizeAxis(e1, t1.dims[o1[n1]])), c1 = t1.dims.slice(), p1 = [];\n                for(let e1 = 0; e1 < o1.length; e1++)c1[o1[e1]] = l1[e1] - u1[e1], u1[e1] > 0 && p1.push(`outputIdx[${o1[e1]}] += ${u1[e1]};`);\n                const d1 = `\\n      float process(int outputIdx[${c1.length}]) {\\n        ${p1.join(\"\\n      \")}\\n        return _A(outputIdx);\\n      }`;\n                return Object.assign(Object.assign({}, a1), {\n                    output: {\n                        dims: c1,\n                        type: t1.type,\n                        textureType: s1.TextureType.unpacked\n                    },\n                    shaderSource: d1\n                });\n            }, l1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Slice requires 1 input.\");\n                if (-1 === o1.NUMBER_TYPES.indexOf(e1[0].type)) throw new Error(\"Invalid input type.\");\n            };\n            t1.sliceV10 = (e1, t1)=>{\n                p1(t1);\n                const n1 = c1(e1, t1);\n                return [\n                    e1.run(Object.assign(Object.assign({}, a1), {\n                        cacheHint: n1.cacheKey,\n                        get: ()=>u1(e1, t1[0], n1)\n                    }), [\n                        t1[0]\n                    ])\n                ];\n            };\n            const c1 = (e1, t1)=>{\n                if (!e1.session.isInitializer(t1[1].dataId) || !e1.session.isInitializer(t1[2].dataId) || t1.length >= 4 && !e1.session.isInitializer(t1[3].dataId) || t1.length >= 5 && !e1.session.isInitializer(t1[4].dataId)) throw new Error(\"dynamic slice attributes are not allowed\");\n                if (t1.length >= 5 && t1[4].integerData.some((e1)=>1 !== e1)) throw new Error(\"currently non-1 steps is not supported for Slice\");\n                const n1 = Array.from(t1[1].integerData), r1 = Array.from(t1[2].integerData), o1 = t1.length >= 4 ? Array.from(t1[3].integerData) : [];\n                return {\n                    starts: n1,\n                    ends: r1,\n                    axes: o1,\n                    cacheKey: `${o1};${n1};${r1}`\n                };\n            }, p1 = (e1)=>{\n                if (!e1 || e1.length < 3 || e1.length > 5) throw new Error(\"Invalid input number.\");\n                if (\"int32\" !== e1[1].type || 1 !== e1[1].dims.length) throw new Error(\"Invalid input type.\");\n                if (\"int32\" !== e1[2].type || 1 !== e1[2].dims.length) throw new Error(\"Invalid input type.\");\n                if (e1.length >= 4 && (\"int32\" !== e1[3].type || 1 !== e1[3].dims.length)) throw new Error(\"Invalid input type.\");\n                if (e1.length >= 5 && (\"int32\" !== e1[4].type || 1 !== e1[4].dims.length)) throw new Error(\"Invalid input type.\");\n            };\n        },\n        815: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.softmaxV13 = t1.parseSoftmaxAttributesV13 = t1.parseSoftmaxAttributes = t1.softmax = void 0;\n            const r1 = n1(4910), o1 = n1(7273), i1 = n1(6757), s1 = n1(5639), a1 = n1(5707), u1 = {\n                name: \"SoftmaxComputeMax\",\n                inputNames: [\n                    \"A\"\n                ],\n                inputTypes: [\n                    s1.TextureType.unpacked\n                ]\n            }, l1 = {\n                name: \"SoftmaxComputeScale\",\n                inputNames: [\n                    \"A\",\n                    \"Max\"\n                ],\n                inputTypes: [\n                    s1.TextureType.unpacked,\n                    s1.TextureType.unpacked\n                ]\n            }, c1 = {\n                name: \"SoftMax\",\n                inputNames: [\n                    \"A\",\n                    \"Max\",\n                    \"Norm\"\n                ],\n                inputTypes: [\n                    s1.TextureType.unpacked,\n                    s1.TextureType.unpacked,\n                    s1.TextureType.unpacked\n                ]\n            };\n            t1.softmax = (e1, t1, n1)=>{\n                g1(t1);\n                const r1 = t1[0].dims.slice(), i1 = o1.ShapeUtil.normalizeAxis(n1.axis, r1.length), s1 = o1.ShapeUtil.sizeToDimension(r1, i1), a1 = o1.ShapeUtil.sizeFromDimension(r1, i1);\n                return p1(e1, t1, n1, s1, a1);\n            }, t1.parseSoftmaxAttributes = (e1)=>(0, r1.createAttributeWithCacheKey)({\n                    axis: e1.attributes.getInt(\"axis\", 1)\n                }), t1.parseSoftmaxAttributesV13 = (e1)=>(0, r1.createAttributeWithCacheKey)({\n                    axis: e1.attributes.getInt(\"axis\", -1)\n                }), t1.softmaxV13 = (e1, t1, n1)=>{\n                g1(t1);\n                const i1 = t1[0].dims.slice(), s1 = o1.ShapeUtil.normalizeAxis(n1.axis, i1.length), u1 = i1.length, l1 = s1 !== u1 - 1, c1 = [];\n                let d1, f1 = [], h1 = [];\n                l1 && (f1 = Array.from({\n                    length: u1\n                }).map((e1, t1)=>t1), f1[s1] = u1 - 1, f1[u1 - 1] = s1, f1.map((e1)=>c1.push(i1[e1])), d1 = (0, r1.createAttributeWithCacheKey)({\n                    perm: f1\n                }), h1 = (0, a1.transpose)(e1, t1, d1));\n                const b1 = l1 ? o1.ShapeUtil.sizeToDimension(c1, u1 - 1) : o1.ShapeUtil.sizeToDimension(i1, u1 - 1), m1 = l1 ? o1.ShapeUtil.sizeFromDimension(c1, u1 - 1) : o1.ShapeUtil.sizeFromDimension(i1, u1 - 1), y1 = p1(e1, l1 ? h1 : t1, n1, b1, m1);\n                return l1 ? (0, a1.transpose)(e1, y1, d1) : y1;\n            };\n            const p1 = (e1, t1, n1, r1, o1)=>{\n                const i1 = d1(e1, t1[0], r1, o1, [\n                    r1\n                ]), s1 = e1.run(Object.assign(Object.assign({}, u1), {\n                    cacheHint: n1.cacheKey,\n                    get: ()=>i1\n                }), t1), a1 = f1(e1, t1[0], r1, o1, i1.output.dims, [\n                    r1\n                ]), p1 = e1.run(Object.assign(Object.assign({}, l1), {\n                    cacheHint: n1.cacheKey,\n                    get: ()=>a1\n                }), [\n                    t1[0],\n                    s1\n                ]), g1 = h1(e1, t1[0], r1, o1, i1.output.dims, a1.output.dims);\n                return [\n                    e1.run(Object.assign(Object.assign({}, c1), {\n                        cacheHint: n1.cacheKey,\n                        get: ()=>g1\n                    }), [\n                        t1[0],\n                        s1,\n                        p1\n                    ])\n                ];\n            }, d1 = (e1, t1, n1, r1, o1)=>{\n                const [a1, l1] = e1.calculateTextureWidthAndHeight(t1.dims, s1.TextureType.unpacked), c1 = o1.length;\n                if (n1 < 1 || r1 < 1) throw new Error(\"Logical row count N and feature count D must be greater than or equal to 1\");\n                if (1 !== o1.length) throw new Error(\"Dimensionality of the output should be 1\");\n                if (o1[0] !== n1) throw new Error(\"Shape of the output should be equal to logical row count\");\n                const p1 = (0, i1.getGlsl)(e1.session.backend.glContext.version), d1 = `\\n      float process(int[${c1}] indices) {\\n        int logical_row_start_offset = indices[0] * ${r1};\\n\\n        float max = getColorAsFloat(${p1.texture2D}(A, offsetToCoords(logical_row_start_offset, ${a1},\\n        ${l1} )));\\n        for(int i=1; i<${r1}; ++i)\\n        {\\n          float current = getColorAsFloat(${p1.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\\n            ${a1}, ${l1})));\\n          if(current > max)\\n          max = current;\\n        }\\n\\n        return max;\\n      }`;\n                return Object.assign(Object.assign({}, u1), {\n                    output: {\n                        dims: o1,\n                        type: t1.type,\n                        textureType: s1.TextureType.unpacked\n                    },\n                    shaderSource: d1\n                });\n            }, f1 = (e1, t1, n1, r1, o1, a1)=>{\n                const [u1, c1] = e1.calculateTextureWidthAndHeight(t1.dims, s1.TextureType.unpacked), p1 = a1.length;\n                if (n1 < 1 || r1 < 1) throw new Error(\"Logical row count N and feature count D must be greater than or equal to 1\");\n                if (1 !== a1.length) throw new Error(\"Dimensionality of the output should be 1\");\n                if (a1[0] !== n1) throw new Error(\"Shape of the output should be equal to logical row count\");\n                if (1 !== o1.length) throw new Error(\"Dimensionality of the intermediate results should be 1\");\n                if (o1[0] !== n1) throw new Error(\"Shape of the intermediate results should be equal to logical row count\");\n                const d1 = `\\n      float process(int[${p1}] indices) {\\n        int logical_row_start_offset = indices[0] * ${r1};\\n\\n        float norm_factor = 0.0;\\n        float max = _Max(indices);\\n        for(int i=0; i<${r1}; ++i)\\n        {\\n          norm_factor += exp(getColorAsFloat(${(0, i1.getGlsl)(e1.session.backend.glContext.version).texture2D}(A, offsetToCoords(logical_row_start_offset + i,\\n            ${u1}, ${c1}))) - max);\\n        }\\n\\n        return norm_factor;\\n      }`;\n                return Object.assign(Object.assign({}, l1), {\n                    output: {\n                        dims: a1,\n                        type: t1.type,\n                        textureType: s1.TextureType.unpacked\n                    },\n                    shaderSource: d1\n                });\n            }, h1 = (e1, t1, n1, r1, o1, i1)=>{\n                const [a1, u1] = e1.calculateTextureWidthAndHeight(t1.dims, s1.TextureType.unpacked), l1 = t1.dims.length;\n                if (n1 < 1 || r1 < 1) throw new Error(\"Logical row count N and feature count D must be greater than or equal to 1\");\n                if (1 !== o1.length || 1 !== i1.length) throw new Error(\"Dimensionality of the intermediate results should be 1\");\n                if (o1[0] !== n1 || i1[0] !== n1) throw new Error(\"Shape of the intermediate results should be equal to logical row count\");\n                const p1 = `\\n      float process(int[${l1}] indices) {\\n\\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\\n      int offset = coordsToOffset(TexCoords, ${a1}, ${u1});\\n\\n      //determine the logical row for this index\\n      int logical_row_index[1];\\n      logical_row_index[0] = offset / ${r1};\\n\\n      float norm_factor = _Norm(logical_row_index);\\n\\n      // avoid possible division by 0\\n      // if norm_facor is 0, all elements are zero\\n      // if so, return 0\\n      if(norm_factor == 0.0)\\n        return 0.0;\\n\\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\\n    }`;\n                return Object.assign(Object.assign({}, c1), {\n                    output: {\n                        dims: t1.dims,\n                        type: t1.type,\n                        textureType: s1.TextureType.unpacked\n                    },\n                    shaderSource: p1\n                });\n            }, g1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Softmax requires 1 input.\");\n                if (\"float32\" !== e1[0].type && \"float64\" !== e1[0].type) throw new Error(\"Invalid input type\");\n            };\n        },\n        564: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseSplitAttributes = t1.split = void 0;\n            const r1 = n1(4910), o1 = n1(7273), i1 = n1(5639), s1 = {\n                name: \"Split\",\n                inputNames: [\n                    \"A\"\n                ],\n                inputTypes: [\n                    i1.TextureType.unpacked\n                ]\n            };\n            t1.split = (e1, t1, n1)=>{\n                l1(t1);\n                const r1 = o1.ShapeUtil.normalizeAxis(n1.axis, t1[0].dims.length), i1 = a1(e1, t1, r1, n1), c1 = [];\n                for(let o1 = 0; o1 < i1; ++o1)c1.push(e1.run(Object.assign(Object.assign({}, s1), {\n                    cacheHint: `${n1.cacheKey};${o1}`,\n                    get: ()=>u1(e1, t1[0], n1, r1, o1)\n                }), t1));\n                return c1;\n            }, t1.parseSplitAttributes = (e1)=>{\n                const t1 = e1.attributes.getInt(\"axis\", 0), n1 = e1.attributes.getInts(\"split\", []), o1 = e1.outputs.length;\n                return (0, r1.createAttributeWithCacheKey)({\n                    axis: t1,\n                    split: n1,\n                    numOutputs: o1\n                });\n            };\n            const a1 = (e1, t1, n1, r1)=>{\n                const [, i1] = o1.SplitUtil.splitShape(t1[0].dims, n1, r1.split, r1.numOutputs);\n                return i1.length;\n            }, u1 = (e1, t1, n1, r1, a1)=>{\n                const [u1, l1] = o1.SplitUtil.splitShape(t1.dims, r1, n1.split, n1.numOutputs), c1 = l1[a1], p1 = u1[a1], d1 = `\\n      float process(int indices[${p1.length}]) {\\n        indices[${r1}] += ${c1};\\n        return _A(indices);\\n      }\\n    `;\n                return Object.assign(Object.assign({}, s1), {\n                    cacheHint: `${n1.cacheKey}:${a1}`,\n                    output: {\n                        dims: p1,\n                        type: t1.type,\n                        textureType: i1.TextureType.unpacked\n                    },\n                    shaderSource: d1\n                });\n            }, l1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Split requires one input.\");\n                if (\"int8\" !== e1[0].type && \"uint8\" !== e1[0].type && \"int16\" !== e1[0].type && \"uint16\" !== e1[0].type && \"int32\" !== e1[0].type && \"uint32\" !== e1[0].type && \"float32\" !== e1[0].type && \"float64\" !== e1[0].type && \"bool\" !== e1[0].type) throw new Error(\"Invalid input type.\");\n            };\n        },\n        5416: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseSqueezeAttributes = t1.squeezeV13 = t1.squeeze = void 0;\n            const r1 = n1(7273);\n            t1.squeeze = (e1, t1, n1)=>{\n                o1(t1);\n                const i1 = r1.ShapeUtil.squeezeShape(t1[0].dims, n1);\n                return [\n                    e1.reshapeUnpacked(t1[0], i1)\n                ];\n            }, t1.squeezeV13 = (e1, n1)=>(i1(n1), (0, t1.squeeze)(e1, [\n                    n1[0]\n                ], Array.from(n1[1].integerData))), t1.parseSqueezeAttributes = (e1)=>e1.attributes.getInts(\"axes\");\n            const o1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Squeeze requires 1 input.\");\n                if (\"string\" === e1[0].type) throw new Error(\"invalid input tensor types.\");\n            }, i1 = (e1)=>{\n                if (!e1 || 2 !== e1.length) throw new Error(\"Squeeze requires 2 inputs.\");\n                if (\"int32\" !== e1[1].type) throw new Error(\"Invalid input type.\");\n            };\n        },\n        1240: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.sum = void 0;\n            const r1 = n1(6757), o1 = n1(5639);\n            t1.sum = (e1, t1)=>{\n                s1(t1);\n                const n1 = {\n                    name: \"Sum\",\n                    inputNames: t1.map((e1, t1)=>`X${t1}`),\n                    inputTypes: new Array(t1.length).fill(o1.TextureType.unpacked)\n                };\n                return [\n                    e1.run(Object.assign(Object.assign({}, n1), {\n                        get: ()=>i1(e1, t1, n1)\n                    }), t1)\n                ];\n            };\n            const i1 = (e1, t1, n1)=>{\n                const i1 = (0, r1.getGlsl)(e1.session.backend.glContext.version), s1 = t1[0].dims.slice(), a1 = t1.map((e1, t1)=>`${i1.texture2D}(X${t1},TexCoords)`).join(\" + \"), u1 = `\\n      void main() {\\n        vec4 result = ${a1};\\n        ${i1.output} = result;\\n      }\\n    `;\n                return Object.assign(Object.assign({}, n1), {\n                    output: {\n                        dims: s1,\n                        type: t1[0].type,\n                        textureType: o1.TextureType.unpacked\n                    },\n                    hasMain: !0,\n                    shaderSource: u1\n                });\n            }, s1 = (e1)=>{\n                if (!e1 || 0 === e1.length) throw new Error(\"Sum requires inputs.\");\n                const t1 = e1[0].dims.length;\n                for(let n1 = 1; n1 < e1.length; n1++){\n                    if (t1 !== e1[n1].dims.length) throw new Error(\"Input shapes are mismatched.\");\n                    for(let r1 = 0; r1 < t1; r1++)if (e1[0].dims[r1] !== e1[n1].dims[r1]) throw new Error(\"Input shapes are not matched.\");\n                }\n                if (\"float32\" !== e1[0].type && \"float64\" !== e1[0].type) throw new Error(\"Invalid input type.\");\n                for(let t1 = 1; t1 < e1.length; t1++)if (e1[0].type !== e1[t1].type) throw new Error(\"Input types are not matched.\");\n            };\n        },\n        5944: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.tile = void 0;\n            const r1 = n1(6145), o1 = n1(5639);\n            t1.tile = (e1, t1)=>{\n                s1(t1);\n                const n1 = {\n                    name: \"Tile\",\n                    inputNames: [\n                        \"A\"\n                    ],\n                    inputTypes: [\n                        o1.TextureType.unpacked\n                    ]\n                };\n                return [\n                    e1.run(Object.assign(Object.assign({}, n1), {\n                        get: ()=>i1(e1, t1, n1)\n                    }), t1)\n                ];\n            };\n            const i1 = (e1, t1, n1)=>{\n                const r1 = t1[0].dims.slice(), i1 = new Array(r1.length), s1 = [];\n                for(let e1 = 0; e1 < r1.length; e1++)i1[e1] = r1[e1] * t1[1].numberData[e1], s1.push(`inputIdx[${e1}] = int(mod(float(outputIdx[${e1}]), ${r1[e1]}.));`);\n                const a1 = i1.length, u1 = `\\n      float process(int outputIdx[${a1}]) {\\n        int inputIdx[${a1}];\\n        ${s1.join(\"\\n\")}\\n        return _A(inputIdx);\\n      }\\n    `;\n                return Object.assign(Object.assign({}, n1), {\n                    output: {\n                        dims: i1,\n                        type: t1[0].type,\n                        textureType: o1.TextureType.unpacked\n                    },\n                    shaderSource: u1\n                });\n            }, s1 = (e1)=>{\n                if (!e1 || 2 !== e1.length) throw new Error(\"Tile requires 2 input.\");\n                if (1 !== e1[1].dims.length) throw new Error(\"The second input shape must 1 dimension.\");\n                if (e1[1].dims[0] !== e1[0].dims.length) throw new Error(\"Invalid input shape.\");\n                if (-1 === r1.NUMBER_TYPES.indexOf(e1[0].type)) throw new Error(\"Invalid input type.\");\n                if (\"int32\" !== e1[1].type && \"int16\" !== e1[1].type) throw new Error(\"Invalid repeat type.\");\n            };\n        },\n        5707: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseTransposeAttributes = t1.transpose = void 0;\n            const r1 = n1(4910), o1 = n1(7273), i1 = n1(5639), s1 = {\n                name: \"Transpose\",\n                inputNames: [\n                    \"A\"\n                ],\n                inputTypes: [\n                    i1.TextureType.unpacked\n                ]\n            };\n            t1.transpose = (e1, t1, n1)=>(p1(t1), [\n                    e1.run(Object.assign(Object.assign({}, s1), {\n                        cacheHint: n1.cacheKey,\n                        get: ()=>a1(e1, t1[0], n1.perm)\n                    }), t1)\n                ]), t1.parseTransposeAttributes = (e1)=>(0, r1.createAttributeWithCacheKey)({\n                    perm: e1.attributes.getInts(\"perm\", [])\n                });\n            const a1 = (e1, t1, n1)=>{\n                const r1 = t1.dims;\n                n1 = u1(r1, n1);\n                const o1 = l1(r1, n1), a1 = r1.length, p1 = `\\n      ${c1(\"perm\", n1, a1)}\\n      float process(int indices[${a1}]) {\\n        int a[${a1}];\\n        perm(a, indices);\\n        return _A(a);\\n      }`;\n                return Object.assign(Object.assign({}, s1), {\n                    output: {\n                        dims: o1,\n                        type: t1.type,\n                        textureType: i1.TextureType.unpacked\n                    },\n                    shaderSource: p1\n                });\n            }, u1 = (e1, t1)=>(t1 && t1.length !== e1.length && (t1 = [\n                    ...e1.keys()\n                ].reverse()), t1), l1 = (e1, t1)=>(t1 = u1(e1, t1), o1.ShapeUtil.sortBasedOnPerm(e1, t1)), c1 = (e1, t1, n1)=>{\n                const r1 = [];\n                r1.push(`void ${e1}(out int a[${n1}], int src[${n1}]) {`);\n                for(let e1 = 0; e1 < n1; ++e1)r1.push(`\\ta[${t1[e1]}]=src[${e1}];`);\n                return r1.push(\"\t}\"), r1.join(\"\\n\");\n            }, p1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Transpose requires 1 input.\");\n                if (\"float32\" !== e1[0].type && \"float64\" !== e1[0].type) throw new Error(\"input should be float tensor\");\n            };\n        },\n        2488: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.encodeAsUint8 = void 0;\n            const r1 = n1(6757), o1 = n1(5639);\n            t1.encodeAsUint8 = (e1, t1)=>{\n                const n1 = t1.shape, i1 = (0, r1.getGlsl)(e1.session.backend.glContext.version), s1 = `\\n    const float FLOAT_MAX = 1.70141184e38;\\n    const float FLOAT_MIN = 1.17549435e-38;\\n\\n    bool isNaN(float val) {\\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\\n    }\\n\\n    highp vec4 encodeAsUint8(highp float v) {\\n      if (isNaN(v)) {\\n        return vec4(255, 255, 255, 255);\\n      }\\n\\n      highp float av = abs(v);\\n\\n      if(av < FLOAT_MIN) {\\n        return vec4(0.0, 0.0, 0.0, 0.0);\\n      } else if(v > FLOAT_MAX) {\\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n      } else if(v < -FLOAT_MAX) {\\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n      }\\n\\n      highp vec4 c = vec4(0,0,0,0);\\n\\n      highp float e = floor(log2(av));\\n      highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n      c[2] = floor(128.0 * m);\\n      m -= c[2] / 128.0;\\n      c[1] = floor(32768.0 * m);\\n      m -= c[1] / 32768.0;\\n      c[0] = floor(8388608.0 * m);\\n\\n      highp float ebias = e + 127.0;\\n      c[3] = floor(ebias / 2.0);\\n      ebias -= c[3] * 2.0;\\n      c[2] += floor(ebias) * 128.0;\\n\\n      c[3] += 128.0 * step(0.0, -v);\\n\\n      return c / 255.0;\\n    }\\n\\n    void main() {\\n      float value = ${i1.texture2D}(X,TexCoords).r;\\n      ${i1.output} = encodeAsUint8(value);\\n    }`, a1 = {\n                    name: \"Uint8Encode\",\n                    inputTypes: [\n                        o1.TextureType.unpacked\n                    ],\n                    inputNames: [\n                        \"X\"\n                    ],\n                    output: {\n                        dims: n1,\n                        type: t1.tensor.type,\n                        textureType: o1.TextureType.downloadUint8AsFloat\n                    },\n                    shaderSource: s1,\n                    hasMain: !0\n                };\n                return e1.executeProgram(a1, [\n                    t1.tensor\n                ]);\n            };\n        },\n        9087: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.tanh = t1.tan = t1.sqrt = t1.sin = t1.sigmoid = t1.relu = t1.not = t1.neg = t1.log = t1.parseLeakyReluAttributes = t1.leakyRelu = t1.identity = t1.floor = t1.exp = t1.parseEluAttributes = t1.elu = t1.cos = t1.ceil = t1.clipV11 = t1.parseClipAttributes = t1.clip = t1.atan = t1.asin = t1.acos = t1.abs = t1.glslTanh = t1.glslTan = t1.glslSqrt = t1.glslSigmoid = t1.glslRelu = t1.glslSin = t1.glslNot = t1.glslNeg = t1.glslLog = t1.glslLeakyRelu = t1.glslIdentity = t1.glslClip = t1.glslFloor = t1.glslExp = t1.glslElu = t1.glslCos = t1.glslCeil = t1.glslAtan = t1.glslAsin = t1.glslAcos = t1.glslAbs = void 0;\n            const r1 = n1(4910), o1 = n1(7273), i1 = n1(1997), s1 = n1(6757), a1 = n1(5639);\n            function u1() {\n                return E1(\"abs\");\n            }\n            function l1() {\n                return E1(\"acos\");\n            }\n            function c1() {\n                return E1(\"asin\");\n            }\n            function p1() {\n                return E1(\"atan\");\n            }\n            function d1() {\n                return E1(\"ceil\");\n            }\n            function f1() {\n                return E1(\"cos\");\n            }\n            function h1(e1) {\n                const t1 = \"elu\";\n                return {\n                    body: `\\n  const float alpha = float(${e1});\\n\\n  float ${t1}_(float a) {\\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\\n  }\\n  vec4 ${t1}_(vec4 v) {\\n    return vec4(${t1}_(v.x), ${t1}_(v.y), ${t1}_(v.z), ${t1}_(v.w));\\n  }\\n  `,\n                    name: t1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            function g1() {\n                return E1(\"exp\");\n            }\n            function b1() {\n                return E1(\"floor\");\n            }\n            function m1(e1, t1) {\n                const n1 = \"clip\";\n                return {\n                    body: `\\n  const float min = float(${e1});\\n  const float max = float(${t1});\\n\\n  float ${n1}_(float a) {\\n    return clamp(a, min, max);\\n  }\\n  vec4 ${n1}_(vec4 v) {\\n    return clamp(v, min, max);\\n  }\\n  `,\n                    name: n1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            function y1() {\n                const e1 = \"indentity\";\n                return {\n                    body: `\\n  float ${e1}_(float a) {\\n    return a;\\n  }\\n  vec4 ${e1}_(vec4 v) {\\n    return v;\\n  }\\n  `,\n                    name: e1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            function _1(e1) {\n                const t1 = \"leakyRelu\";\n                return {\n                    body: `\\n  const float alpha = float(${e1});\\n\\n  float ${t1}_(float a) {\\n    return a < 0.0 ? a * alpha : a;\\n  }\\n  vec4 ${t1}_(vec4 v) {\\n    return vec4(${t1}_(v.x), ${t1}_(v.y), ${t1}_(v.z), ${t1}_(v.w));\\n  }\\n  `,\n                    name: t1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            function v1() {\n                return E1(\"log\");\n            }\n            function T1() {\n                const e1 = \"neg\";\n                return {\n                    body: `\\n  float ${e1}_(float a) {\\n    return -a;\\n  }\\n  vec4 ${e1}_(vec4 v) {\\n    return -v;\\n  }\\n  `,\n                    name: e1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            function x1() {\n                const e1 = \"not\";\n                return {\n                    body: `\\n  float ${e1}_(float a) {\\n    return float( ! bool(a) );\\n  }\\n  bool ${e1}_(bool a) {\\n    return !a;\\n  }\\n  vec4 ${e1}_(vec4 v) {\\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\\n  }\\n  bvec4 ${e1}_(bvec4 v) {\\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\\n  }\\n  `,\n                    name: e1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            function w1() {\n                return E1(\"sin\");\n            }\n            function O1() {\n                const e1 = \"relu\";\n                return {\n                    body: `\\n  float ${e1}_(float a) {\\n    return max( a, 0.0 );\\n  }\\n  vec4 ${e1}_(vec4 v) {\\n    return max( v, 0.0 );\\n  }\\n  `,\n                    name: e1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            function S1() {\n                const e1 = \"sigmoid\";\n                return {\n                    body: `\\n  float ${e1}_(float a) {\\n    return 1.0 / (1.0 + exp(-a));\\n  }\\n  vec4 ${e1}_(vec4 v) {\\n    return 1.0 / (1.0 + exp(-v));\\n  }\\n  `,\n                    name: e1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            function A1() {\n                return E1(\"sqrt\");\n            }\n            function P1() {\n                return E1(\"tan\");\n            }\n            function I1() {\n                const e1 = \"tanh\";\n                return {\n                    body: `\\n  float ${e1}_(float a) {\\n    a = clamp(a, -10., 10.);\\n    a = exp(2.*a);\\n    return (a - 1.) / (a + 1.);\\n  }\\n  vec4 ${e1}_(vec4 v) {\\n    v = clamp(v, -10., 10.);\\n    v = exp(2.*v);\\n    return (v - 1.) / (v + 1.);\\n  }\\n  `,\n                    name: e1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            function E1(e1) {\n                return {\n                    body: `\\n  float ${e1}_(float a) {\\n    return ${e1}(a);\\n  }\\n  vec4 ${e1}_(vec4 v) {\\n    return ${e1}(v);\\n  }\\n  `,\n                    name: e1,\n                    type: i1.FunctionType.ValueBased\n                };\n            }\n            t1.glslAbs = u1, t1.glslAcos = l1, t1.glslAsin = c1, t1.glslAtan = p1, t1.glslCeil = d1, t1.glslCos = f1, t1.glslElu = h1, t1.glslExp = g1, t1.glslFloor = b1, t1.glslClip = m1, t1.glslIdentity = y1, t1.glslLeakyRelu = _1, t1.glslLog = v1, t1.glslNeg = T1, t1.glslNot = x1, t1.glslSin = w1, t1.glslRelu = O1, t1.glslSigmoid = S1, t1.glslSqrt = A1, t1.glslTan = P1, t1.glslTanh = I1;\n            const D1 = (e1, t1, n1, r1)=>{\n                const o1 = e1.session.pack ? a1.TextureType.packed : a1.TextureType.unpacked, i1 = {\n                    name: n1.name,\n                    inputTypes: [\n                        o1\n                    ],\n                    inputNames: [\n                        \"A\"\n                    ],\n                    cacheHint: r1\n                };\n                return Object.assign(Object.assign({}, i1), {\n                    get: ()=>((e1, t1, n1, r1)=>{\n                            const o1 = e1.session.pack ? a1.TextureType.packed : a1.TextureType.unpacked, i1 = (0, s1.getGlsl)(e1.session.backend.glContext.version);\n                            return Object.assign(Object.assign({}, t1), {\n                                output: {\n                                    dims: n1.dims,\n                                    type: n1.type,\n                                    textureType: o1\n                                },\n                                shaderSource: `\\n     ${r1.body}\\n     void main() {\\n       vec4 v = ${i1.texture2D}(A, TexCoords);\\n       v = ${r1.name}_(v);\\n       ${i1.output} = v;\\n     }\\n     `,\n                                hasMain: !0\n                            });\n                        })(e1, i1, t1, n1)\n                });\n            };\n            t1.abs = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], u1()), t1)\n                ], t1.acos = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], l1()), t1)\n                ], t1.asin = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], c1()), t1)\n                ], t1.atan = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], p1()), t1)\n                ], t1.clip = (e1, t1, n1)=>[\n                    e1.run(D1(e1, t1[0], m1(n1.min, n1.max), n1.cacheKey), t1)\n                ], t1.parseClipAttributes = (e1)=>(0, r1.createAttributeWithCacheKey)({\n                    min: e1.attributes.getFloat(\"min\", o1.MIN_CLIP),\n                    max: e1.attributes.getFloat(\"max\", o1.MAX_CLIP)\n                }), t1.clipV11 = (e1, n1)=>{\n                const r1 = $1(e1, n1);\n                return (0, t1.clip)(e1, [\n                    n1[0]\n                ], r1);\n            };\n            const $1 = (e1, t1)=>{\n                if (t1.length >= 3 && (!e1.session.isInitializer(t1[1].dataId) || !e1.session.isInitializer(t1[2].dataId))) throw new Error(\"dynamic clip attributes are not allowed\");\n                const n1 = t1.length >= 3 ? t1[1].numberData[0] : o1.MIN_CLIP, i1 = t1.length >= 3 ? t1[2].numberData[0] : o1.MAX_CLIP;\n                return (0, r1.createAttributeWithCacheKey)({\n                    min: n1,\n                    max: i1\n                });\n            };\n            t1.ceil = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], d1()), t1)\n                ], t1.cos = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], f1()), t1)\n                ], t1.elu = (e1, t1, n1)=>[\n                    e1.run(D1(e1, t1[0], h1(n1.alpha), n1.cacheKey), t1)\n                ], t1.parseEluAttributes = (e1)=>(0, r1.createAttributeWithCacheKey)({\n                    alpha: e1.attributes.getFloat(\"alpha\", 1)\n                }), t1.exp = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], g1()), t1)\n                ], t1.floor = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], b1()), t1)\n                ], t1.identity = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], y1()), t1)\n                ], t1.leakyRelu = (e1, t1, n1)=>[\n                    e1.run(D1(e1, t1[0], _1(n1.alpha), n1.cacheKey), t1)\n                ], t1.parseLeakyReluAttributes = (e1)=>(0, r1.createAttributeWithCacheKey)({\n                    alpha: e1.attributes.getFloat(\"alpha\", .01)\n                }), t1.log = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], v1()), t1)\n                ], t1.neg = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], T1()), t1)\n                ], t1.not = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], x1()), t1)\n                ], t1.relu = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], O1()), t1)\n                ], t1.sigmoid = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], S1()), t1)\n                ], t1.sin = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], w1()), t1)\n                ], t1.sqrt = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], A1()), t1)\n                ], t1.tan = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], P1()), t1)\n                ], t1.tanh = (e1, t1)=>[\n                    e1.run(D1(e1, t1[0], I1()), t1)\n                ];\n        },\n        540: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createUnpackProgramInfoLoader = t1.createUnpackProgramInfo = void 0;\n            const r1 = n1(6757), o1 = n1(5639), i1 = n1(432), s1 = n1(5614), a1 = {\n                name: \"unpack\",\n                inputNames: [\n                    \"A\"\n                ],\n                inputTypes: [\n                    o1.TextureType.packed\n                ]\n            };\n            t1.createUnpackProgramInfo = (e1, t1)=>{\n                const n1 = t1.dims.length, u1 = (0, s1.getChannels)(\"rc\", n1), l1 = u1.slice(-2), c1 = (0, i1.getCoordsDataType)(n1), p1 = (0, s1.unpackFromChannel)(), d1 = 0 === t1.dims.length ? \"\" : function(e1, t1) {\n                    if (1 === e1) return \"rc\";\n                    let n1 = \"\";\n                    for(let r1 = 0; r1 < e1; r1++)n1 += t1[r1], r1 < e1 - 1 && (n1 += \",\");\n                    return n1;\n                }(n1, u1), f1 = n1 <= 1 ? \"rc\" : `vec2(${l1.join(\",\")})`, h1 = `\\n    ${p1}\\n    void main() {\\n      ${c1} rc = getOutputCoords();\\n\\n       // Sample the texture with the coords to get the rgba channel value.\\n       vec4 packedInput = getA(${d1});\\n\\n       ${(0, r1.getGlsl)(e1.session.backend.glContext.version).output} = vec4(getChannel(packedInput, ${f1}), 0, 0, 0);\\n     }\\n   `;\n                return Object.assign(Object.assign({}, a1), {\n                    hasMain: !0,\n                    output: {\n                        dims: t1.dims,\n                        type: t1.type,\n                        textureType: o1.TextureType.unpacked\n                    },\n                    shaderSource: h1\n                });\n            }, t1.createUnpackProgramInfoLoader = (e1, n1)=>Object.assign(Object.assign({}, a1), {\n                    get: ()=>(0, t1.createUnpackProgramInfo)(e1, n1)\n                });\n        },\n        7862: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.parseUnsqueezeAttributes = t1.unsqueezeV13 = t1.unsqueeze = void 0;\n            const r1 = n1(7273);\n            t1.unsqueeze = (e1, t1, n1)=>{\n                o1(t1);\n                const i1 = r1.ShapeUtil.unsqueezeShape(t1[0].dims, n1);\n                return [\n                    e1.reshapeUnpacked(t1[0], i1)\n                ];\n            }, t1.unsqueezeV13 = (e1, n1)=>(i1(n1), (0, t1.unsqueeze)(e1, [\n                    n1[0]\n                ], Array.from(n1[1].integerData))), t1.parseUnsqueezeAttributes = (e1)=>e1.attributes.getInts(\"axes\");\n            const o1 = (e1)=>{\n                if (!e1 || 1 !== e1.length) throw new Error(\"Unsqueeze requires 1 input.\");\n                if (\"string\" === e1[0].type) throw new Error(\"invalid input tensor types.\");\n            }, i1 = (e1)=>{\n                if (!e1 || 2 !== e1.length) throw new Error(\"Unsqueeze requires 2 inputs.\");\n                if (\"int32\" !== e1[1].type) throw new Error(\"Invalid input type.\");\n            };\n        },\n        3980: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.scalesValidation = t1.validateInputs = t1.parseUpsampleAttributes = t1.parseUpsampleAttributesV9 = t1.parseUpsampleAttributesV7 = t1.upsample = void 0;\n            const r1 = n1(4910), o1 = n1(6757), i1 = n1(5639), s1 = {\n                name: \"Upsample\",\n                inputNames: [\n                    \"X\"\n                ],\n                inputTypes: [\n                    i1.TextureType.unpacked\n                ]\n            };\n            t1.upsample = (e1, n1, r1)=>((0, t1.validateInputs)(n1, r1), [\n                    e1.run(Object.assign(Object.assign({}, s1), {\n                        cacheHint: r1.cacheKey,\n                        get: ()=>a1(e1, n1, r1)\n                    }), n1)\n                ]), t1.parseUpsampleAttributesV7 = (e1)=>(0, t1.parseUpsampleAttributes)(e1, 7), t1.parseUpsampleAttributesV9 = (e1)=>(0, t1.parseUpsampleAttributes)(e1, 9), t1.parseUpsampleAttributes = (e1, n1)=>{\n                const o1 = n1 >= 10, i1 = e1.attributes.getString(\"mode\", \"nearest\");\n                if (\"nearest\" !== i1 && \"linear\" !== i1 && (n1 < 11 || \"cubic\" !== i1)) throw new Error(`unrecognized mode: ${i1}`);\n                let s1 = [];\n                n1 < 9 && (s1 = e1.attributes.getFloats(\"scales\"), (0, t1.scalesValidation)(s1, i1, o1));\n                const a1 = e1.attributes.getFloat(\"extrapolation_value\", 0), u1 = n1 > 10 ? e1.attributes.getString(\"coordinate_transformation_mode\", \"half_pixel\") : \"asymmetric\";\n                if (-1 === [\n                    \"asymmetric\",\n                    \"pytorch_half_pixel\",\n                    \"tf_half_pixel_for_nn\",\n                    \"align_corners\",\n                    \"tf_crop_and_resize\",\n                    \"half_pixel\"\n                ].indexOf(u1)) throw new Error(`coordinate_transform_mode '${u1}' is not supported`);\n                const l1 = \"tf_crop_and_resize\" === u1, c1 = l1, p1 = \"nearest\" === i1 && n1 >= 11 ? e1.attributes.getString(\"nearest_mode\", \"round_prefer_floor\") : \"\";\n                if (-1 === [\n                    \"round_prefer_floor\",\n                    \"round_prefer_ceil\",\n                    \"floor\",\n                    \"ceil\",\n                    \"\"\n                ].indexOf(p1)) throw new Error(`nearest_mode '${p1}' is not supported`);\n                const d1 = e1.attributes.getFloat(\"cubic_coeff_a\", -.75), f1 = 0 !== e1.attributes.getInt(\"exclude_outside\", 0);\n                if (f1 && \"cubic\" !== i1) throw new Error(\"exclude_outside can be set to 1 only when mode is CUBIC.\");\n                const h1 = n1 < 11 || \"nearest\" === i1 && \"asymmetric\" === u1 && \"floor\" === p1;\n                let g1 = 0, b1 = 0, m1 = 0;\n                return n1 > 10 ? e1.inputs.length > 2 ? (g1 = 1, b1 = 2, m1 = 3) : (b1 = 1, m1 = 2) : 9 === n1 && (b1 = 1), (0, r1.createAttributeWithCacheKey)({\n                    opset: n1,\n                    isResize: o1,\n                    mode: i1,\n                    scales: s1,\n                    extrapolationValue: a1,\n                    coordinateTransformMode: u1,\n                    useExtrapolation: c1,\n                    needRoiInput: l1,\n                    nearestMode: p1,\n                    cubicCoefficientA: d1,\n                    excludeOutside: f1,\n                    useNearest2xOptimization: h1,\n                    roiInputIdx: g1,\n                    scalesInputIdx: b1,\n                    sizesInputIdx: m1\n                });\n            };\n            const a1 = (e1, t1, n1)=>{\n                const r1 = (0, o1.getGlsl)(e1.session.backend.glContext.version), [a1, u1] = e1.calculateTextureWidthAndHeight(t1[0].dims, i1.TextureType.unpacked), l1 = t1[0].dims.map((e1, t1)=>Math.floor(e1 * n1.scales[t1])), [c1, p1] = e1.calculateTextureWidthAndHeight(l1, i1.TextureType.unpacked), d1 = l1.length, f1 = new Array(d1), h1 = new Array(d1);\n                let g1 = `\\n      int output_pitches[${d1}];\\n      int input_pitches[${d1}];\\n      `;\n                for(let e1 = d1 - 1; e1 >= 0; e1--)f1[e1] = e1 === d1 - 1 ? 1 : f1[e1 + 1] * l1[e1 + 1], h1[e1] = e1 === d1 - 1 ? 1 : h1[e1 + 1] * t1[0].dims[e1 + 1], g1 += `\\n        output_pitches[${e1}] = ${f1[e1]};\\n        input_pitches[${e1}] = ${h1[e1]};\\n        `;\n                const b1 = `\\n      float getInputFloat(int index) {\\n        vec2 coords = offsetToCoords(index, ${a1}, ${u1});\\n        float value = getColorAsFloat(${r1.texture2D}(X, coords));\\n        return value;\\n      }\\n      `, m1 = \"nearest\" === n1.mode ? `\\n    ${b1}\\n    float process(int indices[${d1}]) {\\n      int input_index = 0;\\n      int output_index = coordsToOffset(TexCoords, ${c1}, ${p1});\\n\\n      ${g1}\\n\\n      int d, m;\\n      for (int dim = 0; dim < ${d1}; ++dim) {\\n        d = output_index / output_pitches[dim];\\n        m = output_index - d * output_pitches[dim];\\n        output_index = m;\\n\\n        if (scales[dim] != 1 && d > 0) {\\n          int d2 = d / scales[dim];\\n          m = d - d2 * scales[dim];\\n          d = d2;\\n        }\\n        input_index += input_pitches[dim] * d;\\n      }\\n\\n      return getInputFloat(input_index);\\n    }` : 4 === d1 ? `\\n    ${b1}\\n    float process(int indices[4]) {\\n      int input_index = 0;\\n      int output_index = coordsToOffset(TexCoords, ${c1}, ${p1});\\n\\n      ${g1}\\n\\n      int m;\\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\\n      index_of_dim0 = output_index / output_pitches[0];\\n      m = output_index - index_of_dim0 * output_pitches[0];\\n      index_of_dim1 = m / output_pitches[1];\\n      m = m - index_of_dim1 * output_pitches[1];\\n      index_of_dim2 = m / output_pitches[2];\\n      m = m - index_of_dim2 * output_pitches[2];\\n      index_of_dim3 = m;\\n\\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\\n      index_of_input_dim2 = index_of_dim2 / scales[2];\\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\\n      index_of_input_dim3 = index_of_dim3 / scales[3];\\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\\n\\n      input_index = index_of_dim0 * input_pitches[0] +\\n            index_of_dim1 * input_pitches[1] +\\n            index_of_input_dim2 * input_pitches[2] +\\n            index_of_input_dim3;\\n\\n      float x00 = getInputFloat(input_index);\\n      float x10, x01, x11;\\n\\n      bool end_of_dim2 = false;\\n      if (index_of_input_dim2 == (${t1[0].dims[2]} - 1)) {\\n        // It's the end in dimension 2\\n        x01 = x00;\\n        end_of_dim2 = true;\\n      } else {\\n        x01 = getInputFloat(input_index + input_pitches[2]);\\n      }\\n\\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\\n        // It's the end in dimension 3\\n        x10 = x00;\\n        x11 = x01;\\n      }\\n      else {\\n        x10 = getInputFloat(input_index + 1);\\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\\n      }\\n\\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\\n    }` : `\\n    ${b1}\\n    float process(int indices[2]) {\\n      int input_index = 0;\\n      int output_index = coordsToOffset(TexCoords, ${c1}, ${p1});\\n\\n      ${g1}\\n\\n      int m;\\n      int index_of_dim0, index_of_dim1;\\n      index_of_dim0 = output_index / output_pitches[0];\\n      m = output_index - index_of_dim0 * output_pitches[0];\\n      index_of_dim1 = m;\\n\\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\\n      index_of_input_dim0 = index_of_dim0 / scales[0];\\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\\n      index_of_input_dim1 = index_of_dim1 / scales[1];\\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\\n\\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\\n\\n      float x00 = getInputFloat(input_index);\\n      float x10, x01, x11;\\n\\n      bool end_of_dim0 = false;\\n      if (index_of_input_dim0 == (${t1[0].dims[0]} - 1)) {\\n        // It's the end in dimension 0\\n        x01 = x00;\\n        end_of_dim0 = true;\\n      } else {\\n        x01 = getInputFloat(input_index + input_pitches[0]);\\n      }\\n\\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\\n        // It's the end in dimension 1\\n        x10 = x00;\\n        x11 = x01;\\n      }\\n      else {\\n        x10 = getInputFloat(input_index + 1);\\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\\n      }\\n\\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\\n    }`;\n                return Object.assign(Object.assign({}, s1), {\n                    output: {\n                        dims: l1,\n                        type: t1[0].type,\n                        textureType: i1.TextureType.unpacked\n                    },\n                    shaderSource: m1,\n                    variables: [\n                        {\n                            name: \"scales\",\n                            type: \"int\",\n                            arrayLength: n1.scales.length,\n                            data: n1.scales.map((e1)=>Math.ceil(e1))\n                        }\n                    ]\n                });\n            };\n            t1.validateInputs = (e1, t1)=>{\n                if (!e1 || t1.opset < 9 && 1 !== e1.length || t1.opset >= 9 && t1.opset < 11 && 2 !== e1.length || t1.opset >= 11 && e1.length < 2) throw new Error(\"invalid inputs.\");\n                if (t1.scales.length > 0 && e1[0].dims.length !== t1.scales.length) throw new Error(\"Invalid input shape.\");\n                if (\"string\" === e1[0].type) throw new Error(\"Invalid input tensor types.\");\n            }, t1.scalesValidation = (e1, t1, n1)=>{\n                if (n1) {\n                    for (const t1 of e1)if (t1 <= 0) throw new Error(\"Scale value should be greater than 0.\");\n                } else for (const t1 of e1)if (t1 < 1) throw new Error(\"Scale value should be greater than or equal to 1.\");\n                if (!(\"linear\" !== t1 && \"cubic\" !== t1 || 2 === e1.length || 4 === e1.length && 1 === e1[0] && 1 === e1[1])) throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the ${n1 ? \"Resize\" : \"Upsample\"} opeartor.`);\n            };\n        },\n        2757: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.ProgramManager = void 0;\n            const r1 = n1(6207), o1 = n1(1315), i1 = n1(8897), s1 = n1(6757);\n            t1.ProgramManager = class {\n                constructor(e1, t1, n1){\n                    this.profiler = e1, this.glContext = t1, this.textureLayoutStrategy = n1, this.repo = new Map, this.attributesBound = !1;\n                }\n                getArtifact(e1) {\n                    return this.repo.get(e1);\n                }\n                setArtifact(e1, t1) {\n                    this.repo.set(e1, t1);\n                }\n                run(e1, t1, n1) {\n                    var r1;\n                    this.profiler.event(\"op\", `ProgramManager.run ${null !== (r1 = e1.programInfo.name) && void 0 !== r1 ? r1 : \"unknown kernel\"}`, ()=>{\n                        var r1;\n                        const i1 = this.glContext.gl, s1 = e1.program;\n                        i1.useProgram(s1);\n                        try {\n                            this.bindOutput(n1), this.attributesBound || this.bindAttributes(e1.attribLocations), this.bindUniforms(e1.uniformLocations, null !== (r1 = e1.programInfo.variables) && void 0 !== r1 ? r1 : [], t1);\n                        } catch (t1) {\n                            throw o1.Logger.error(\"ProgramManager\", e1.programInfo.shaderSource), t1;\n                        }\n                        this.profiler.event(\"backend\", \"GlContext.draw()\", ()=>{\n                            this.glContext.draw();\n                        });\n                    }, this.glContext);\n                }\n                dispose() {\n                    this.vertexShader && this.glContext.deleteShader(this.vertexShader), this.repo.forEach((e1)=>this.glContext.deleteProgram(e1.program));\n                }\n                build(e1, t1, n1) {\n                    return this.profiler.event(\"backend\", \"ProgramManager.build\", ()=>{\n                        const r1 = new i1.GlslPreprocessor(this.glContext, e1, t1, n1), o1 = r1.preprocess(), s1 = this.compile(o1);\n                        return {\n                            programInfo: e1,\n                            program: s1,\n                            uniformLocations: this.getUniformLocations(s1, r1.context.programInfo.inputNames, r1.context.programInfo.variables),\n                            attribLocations: this.getAttribLocations(s1)\n                        };\n                    });\n                }\n                compile(e1) {\n                    if (!this.vertexShader) {\n                        o1.Logger.verbose(\"ProrgramManager\", \"Compiling and caching Vertex shader for the first time\");\n                        const e1 = (0, s1.getVertexShaderSource)(this.glContext.version);\n                        this.vertexShader = this.glContext.compileShader(e1, this.glContext.gl.VERTEX_SHADER);\n                    }\n                    r1.env.debug && o1.Logger.verbose(\"ProrgramManager\", `FragShader:\\n${e1}\\n`);\n                    const t1 = this.glContext.compileShader(e1, this.glContext.gl.FRAGMENT_SHADER), n1 = this.glContext.createProgram(this.vertexShader, t1);\n                    return this.glContext.deleteShader(t1), n1;\n                }\n                bindOutput(e1) {\n                    const t1 = e1.width, n1 = e1.height;\n                    o1.Logger.verbose(\"ProrgramManager\", `Binding output texture to Framebuffer: w/h=${t1}/${n1}, shape=${e1.shape}, type=${e1.tensor.type}`), this.glContext.attachFramebuffer(e1.texture, t1, n1);\n                }\n                bindAttributes(e1) {\n                    const t1 = e1.position, n1 = e1.textureCoord;\n                    this.glContext.setVertexAttributes(t1, n1), this.attributesBound = !0;\n                }\n                bindUniforms(e1, t1, n1) {\n                    var r1;\n                    const o1 = this.glContext.gl;\n                    let i1 = 0;\n                    for (const { name: s1, type: a1, location: u1, arrayLength: l1 } of e1){\n                        const e1 = null === (r1 = t1.find((e1)=>e1.name === s1)) || void 0 === r1 ? void 0 : r1.data;\n                        if (\"sampler2D\" !== a1 && !e1) throw new Error(`variable '${s1}' does not have data defined in program info`);\n                        switch(a1){\n                            case \"sampler2D\":\n                                this.bindTexture(n1[i1], u1, i1), i1++;\n                                break;\n                            case \"float\":\n                                l1 ? o1.uniform1fv(u1, e1) : o1.uniform1f(u1, e1);\n                                break;\n                            case \"int\":\n                                l1 ? o1.uniform1iv(u1, e1) : o1.uniform1i(u1, e1);\n                                break;\n                            default:\n                                throw new Error(`Uniform not implemented: ${a1}`);\n                        }\n                    }\n                }\n                bindTexture(e1, t1, n1) {\n                    this.glContext.bindTextureToUniform(e1.texture, n1, t1);\n                }\n                getAttribLocations(e1) {\n                    return {\n                        position: this.getAttribLocation(e1, \"position\"),\n                        textureCoord: this.getAttribLocation(e1, \"textureCoord\")\n                    };\n                }\n                getUniformLocations(e1, t1, n1) {\n                    const r1 = [];\n                    if (t1) for (const n1 of t1)r1.push({\n                        name: n1,\n                        type: \"sampler2D\",\n                        location: this.getUniformLocation(e1, n1)\n                    });\n                    if (n1) for (const t1 of n1)r1.push(Object.assign(Object.assign({}, t1), {\n                        location: this.getUniformLocation(e1, t1.name)\n                    }));\n                    return r1;\n                }\n                getUniformLocation(e1, t1) {\n                    const n1 = this.glContext.gl.getUniformLocation(e1, t1);\n                    if (null === n1) throw new Error(`Uniform ${t1} not found.`);\n                    return n1;\n                }\n                getAttribLocation(e1, t1) {\n                    return this.glContext.gl.getAttribLocation(e1, t1);\n                }\n            };\n        },\n        2171: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.WebGLSessionHandler = void 0;\n            const r1 = n1(1315), o1 = n1(5881), i1 = n1(7860), s1 = n1(4110), a1 = n1(2757), u1 = n1(7618), l1 = n1(5243);\n            t1.WebGLSessionHandler = class {\n                constructor(e1, t1){\n                    this.backend = e1, this.context = t1, this.layoutStrategy = new u1.PreferLogicalStrategy(e1.glContext.maxTextureSize), this.programManager = new a1.ProgramManager(this.context.profiler, e1.glContext, this.layoutStrategy), this.textureManager = new l1.TextureManager(e1.glContext, this.layoutStrategy, this.context.profiler, {\n                        reuseTextures: \"full\" === e1.textureCacheMode\n                    }), this.packedTextureDataCache = new Map, this.unpackedTextureDataCache = new Map, this.pack = e1.pack, this.pack2unpackMap = new Map, this.unpack2packMap = new Map;\n                }\n                createInferenceHandler() {\n                    return new i1.WebGLInferenceHandler(this);\n                }\n                onGraphInitialized(e1) {\n                    const t1 = e1.getValues().filter((e1)=>-1 === e1.from && e1.tensor).map((e1)=>e1.tensor.dataId);\n                    this.initializers = new Set(t1);\n                }\n                isInitializer(e1) {\n                    return !!this.initializers && this.initializers.has(e1);\n                }\n                addInitializer(e1) {\n                    this.initializers.add(e1);\n                }\n                getTextureData(e1, t1) {\n                    return t1 ? this.packedTextureDataCache.get(e1) : this.unpackedTextureDataCache.get(e1);\n                }\n                setTextureData(e1, t1, n1 = !1) {\n                    r1.Logger.verbose(\"WebGLSessionHandler\", \"Storing Texture data in cache\"), n1 ? this.packedTextureDataCache.set(e1, t1) : this.unpackedTextureDataCache.set(e1, t1);\n                }\n                dispose() {\n                    this.programManager.dispose(), this.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((e1)=>this.textureManager.releaseTexture(e1, !0)), this.packedTextureDataCache = new Map, this.unpackedTextureDataCache.forEach((e1)=>this.textureManager.releaseTexture(e1, !0)), this.unpackedTextureDataCache = new Map;\n                }\n                resolve(e1, t1, n1) {\n                    const r1 = (0, o1.resolveOperator)(e1, t1, s1.WEBGL_OP_RESOLVE_RULES);\n                    return {\n                        impl: r1.opImpl,\n                        context: r1.opInit ? r1.opInit(e1, n1) : e1\n                    };\n                }\n            };\n        },\n        9622: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.Uint8DataEncoder = t1.RGBAFloatDataEncoder = t1.RedFloat32DataEncoder = void 0;\n            const r1 = n1(1315);\n            t1.RedFloat32DataEncoder = class {\n                constructor(e1, t1 = 1){\n                    if (1 === t1) this.internalFormat = e1.R32F, this.format = e1.RED, this.textureType = e1.FLOAT, this.channelSize = t1;\n                    else {\n                        if (4 !== t1) throw new Error(`Invalid number of channels: ${t1}`);\n                        this.internalFormat = e1.RGBA32F, this.format = e1.RGBA, this.textureType = e1.FLOAT, this.channelSize = t1;\n                    }\n                }\n                encode(e1, t1) {\n                    let n1, o1;\n                    return e1.constructor !== Float32Array && (r1.Logger.warning(\"Encoder\", \"data was not of type Float32; creating new Float32Array\"), o1 = new Float32Array(e1)), t1 * this.channelSize > e1.length ? (r1.Logger.warning(\"Encoder\", \"Source data too small. Allocating larger array\"), o1 = e1, n1 = this.allocate(t1 * this.channelSize), o1.forEach((e1, t1)=>n1[t1] = e1)) : (o1 = e1, n1 = o1), n1;\n                }\n                allocate(e1) {\n                    return new Float32Array(4 * e1);\n                }\n                decode(e1, t1) {\n                    return 1 === this.channelSize ? e1.filter((e1, t1)=>t1 % 4 == 0).subarray(0, t1) : e1.subarray(0, t1);\n                }\n            }, t1.RGBAFloatDataEncoder = class {\n                constructor(e1, t1 = 1, n1){\n                    if (1 !== t1 && 4 !== t1) throw new Error(`Invalid number of channels: ${t1}`);\n                    this.internalFormat = e1.RGBA, this.format = e1.RGBA, this.channelSize = t1, this.textureType = n1 || e1.FLOAT;\n                }\n                encode(e1, t1) {\n                    let n1 = e1;\n                    return 1 === this.channelSize && (r1.Logger.verbose(\"Encoder\", \"Exploding into a larger array\"), n1 = this.allocate(t1), e1.forEach((e1, t1)=>n1[4 * t1] = e1)), n1;\n                }\n                allocate(e1) {\n                    return new Float32Array(4 * e1);\n                }\n                decode(e1, t1) {\n                    return 1 === this.channelSize ? e1.filter((e1, t1)=>t1 % 4 == 0).subarray(0, t1) : e1.subarray(0, t1);\n                }\n            }, t1.Uint8DataEncoder = class {\n                constructor(e1, t1 = 1){\n                    if (this.channelSize = 4, 1 === t1) this.internalFormat = e1.ALPHA, this.format = e1.ALPHA, this.textureType = e1.UNSIGNED_BYTE, this.channelSize = t1;\n                    else {\n                        if (4 !== t1) throw new Error(`Invalid number of channels: ${t1}`);\n                        this.internalFormat = e1.RGBA, this.format = e1.RGBA, this.textureType = e1.UNSIGNED_BYTE, this.channelSize = t1;\n                    }\n                }\n                encode(e1, t1) {\n                    return new Uint8Array(e1.buffer, e1.byteOffset, e1.byteLength);\n                }\n                allocate(e1) {\n                    return new Uint8Array(e1 * this.channelSize);\n                }\n                decode(e1, t1) {\n                    if (e1 instanceof Uint8Array) return e1.subarray(0, t1);\n                    throw new Error(`Invalid array type: ${e1.constructor}`);\n                }\n            };\n        },\n        7618: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.getBatchDim = t1.sizeToSquarishShape = t1.getRowsCols = t1.sizeFromShape = t1.isInt = t1.parseAxisParam = t1.squeezeShape = t1.PreferLogicalStrategy = t1.AlwaysKeepOriginalSizeStrategy = void 0;\n            const r1 = n1(1315), o1 = n1(7273);\n            function i1(e1, t1) {\n                const n1 = [], r1 = [], o1 = null != t1 && Array.isArray(t1) && 0 === t1.length, i1 = null == t1 || o1 ? null : s1(t1, e1).sort();\n                let a1 = 0;\n                for(let t1 = 0; t1 < e1.length; ++t1){\n                    if (null != i1) {\n                        if (i1[a1] === t1 && 1 !== e1[t1]) throw new Error(`Can't squeeze axis ${t1} since its dim '${e1[t1]}' is not 1`);\n                        (null == i1[a1] || i1[a1] > t1) && 1 === e1[t1] && (n1.push(e1[t1]), r1.push(t1)), i1[a1] <= t1 && a1++;\n                    }\n                    1 !== e1[t1] && (n1.push(e1[t1]), r1.push(t1));\n                }\n                return {\n                    newShape: n1,\n                    keptDims: r1\n                };\n            }\n            function s1(e1, t1) {\n                const n1 = t1.length;\n                return e1 = null == e1 ? t1.map((e1, t1)=>t1) : [].concat(e1), (0, o1.assert)(e1.every((e1)=>e1 >= -n1 && e1 < n1), ()=>`All values in axis param must be in range [-${n1}, ${n1}) but got axis ${e1}`), (0, o1.assert)(e1.every(a1), ()=>`All values in axis param must be integers but got axis ${e1}`), e1.map((e1)=>e1 < 0 ? n1 + e1 : e1);\n            }\n            function a1(e1) {\n                return e1 % 1 == 0;\n            }\n            function u1(e1) {\n                if (0 === e1.length) return 1;\n                let t1 = e1[0];\n                for(let n1 = 1; n1 < e1.length; n1++)t1 *= e1[n1];\n                return t1;\n            }\n            function l1(e1) {\n                const t1 = Math.ceil(Math.sqrt(e1));\n                return [\n                    t1,\n                    Math.ceil(e1 / t1)\n                ];\n            }\n            t1.AlwaysKeepOriginalSizeStrategy = class {\n                constructor(e1){\n                    this.maxTextureSize = e1;\n                }\n                computeTextureWH(e1, t1) {\n                    if (0 === e1.length) return [\n                        1,\n                        1\n                    ];\n                    const n1 = this.maxTextureSize;\n                    if (t1 && void 0 !== t1.breakAxis) {\n                        const o1 = t1.breakAxis >= e1.length ? 1 : e1.slice(t1.breakAxis).reduce((e1, t1)=>e1 * t1), i1 = t1.breakAxis <= 0 ? 1 : e1.slice(0, t1.breakAxis).reduce((e1, t1)=>e1 * t1);\n                        if (!(o1 > n1 || i1 > n1)) return [\n                            o1,\n                            i1\n                        ];\n                        r1.Logger.verbose(\"TextureLayout\", `Given width/height preferences were unattainable: shape:${e1}, breakAxis:${t1.breakAxis}`);\n                    }\n                    const o1 = e1.reduce((e1, t1)=>e1 * t1);\n                    let i1 = Math.floor(Math.sqrt(o1));\n                    for(; i1 < n1 && i1 < o1 && o1 % i1 != 0; i1++);\n                    if (i1 >= n1 || o1 % i1 != 0) throw new Error(`The given dimensions are outside this GPU's boundaries: ${e1}`);\n                    return [\n                        i1,\n                        o1 / i1\n                    ];\n                }\n            }, t1.PreferLogicalStrategy = class {\n                constructor(e1){\n                    this.maxTextureSize = e1;\n                }\n                computeTextureWH(e1, t1) {\n                    const n1 = this.computeTexture(e1, t1);\n                    return t1 && t1.isPacked && (n1[0] /= 2, n1[1] /= 2), t1 && t1.reverseWH ? [\n                        n1[1],\n                        n1[0]\n                    ] : n1;\n                }\n                computeTexture(e1, t1) {\n                    const n1 = t1 && t1.isPacked;\n                    if (0 === e1.length) return n1 ? [\n                        2,\n                        2\n                    ] : [\n                        1,\n                        1\n                    ];\n                    let o1 = this.maxTextureSize;\n                    if (t1 && void 0 !== t1.breakAxis) {\n                        const n1 = t1.breakAxis >= e1.length ? 1 : e1.slice(t1.breakAxis).reduce((e1, t1)=>e1 * t1), i1 = t1.breakAxis <= 0 ? 1 : e1.slice(0, t1.breakAxis).reduce((e1, t1)=>e1 * t1);\n                        if (!(n1 > o1 || i1 > o1)) return [\n                            n1,\n                            i1\n                        ];\n                        r1.Logger.verbose(\"TextureLayout\", `Given width/height preferences were unattainable: shape:${e1}, breakAxis:${t1.breakAxis}`);\n                    }\n                    let s1 = e1.slice(0);\n                    if (n1 && (o1 *= 2, s1 = s1.map((e1, t1)=>t1 >= s1.length - 2 ? s1[t1] % 2 == 0 ? s1[t1] : s1[t1] + 1 : s1[t1]), 1 === s1.length && (s1 = [\n                        2,\n                        s1[0]\n                    ])), 2 !== s1.length) {\n                        const e1 = i1(s1);\n                        s1 = e1.newShape;\n                    }\n                    const a1 = u1(s1);\n                    return s1.length <= 1 && a1 <= o1 ? [\n                        1,\n                        a1\n                    ] : 2 === s1.length && s1[0] <= o1 && s1[1] <= o1 ? s1 : 3 === s1.length && s1[0] * s1[1] <= o1 && s1[2] <= o1 ? [\n                        s1[0] * s1[1],\n                        s1[2]\n                    ] : 3 === s1.length && s1[0] <= o1 && s1[1] * s1[2] <= o1 ? [\n                        s1[0],\n                        s1[1] * s1[2]\n                    ] : 4 === s1.length && s1[0] * s1[1] * s1[2] <= o1 && s1[3] <= o1 ? [\n                        s1[0] * s1[1] * s1[2],\n                        s1[3]\n                    ] : 4 === s1.length && s1[0] <= o1 && s1[1] * s1[2] * s1[3] <= o1 ? [\n                        s1[0],\n                        s1[1] * s1[2] * s1[3]\n                    ] : n1 ? l1(a1 / 4).map((e1)=>2 * e1) : l1(a1);\n                }\n            }, t1.squeezeShape = i1, t1.parseAxisParam = s1, t1.isInt = a1, t1.sizeFromShape = u1, t1.getRowsCols = function(e1) {\n                if (0 === e1.length) throw Error(\"Cannot get rows and columns of an empty shape array.\");\n                return [\n                    e1.length > 1 ? e1[e1.length - 2] : 1,\n                    e1[e1.length - 1]\n                ];\n            }, t1.sizeToSquarishShape = l1, t1.getBatchDim = function(e1, t1 = 2) {\n                return u1(e1.slice(0, e1.length - t1));\n            };\n        },\n        3314: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createTextureLayoutFromShape = t1.calculateTextureWidthAndHeight = t1.createTextureLayoutFromTextureType = void 0;\n            const r1 = n1(7273), o1 = n1(5639);\n            t1.createTextureLayoutFromTextureType = (e1, n1, r1)=>{\n                const i1 = r1 === o1.TextureType.unpacked || r1 === o1.TextureType.unpackedReversed ? 1 : 4, s1 = r1 === o1.TextureType.packed, a1 = r1 === o1.TextureType.unpackedReversed || r1 === o1.TextureType.packed, u1 = r1 === o1.TextureType.packedLastDimension ? n1.length - 1 : void 0, l1 = r1 === o1.TextureType.packedLastDimension ? n1.map((e1, t1)=>t1 === n1.length - 1 ? 4 * e1 : e1) : void 0;\n                return (0, t1.createTextureLayoutFromShape)(e1, n1, i1, l1, {\n                    isPacked: s1,\n                    reverseWH: a1,\n                    breakAxis: u1\n                });\n            }, t1.calculateTextureWidthAndHeight = (e1, n1, r1)=>{\n                const o1 = (0, t1.createTextureLayoutFromTextureType)(e1, n1, r1);\n                return [\n                    o1.width,\n                    o1.height\n                ];\n            }, t1.createTextureLayoutFromShape = (e1, t1, n1 = 1, o1, i1)=>{\n                const s1 = !(!i1 || !i1.isPacked), [a1, u1] = e1.computeTextureWH(s1 && o1 || t1, i1), l1 = t1.length;\n                let c1 = t1.slice(0);\n                if (0 === l1 && (c1 = [\n                    1\n                ]), 1 === n1) o1 = t1;\n                else if (s1) {\n                    if (4 !== n1) throw new Error(\"a packed texture must be 4-channel\");\n                    o1 = t1, l1 > 0 && (c1[l1 - 1] = Math.ceil(c1[l1 - 1] / 2)), l1 > 1 && (c1[l1 - 2] = Math.ceil(c1[l1 - 2] / 2));\n                } else if (!o1) throw new Error(\"Unpacked shape is needed when using channels > 1\");\n                return {\n                    width: a1,\n                    height: u1,\n                    channels: n1,\n                    isPacked: s1,\n                    shape: c1,\n                    strides: r1.ShapeUtil.computeStrides(c1),\n                    unpackedShape: o1,\n                    reversedWH: i1 && i1.reverseWH\n                };\n            };\n        },\n        5243: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.TextureManager = void 0;\n            const r1 = n1(1315);\n            t1.TextureManager = class {\n                constructor(e1, t1, n1, r1){\n                    this.glContext = e1, this.layoutStrategy = t1, this.profiler = n1, this.config = r1, this.pendingRead = new Map, r1.reuseTextures && (this.inUseTextures = new Map, this.idleTextures = new Map, this.textureLookup = new Map);\n                }\n                createTextureFromLayout(e1, t1, n1, o1) {\n                    const i1 = this.toEncoderType(e1), s1 = this.glContext.getEncoder(i1, t1.channels || 1, o1);\n                    if (t1.isPacked && 1 === o1) throw new Error(\"not implemented\");\n                    const a1 = t1.width, u1 = t1.height;\n                    let l1, c1;\n                    if (this.config.reuseTextures) {\n                        l1 = `${a1}x${u1}_${s1.format}_${s1.internalFormat}_${s1.textureType}`, c1 = this.inUseTextures.get(l1), c1 || (c1 = [], this.inUseTextures.set(l1, c1));\n                        const t1 = this.idleTextures.get(l1);\n                        if (t1 && t1.length > 0) {\n                            const r1 = t1.pop();\n                            return c1.push(r1), 1 === o1 && this.glContext.updateTexture(r1, a1, u1, s1, this.toTextureData(e1, n1)), r1;\n                        }\n                    }\n                    r1.Logger.verbose(\"TextureManager\", `Creating new texture of size ${t1.width}x${t1.height}`);\n                    const p1 = this.glContext.allocateTexture(a1, u1, s1, this.toTextureData(e1, n1));\n                    return this.config.reuseTextures && (c1.push(p1), this.textureLookup.set(p1, l1)), p1;\n                }\n                readTexture(e1, t1, n1) {\n                    return n1 || (n1 = 1), this.profiler.event(\"backend\", \"TextureManager.readTexture\", ()=>{\n                        const r1 = e1.shape.reduce((e1, t1)=>e1 * t1) * n1, o1 = this.glContext.readTexture(e1.texture, e1.width, e1.height, r1, this.toEncoderType(t1), n1);\n                        return this.toTensorData(t1, o1);\n                    });\n                }\n                async readTextureAsync(e1, t1, n1) {\n                    const r1 = e1.tensor.dataId;\n                    if (n1 || (n1 = 1), this.pendingRead.has(r1)) {\n                        const e1 = this.pendingRead.get(r1);\n                        return new Promise((t1)=>null == e1 ? void 0 : e1.push(t1));\n                    }\n                    return this.profiler.event(\"backend\", \"TextureManager.readTextureAsync\", async ()=>{\n                        this.pendingRead.set(r1, []);\n                        const o1 = e1.shape.reduce((e1, t1)=>e1 * t1) * n1;\n                        await this.glContext.createAndWaitForFence();\n                        const i1 = this.glContext.readTexture(e1.texture, e1.width, e1.height, o1, this.toEncoderType(t1), n1), s1 = this.toTensorData(t1, i1), a1 = this.pendingRead.get(r1);\n                        return this.pendingRead.delete(r1), null == a1 || a1.forEach((e1)=>e1(s1)), s1;\n                    });\n                }\n                readUint8TextureAsFloat(e1) {\n                    return this.profiler.event(\"backend\", \"TextureManager.readUint8TextureAsFloat\", ()=>{\n                        const t1 = e1.shape.reduce((e1, t1)=>e1 * t1), n1 = this.glContext.readTexture(e1.texture, e1.width, e1.height, 4 * t1, \"byte\", 4);\n                        return new Float32Array(n1.buffer, n1.byteOffset, t1);\n                    });\n                }\n                releaseTexture(e1, t1) {\n                    let n1;\n                    if (this.config.reuseTextures && (n1 = this.textureLookup.get(e1.texture), n1)) {\n                        t1 && this.textureLookup.delete(n1);\n                        const r1 = this.inUseTextures.get(n1);\n                        if (r1) {\n                            const t1 = r1.indexOf(e1.texture);\n                            if (-1 !== t1) {\n                                r1.splice(t1, 1);\n                                let o1 = this.idleTextures.get(n1);\n                                o1 || (o1 = [], this.idleTextures.set(n1, o1)), o1.push(e1.texture);\n                            }\n                        }\n                    }\n                    n1 && !t1 || (r1.Logger.verbose(\"TextureManager\", `Deleting texture of size ${e1.width}x${e1.height}`), this.glContext.deleteTexture(e1.texture));\n                }\n                toTensorData(e1, t1) {\n                    switch(e1){\n                        case \"int16\":\n                            return t1 instanceof Int16Array ? t1 : Int16Array.from(t1);\n                        case \"int32\":\n                            return t1 instanceof Int32Array ? t1 : Int32Array.from(t1);\n                        case \"int8\":\n                            return t1 instanceof Int8Array ? t1 : Int8Array.from(t1);\n                        case \"uint16\":\n                            return t1 instanceof Uint16Array ? t1 : Uint16Array.from(t1);\n                        case \"uint32\":\n                            return t1 instanceof Uint32Array ? t1 : Uint32Array.from(t1);\n                        case \"uint8\":\n                        case \"bool\":\n                            return t1 instanceof Uint8Array ? t1 : Uint8Array.from(t1);\n                        case \"float32\":\n                            return t1 instanceof Float32Array ? t1 : Float32Array.from(t1);\n                        case \"float64\":\n                            return t1 instanceof Float64Array ? t1 : Float64Array.from(t1);\n                        default:\n                            throw new Error(`TensorData type ${e1} is not supported`);\n                    }\n                }\n                toTextureData(e1, t1) {\n                    if (t1) return t1 instanceof Float32Array ? t1 : new Float32Array(t1);\n                }\n                toEncoderType(e1) {\n                    return \"float\";\n                }\n                clearActiveTextures() {\n                    this.glContext.clearActiveTextures();\n                }\n            };\n        },\n        5639: (e1, t1)=>{\n            \"use strict\";\n            var n1;\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.TextureType = void 0, (n1 = t1.TextureType || (t1.TextureType = {}))[n1.unpacked = 0] = \"unpacked\", n1[n1.unpackedReversed = 1] = \"unpackedReversed\", n1[n1.packed = 2] = \"packed\", n1[n1.downloadUint8AsFloat = 3] = \"downloadUint8AsFloat\", n1[n1.packedLastDimension = 4] = \"packedLastDimension\";\n        },\n        432: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.getGlChannels = t1.getCoordsDataType = t1.getSqueezedParams = t1.squeezeInputShape = t1.generateShaderFuncNameFromInputSamplerNameAtOutCoords = t1.generateShaderFuncNameFromInputSamplerName = t1.repeatedTry = t1.getPackedShape = void 0;\n            const r1 = n1(7273);\n            t1.getPackedShape = function(e1) {\n                const t1 = e1.length;\n                return e1.slice(0, t1 - 1).concat(e1[t1 - 1] / 4);\n            }, t1.repeatedTry = async function(e1, t1 = (e1)=>0, n1) {\n                return new Promise((r1, o1)=>{\n                    let i1 = 0;\n                    const s1 = ()=>{\n                        if (e1()) return void r1();\n                        i1++;\n                        const a1 = t1(i1);\n                        null != n1 && i1 >= n1 ? o1() : setTimeout(s1, a1);\n                    };\n                    s1();\n                });\n            }, t1.generateShaderFuncNameFromInputSamplerName = function(e1) {\n                return (0, r1.assert)(void 0 !== e1 && 0 !== e1.length, ()=>\"empty string found for sampler name\"), \"get\" + e1.charAt(0).toUpperCase() + e1.slice(1);\n            }, t1.generateShaderFuncNameFromInputSamplerNameAtOutCoords = function(e1) {\n                return (0, r1.assert)(void 0 !== e1 && 0 !== e1.length, ()=>\"empty string found for sampler name\"), \"get\" + e1.charAt(0).toUpperCase() + e1.slice(1) + \"AtOutCoords\";\n            }, t1.squeezeInputShape = function(e1, t1) {\n                let n1 = JSON.parse(JSON.stringify(e1));\n                return n1 = t1, n1;\n            }, t1.getSqueezedParams = function(e1, t1) {\n                return t1.map((t1)=>e1[t1]).join(\", \");\n            }, t1.getCoordsDataType = function(e1) {\n                if (e1 <= 1) return \"int\";\n                if (2 === e1) return \"ivec2\";\n                if (3 === e1) return \"ivec3\";\n                if (4 === e1) return \"ivec4\";\n                if (5 === e1) return \"ivec5\";\n                if (6 === e1) return \"ivec6\";\n                throw Error(`GPU for rank ${e1} is not yet supported`);\n            }, t1.getGlChannels = function(e1 = 6) {\n                return [\n                    \"x\",\n                    \"y\",\n                    \"z\",\n                    \"w\",\n                    \"u\",\n                    \"v\"\n                ].slice(0, e1);\n            };\n        },\n        3389: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.createNewWebGLContext = t1.createWebGLContext = void 0;\n            const r1 = n1(1315), o1 = n1(3524), i1 = {};\n            function s1(e1, t1) {\n                let n1;\n                const i1 = {\n                    alpha: !1,\n                    depth: !1,\n                    antialias: !1,\n                    stencil: !1,\n                    preserveDrawingBuffer: !1,\n                    premultipliedAlpha: !1,\n                    failIfMajorPerformanceCaveat: !1\n                };\n                if ((!t1 || \"webgl2\" === t1) && (n1 = e1.getContext(\"webgl2\", i1), n1)) try {\n                    return new o1.WebGLContext(n1, 2);\n                } catch (e1) {\n                    r1.Logger.warning(\"GlContextFactory\", `failed to create WebGLContext using contextId 'webgl2'. Error: ${e1}`);\n                }\n                if ((!t1 || \"webgl\" === t1) && (n1 = e1.getContext(\"webgl\", i1) || e1.getContext(\"experimental-webgl\", i1), n1)) try {\n                    return new o1.WebGLContext(n1, 1);\n                } catch (e1) {\n                    r1.Logger.warning(\"GlContextFactory\", `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${e1}`);\n                }\n                throw new Error(\"WebGL is not supported\");\n            }\n            t1.createWebGLContext = function e1(t1) {\n                let n1;\n                if (t1 && \"webgl2\" !== t1 || !(\"webgl2\" in i1) ? t1 && \"webgl\" !== t1 || !(\"webgl\" in i1) || (n1 = i1.webgl) : n1 = i1.webgl2, !n1) try {\n                    n1 = s1(function() {\n                        if (\"undefined\" == typeof OffscreenCanvas) throw new TypeError(\"failed to create offscreen canvas: OffscreenCanvas is not supported\");\n                        return new OffscreenCanvas(1, 1);\n                    }(), t1);\n                } catch (e1) {\n                    n1 = s1(function() {\n                        if (\"undefined\" == typeof document) throw new TypeError(\"failed to create canvas: document is not supported\");\n                        const e1 = document.createElement(\"canvas\");\n                        return e1.width = 1, e1.height = 1, e1;\n                    }(), t1);\n                }\n                t1 = t1 || 1 === n1.version ? \"webgl\" : \"webgl2\";\n                const r1 = n1.gl;\n                return i1[t1] = n1, r1.isContextLost() ? (delete i1[t1], e1(t1)) : (r1.disable(r1.DEPTH_TEST), r1.disable(r1.STENCIL_TEST), r1.disable(r1.BLEND), r1.disable(r1.DITHER), r1.disable(r1.POLYGON_OFFSET_FILL), r1.disable(r1.SAMPLE_COVERAGE), r1.enable(r1.SCISSOR_TEST), r1.enable(r1.CULL_FACE), r1.cullFace(r1.BACK), n1);\n            }, t1.createNewWebGLContext = s1;\n        },\n        3524: function(e1, t1, n1) {\n            \"use strict\";\n            var r1 = this && this.__createBinding || (Object.create ? function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1);\n                var o1 = Object.getOwnPropertyDescriptor(t1, n1);\n                o1 && !(\"get\" in o1 ? !t1.__esModule : o1.writable || o1.configurable) || (o1 = {\n                    enumerable: !0,\n                    get: function() {\n                        return t1[n1];\n                    }\n                }), Object.defineProperty(e1, r1, o1);\n            } : function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1), e1[r1] = t1[n1];\n            }), o1 = this && this.__setModuleDefault || (Object.create ? function(e1, t1) {\n                Object.defineProperty(e1, \"default\", {\n                    enumerable: !0,\n                    value: t1\n                });\n            } : function(e1, t1) {\n                e1.default = t1;\n            }), i1 = this && this.__importStar || function(e1) {\n                if (e1 && e1.__esModule) return e1;\n                var t1 = {};\n                if (null != e1) for(var n1 in e1)\"default\" !== n1 && Object.prototype.hasOwnProperty.call(e1, n1) && r1(t1, e1, n1);\n                return o1(t1, e1), t1;\n            };\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.WebGLContext = t1.linearSearchLastTrue = void 0;\n            const s1 = n1(6207), a1 = i1(n1(9622)), u1 = n1(432);\n            function l1(e1) {\n                let t1 = 0;\n                for(; t1 < e1.length && e1[t1](); ++t1);\n                return t1 - 1;\n            }\n            t1.linearSearchLastTrue = l1, t1.WebGLContext = class {\n                constructor(e1, t1){\n                    this.frameBufferBound = !1, this.itemsToPoll = [], this.gl = e1, this.version = t1, this.getExtensions(), this.vertexbuffer = this.createVertexbuffer(), this.framebuffer = this.createFramebuffer(), this.queryVitalParameters();\n                }\n                allocateTexture(e1, t1, n1, r1) {\n                    const o1 = this.gl, i1 = o1.createTexture();\n                    o1.bindTexture(o1.TEXTURE_2D, i1), o1.texParameteri(o1.TEXTURE_2D, o1.TEXTURE_MIN_FILTER, o1.NEAREST), o1.texParameteri(o1.TEXTURE_2D, o1.TEXTURE_MAG_FILTER, o1.NEAREST), o1.texParameteri(o1.TEXTURE_2D, o1.TEXTURE_WRAP_S, o1.CLAMP_TO_EDGE), o1.texParameteri(o1.TEXTURE_2D, o1.TEXTURE_WRAP_T, o1.CLAMP_TO_EDGE);\n                    const s1 = r1 ? n1.encode(r1, e1 * t1) : null;\n                    return o1.texImage2D(o1.TEXTURE_2D, 0, n1.internalFormat, e1, t1, 0, n1.format, n1.textureType, s1), this.checkError(), i1;\n                }\n                updateTexture(e1, t1, n1, r1, o1) {\n                    const i1 = this.gl;\n                    i1.bindTexture(i1.TEXTURE_2D, e1);\n                    const s1 = r1.encode(o1, t1 * n1);\n                    i1.texSubImage2D(i1.TEXTURE_2D, 0, 0, 0, t1, n1, r1.format, r1.textureType, s1), this.checkError();\n                }\n                attachFramebuffer(e1, t1, n1) {\n                    const r1 = this.gl;\n                    r1.bindTexture(r1.TEXTURE_2D, e1), r1.bindFramebuffer(r1.FRAMEBUFFER, this.framebuffer), r1.framebufferTexture2D(r1.FRAMEBUFFER, r1.COLOR_ATTACHMENT0, r1.TEXTURE_2D, e1, 0), this.checkError(), r1.viewport(0, 0, t1, n1), r1.scissor(0, 0, t1, n1);\n                }\n                readTexture(e1, t1, n1, r1, o1, i1) {\n                    const s1 = this.gl;\n                    i1 || (i1 = 1), this.frameBufferBound || this.attachFramebuffer(e1, t1, n1);\n                    const a1 = this.getEncoder(o1, i1), u1 = a1.allocate(t1 * n1);\n                    return s1.bindTexture(s1.TEXTURE_2D, e1), s1.framebufferTexture2D(s1.FRAMEBUFFER, s1.COLOR_ATTACHMENT0, s1.TEXTURE_2D, e1, 0), s1.readPixels(0, 0, t1, n1, s1.RGBA, a1.textureType, u1), this.checkError(), a1.decode(u1, r1);\n                }\n                isFramebufferReady() {\n                    return !0;\n                }\n                getActiveTexture() {\n                    const e1 = this.gl;\n                    return \"TEXTURE\" + (e1.getParameter(this.gl.ACTIVE_TEXTURE) - e1.TEXTURE0);\n                }\n                getTextureBinding() {\n                    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n                }\n                getFramebufferBinding() {\n                    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n                }\n                setVertexAttributes(e1, t1) {\n                    const n1 = this.gl;\n                    n1.vertexAttribPointer(e1, 3, n1.FLOAT, !1, 20, 0), n1.enableVertexAttribArray(e1), -1 !== t1 && (n1.vertexAttribPointer(t1, 2, n1.FLOAT, !1, 20, 12), n1.enableVertexAttribArray(t1)), this.checkError();\n                }\n                createProgram(e1, t1) {\n                    const n1 = this.gl, r1 = n1.createProgram();\n                    return n1.attachShader(r1, e1), n1.attachShader(r1, t1), n1.linkProgram(r1), r1;\n                }\n                compileShader(e1, t1) {\n                    const n1 = this.gl, r1 = n1.createShader(t1);\n                    if (!r1) throw new Error(`createShader() returned null with type ${t1}`);\n                    if (n1.shaderSource(r1, e1), n1.compileShader(r1), !1 === n1.getShaderParameter(r1, n1.COMPILE_STATUS)) throw new Error(`Failed to compile shader: ${n1.getShaderInfoLog(r1)}\\nShader source:\\n${e1}`);\n                    return r1;\n                }\n                deleteShader(e1) {\n                    this.gl.deleteShader(e1);\n                }\n                bindTextureToUniform(e1, t1, n1) {\n                    const r1 = this.gl;\n                    r1.activeTexture(r1.TEXTURE0 + t1), this.checkError(), r1.bindTexture(r1.TEXTURE_2D, e1), this.checkError(), r1.uniform1i(n1, t1), this.checkError();\n                }\n                draw() {\n                    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4), this.checkError();\n                }\n                checkError() {\n                    if (s1.env.debug) {\n                        const e1 = this.gl, t1 = e1.getError();\n                        let n1 = \"\";\n                        switch(t1){\n                            case e1.NO_ERROR:\n                                return;\n                            case e1.INVALID_ENUM:\n                                n1 = \"INVALID_ENUM\";\n                                break;\n                            case e1.INVALID_VALUE:\n                                n1 = \"INVALID_VALUE\";\n                                break;\n                            case e1.INVALID_OPERATION:\n                                n1 = \"INVALID_OPERATION\";\n                                break;\n                            case e1.INVALID_FRAMEBUFFER_OPERATION:\n                                n1 = \"INVALID_FRAMEBUFFER_OPERATION\";\n                                break;\n                            case e1.OUT_OF_MEMORY:\n                                n1 = \"OUT_OF_MEMORY\";\n                                break;\n                            case e1.CONTEXT_LOST_WEBGL:\n                                n1 = \"CONTEXT_LOST_WEBGL\";\n                                break;\n                            default:\n                                n1 = `Unknown WebGL Error: ${t1.toString(16)}`;\n                        }\n                        throw new Error(n1);\n                    }\n                }\n                deleteTexture(e1) {\n                    this.gl.deleteTexture(e1);\n                }\n                deleteProgram(e1) {\n                    this.gl.deleteProgram(e1);\n                }\n                getEncoder(e1, t1, n1 = 0) {\n                    if (2 === this.version) return new a1.RedFloat32DataEncoder(this.gl, t1);\n                    switch(e1){\n                        case \"float\":\n                            return 1 === n1 || this.isRenderFloat32Supported ? new a1.RGBAFloatDataEncoder(this.gl, t1) : new a1.RGBAFloatDataEncoder(this.gl, t1, this.textureHalfFloatExtension.HALF_FLOAT_OES);\n                        case \"int\":\n                            throw new Error(\"not implemented\");\n                        case \"byte\":\n                            return new a1.Uint8DataEncoder(this.gl, t1);\n                        default:\n                            throw new Error(`Invalid dataType: ${e1}`);\n                    }\n                }\n                clearActiveTextures() {\n                    const e1 = this.gl;\n                    for(let t1 = 0; t1 < this.maxTextureImageUnits; ++t1)e1.activeTexture(e1.TEXTURE0 + t1), e1.bindTexture(e1.TEXTURE_2D, null);\n                }\n                dispose() {\n                    if (this.disposed) return;\n                    const e1 = this.gl;\n                    e1.bindFramebuffer(e1.FRAMEBUFFER, null), e1.deleteFramebuffer(this.framebuffer), e1.bindBuffer(e1.ARRAY_BUFFER, null), e1.deleteBuffer(this.vertexbuffer), e1.bindBuffer(e1.ELEMENT_ARRAY_BUFFER, null), e1.finish(), this.disposed = !0;\n                }\n                createDefaultGeometry() {\n                    return new Float32Array([\n                        -1,\n                        1,\n                        0,\n                        0,\n                        1,\n                        -1,\n                        -1,\n                        0,\n                        0,\n                        0,\n                        1,\n                        1,\n                        0,\n                        1,\n                        1,\n                        1,\n                        -1,\n                        0,\n                        1,\n                        0\n                    ]);\n                }\n                createVertexbuffer() {\n                    const e1 = this.gl, t1 = e1.createBuffer();\n                    if (!t1) throw new Error(\"createBuffer() returned null\");\n                    const n1 = this.createDefaultGeometry();\n                    return e1.bindBuffer(e1.ARRAY_BUFFER, t1), e1.bufferData(e1.ARRAY_BUFFER, n1, e1.STATIC_DRAW), this.checkError(), t1;\n                }\n                createFramebuffer() {\n                    const e1 = this.gl.createFramebuffer();\n                    if (!e1) throw new Error(\"createFramebuffer returned null\");\n                    return e1;\n                }\n                queryVitalParameters() {\n                    const e1 = this.gl;\n                    if (this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer(), this.isRenderFloat32Supported = this.checkRenderFloat32(), this.isFloat32DownloadSupported = this.checkFloat32Download(), 1 === this.version && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) throw new Error(\"both float32 and float16 TextureType are not supported\");\n                    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend(), this.maxTextureSize = e1.getParameter(e1.MAX_TEXTURE_SIZE), this.maxTextureImageUnits = e1.getParameter(e1.MAX_TEXTURE_IMAGE_UNITS), this.version;\n                }\n                getExtensions() {\n                    2 === this.version ? (this.colorBufferFloatExtension = this.gl.getExtension(\"EXT_color_buffer_float\"), this.disjointTimerQueryWebgl2Extension = this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\")) : (this.textureFloatExtension = this.gl.getExtension(\"OES_texture_float\"), this.textureHalfFloatExtension = this.gl.getExtension(\"OES_texture_half_float\"));\n                }\n                checkFloatTextureAttachableToFrameBuffer() {\n                    const e1 = this.gl, t1 = e1.createTexture();\n                    e1.bindTexture(e1.TEXTURE_2D, t1);\n                    const n1 = 2 === this.version ? e1.RGBA32F : e1.RGBA;\n                    e1.texImage2D(e1.TEXTURE_2D, 0, n1, 1, 1, 0, e1.RGBA, e1.FLOAT, null);\n                    const r1 = e1.createFramebuffer();\n                    e1.bindFramebuffer(e1.FRAMEBUFFER, r1), e1.framebufferTexture2D(e1.FRAMEBUFFER, e1.COLOR_ATTACHMENT0, e1.TEXTURE_2D, t1, 0);\n                    const o1 = e1.checkFramebufferStatus(e1.FRAMEBUFFER) === e1.FRAMEBUFFER_COMPLETE;\n                    return e1.bindTexture(e1.TEXTURE_2D, null), e1.bindFramebuffer(e1.FRAMEBUFFER, null), e1.deleteTexture(t1), e1.deleteFramebuffer(r1), o1;\n                }\n                checkRenderFloat32() {\n                    if (2 === this.version) {\n                        if (!this.colorBufferFloatExtension) return !1;\n                    } else if (!this.textureFloatExtension) return !1;\n                    return this.isFloatTextureAttachableToFrameBuffer;\n                }\n                checkFloat32Download() {\n                    if (2 === this.version) {\n                        if (!this.colorBufferFloatExtension) return !1;\n                    } else {\n                        if (!this.textureFloatExtension) return !1;\n                        if (!this.gl.getExtension(\"WEBGL_color_buffer_float\")) return !1;\n                    }\n                    return this.isFloatTextureAttachableToFrameBuffer;\n                }\n                checkFloat32Blend() {\n                    const e1 = this.gl;\n                    let t1, n1, r1, o1, i1;\n                    try {\n                        t1 = e1.createTexture(), n1 = e1.createFramebuffer(), e1.bindTexture(e1.TEXTURE_2D, t1);\n                        const s1 = 2 === this.version ? e1.RGBA32F : e1.RGBA;\n                        return e1.texImage2D(e1.TEXTURE_2D, 0, s1, 1, 1, 0, e1.RGBA, e1.FLOAT, null), e1.bindFramebuffer(e1.FRAMEBUFFER, n1), e1.framebufferTexture2D(e1.FRAMEBUFFER, e1.COLOR_ATTACHMENT0, e1.TEXTURE_2D, t1, 0), e1.enable(e1.BLEND), r1 = e1.createShader(e1.VERTEX_SHADER), !!r1 && (e1.shaderSource(r1, \"void main(){}\"), e1.compileShader(r1), o1 = e1.createShader(e1.FRAGMENT_SHADER), !!o1 && (e1.shaderSource(o1, \"precision highp float;void main(){gl_FragColor=vec4(0.5);}\"), e1.compileShader(o1), i1 = e1.createProgram(), !!i1 && (e1.attachShader(i1, r1), e1.attachShader(i1, o1), e1.linkProgram(i1), e1.useProgram(i1), e1.drawArrays(e1.POINTS, 0, 1), e1.getError() === e1.NO_ERROR)));\n                    } finally{\n                        e1.disable(e1.BLEND), i1 && e1.deleteProgram(i1), r1 && e1.deleteShader(r1), o1 && e1.deleteShader(o1), n1 && (e1.bindFramebuffer(e1.FRAMEBUFFER, null), e1.deleteFramebuffer(n1)), t1 && (e1.bindTexture(e1.TEXTURE_2D, null), e1.deleteTexture(t1));\n                    }\n                }\n                beginTimer() {\n                    if (2 === this.version && this.disjointTimerQueryWebgl2Extension) {\n                        const e1 = this.gl, t1 = this.disjointTimerQueryWebgl2Extension, n1 = e1.createQuery();\n                        return e1.beginQuery(t1.TIME_ELAPSED_EXT, n1), n1;\n                    }\n                    throw new Error(\"WebGL1 profiling currently not supported.\");\n                }\n                endTimer() {\n                    if (2 !== this.version || !this.disjointTimerQueryWebgl2Extension) throw new Error(\"WebGL1 profiling currently not supported\");\n                    {\n                        const e1 = this.gl, t1 = this.disjointTimerQueryWebgl2Extension;\n                        e1.endQuery(t1.TIME_ELAPSED_EXT);\n                    }\n                }\n                isTimerResultAvailable(e1) {\n                    let t1 = !1, n1 = !1;\n                    if (2 !== this.version || !this.disjointTimerQueryWebgl2Extension) throw new Error(\"WebGL1 profiling currently not supported\");\n                    {\n                        const r1 = this.gl, o1 = this.disjointTimerQueryWebgl2Extension;\n                        t1 = r1.getQueryParameter(e1, r1.QUERY_RESULT_AVAILABLE), n1 = r1.getParameter(o1.GPU_DISJOINT_EXT);\n                    }\n                    return t1 && !n1;\n                }\n                getTimerResult(e1) {\n                    let t1 = 0;\n                    if (2 !== this.version) throw new Error(\"WebGL1 profiling currently not supported\");\n                    {\n                        const n1 = this.gl;\n                        t1 = n1.getQueryParameter(e1, n1.QUERY_RESULT), n1.deleteQuery(e1);\n                    }\n                    return t1 / 1e6;\n                }\n                async waitForQueryAndGetTime(e1) {\n                    return await (0, u1.repeatedTry)(()=>this.isTimerResultAvailable(e1)), this.getTimerResult(e1);\n                }\n                async createAndWaitForFence() {\n                    const e1 = this.createFence(this.gl);\n                    return this.pollFence(e1);\n                }\n                createFence(e1) {\n                    let t1;\n                    const n1 = e1, r1 = n1.fenceSync(n1.SYNC_GPU_COMMANDS_COMPLETE, 0);\n                    return e1.flush(), t1 = null === r1 ? ()=>!0 : ()=>{\n                        const e1 = n1.clientWaitSync(r1, 0, 0);\n                        return e1 === n1.ALREADY_SIGNALED || e1 === n1.CONDITION_SATISFIED;\n                    }, {\n                        query: r1,\n                        isFencePassed: t1\n                    };\n                }\n                async pollFence(e1) {\n                    return new Promise((t1)=>{\n                        this.addItemToPoll(()=>e1.isFencePassed(), ()=>t1());\n                    });\n                }\n                pollItems() {\n                    const e1 = l1(this.itemsToPoll.map((e1)=>e1.isDoneFn));\n                    for(let t1 = 0; t1 <= e1; ++t1){\n                        const { resolveFn: e1 } = this.itemsToPoll[t1];\n                        e1();\n                    }\n                    this.itemsToPoll = this.itemsToPoll.slice(e1 + 1);\n                }\n                async addItemToPoll(e1, t1) {\n                    this.itemsToPoll.push({\n                        isDoneFn: e1,\n                        resolveFn: t1\n                    }), this.itemsToPoll.length > 1 || await (0, u1.repeatedTry)(()=>(this.pollItems(), 0 === this.itemsToPoll.length));\n                }\n            };\n        },\n        6496: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.ExecutionPlan = void 0;\n            const r1 = n1(1315);\n            class o1 {\n                constructor(e1, t1){\n                    this.op = e1, this.node = t1;\n                }\n            }\n            t1.ExecutionPlan = class {\n                constructor(e1, t1, n1){\n                    this.graph = e1, this.profiler = n1, this.initialize(t1);\n                }\n                initialize(e1) {\n                    this.profiler.event(\"session\", \"ExecutionPlan.initialize\", ()=>{\n                        const t1 = this.graph.getNodes();\n                        if (t1.length !== e1.length) throw new Error(\"The size of nodes and OPs do not match.\");\n                        this._ops = e1.map((e1, n1)=>new o1(e1, t1[n1])), this.reset(), this._starter = [], this._ops.forEach((e1, t1)=>{\n                            let n1 = !0;\n                            for (const t1 of e1.node.inputs)if (!this._values[t1] && -1 === this.graph.getInputIndices().indexOf(t1)) {\n                                n1 = !1;\n                                break;\n                            }\n                            n1 && this._starter.push(t1);\n                        });\n                    });\n                }\n                reset() {\n                    this._values = this.graph.getValues().map((e1)=>e1.tensor);\n                }\n                async execute(e1, t1) {\n                    return this.profiler.event(\"session\", \"ExecutionPlan.execute\", async ()=>{\n                        this.reset();\n                        const n1 = e1.createInferenceHandler(), o1 = this.graph.getInputIndices();\n                        if (t1.length !== o1.length) throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${t1.length} expected: ${o1.length}`);\n                        t1.forEach((e1, t1)=>{\n                            const n1 = o1[t1];\n                            this._values[n1] = e1;\n                        });\n                        const i1 = this._starter.slice(0), s1 = this.graph.getValues(), a1 = this.graph.getNodes();\n                        let u1 = 0;\n                        for(; u1 < i1.length;){\n                            const e1 = i1[u1++], t1 = this._ops[e1], o1 = t1.node.inputs.map((e1)=>this._values[e1]);\n                            if (-1 !== o1.indexOf(void 0)) throw new Error(`unresolved input detected: op: ${t1.node}`);\n                            const l1 = o1;\n                            r1.Logger.verbose(\"ExecPlan\", `Runing op:${t1.node.name} (${l1.map((e1, n1)=>`'${t1.node.inputs[n1]}': ${e1.type}[${e1.dims.join(\",\")}]`).join(\", \")})`);\n                            const c1 = await this.profiler.event(\"node\", t1.node.name, async ()=>t1.op.impl(n1, l1, t1.op.context));\n                            if (c1.length !== t1.node.outputs.length) throw new Error(\"the size of output does not match model definition.\");\n                            c1.forEach((e1, n1)=>{\n                                const r1 = t1.node.outputs[n1];\n                                if (this._values[r1]) throw new Error(`output [${r1}] already has value: op:${t1.node.name}`);\n                                this._values[r1] = e1;\n                            });\n                            const p1 = new Set;\n                            c1.forEach((e1, n1)=>{\n                                const r1 = t1.node.outputs[n1];\n                                for (const e1 of s1[r1].to){\n                                    const t1 = a1[e1];\n                                    let n1 = !0;\n                                    for (const e1 of t1.inputs)if (!this._values[e1]) {\n                                        n1 = !1;\n                                        break;\n                                    }\n                                    n1 && p1.add(e1);\n                                }\n                            }), i1.push(...p1);\n                        }\n                        const l1 = [];\n                        for(let e1 = 0; e1 < this.graph.getOutputIndices().length; e1++){\n                            const t1 = this.graph.getOutputIndices()[e1], n1 = this._values[t1];\n                            if (void 0 === n1) throw new Error(`required output [${t1}] does not have value`);\n                            0 === t1 ? await n1.getData() : n1.data, l1.push(n1);\n                        }\n                        return r1.Logger.verbose(\"ExecPlan\", \"disposing of inferenceHandler\"), n1.dispose(), l1;\n                    });\n                }\n            };\n        },\n        4662: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.Graph = void 0;\n            const r1 = n1(6874), o1 = n1(5127), i1 = n1(2446), s1 = n1(9240), a1 = n1(7273);\n            var u1 = o1.onnxruntime.experimental.fbs;\n            t1.Graph = {\n                from: (e1, t1)=>new p1(e1, t1)\n            };\n            class l1 {\n                constructor(e1){\n                    this._from = void 0, this._to = [], this.tensor = void 0, this.type = void 0, e1 && (this.type = a1.ProtoUtil.tensorValueTypeFromProto(e1.type.tensorType));\n                }\n                get from() {\n                    return this._from;\n                }\n                get to() {\n                    return this._to;\n                }\n            }\n            class c1 {\n                constructor(e1, t1){\n                    e1 instanceof i1.onnx.NodeProto ? (this.name = e1.name, this.opType = e1.opType, this.attributes = new r1.Attribute(e1.attribute)) : e1 instanceof u1.Node && (this.name = null != t1 ? t1 : e1.name(), this.opType = e1.opType(), this.attributes = new r1.Attribute(a1.ProtoUtil.tensorAttributesFromORTFormat(e1))), this.inputs = [], this.outputs = [], this.executeNode = !0;\n                }\n            }\n            class p1 {\n                constructor(e1, t1){\n                    if (!e1) throw new TypeError(\"graph is empty\");\n                    this.buildGraph(e1), this.transformGraph(t1), this.checkIsAcyclic();\n                }\n                getInputIndices() {\n                    return this._allInputIndices;\n                }\n                getInputNames() {\n                    return this._allInputNames;\n                }\n                getOutputIndices() {\n                    return this._allOutputIndices;\n                }\n                getOutputNames() {\n                    return this._allOutputNames;\n                }\n                getValues() {\n                    return this._allData;\n                }\n                getNodes() {\n                    return this._nodes;\n                }\n                buildGraph(e1) {\n                    if (e1 instanceof i1.onnx.GraphProto) this.buildGraphFromOnnxFormat(e1);\n                    else {\n                        if (!(e1 instanceof u1.Graph)) throw new TypeError(\"Graph type is not supported.\");\n                        this.buildGraphFromOrtFormat(e1);\n                    }\n                }\n                buildGraphFromOnnxFormat(e1) {\n                    const t1 = new Map;\n                    this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];\n                    const n1 = new Map;\n                    if (!e1.input) throw new Error(\"missing information in graph: input\");\n                    const r1 = [];\n                    for (const n1 of e1.input){\n                        if (t1.has(n1.name)) throw new Error(`duplicated input name: ${n1.name}`);\n                        const e1 = this._allData.push(new l1(n1)) - 1;\n                        t1.set(n1.name, e1), r1.push(n1.name);\n                    }\n                    if (!e1.initializer) throw new Error(\"missing information in graph: initializer\");\n                    for (const n1 of e1.initializer){\n                        let e1 = t1.get(n1.name);\n                        if (void 0 === e1) {\n                            const r1 = new l1;\n                            r1.type = {\n                                shape: {\n                                    dims: a1.ProtoUtil.tensorDimsFromProto(n1.dims)\n                                },\n                                tensorType: a1.ProtoUtil.tensorDataTypeFromProto(n1.dataType)\n                            }, e1 = this._allData.push(r1) - 1, t1.set(n1.name, e1);\n                        }\n                        this._allData[e1]._from = -1, this._allData[e1].tensor = s1.Tensor.fromProto(n1);\n                    }\n                    for(let e1 = 0; e1 < this._allData.length; e1++)this._allData[e1].tensor || (this._allInputIndices.push(e1), this._allInputNames.push(r1[e1]));\n                    if (!e1.output) throw new Error(\"missing information in graph: output\");\n                    for (const n1 of e1.output){\n                        if (t1.has(n1.name)) throw new Error(`duplicated output name: ${n1.name}`);\n                        const e1 = this._allData.push(new l1(n1)) - 1;\n                        t1.set(n1.name, e1), this._allOutputIndices.push(e1), this._allOutputNames.push(n1.name);\n                    }\n                    if (!e1.node) throw new Error(\"missing information in graph: node\");\n                    for (const t1 of e1.node){\n                        if (!t1.name) for(let e1 = 0;; e1++){\n                            const r1 = `unnamed_${t1.opType}_${e1}`;\n                            if (!n1.has(r1)) {\n                                t1.name = r1;\n                                break;\n                            }\n                        }\n                        if (n1.has(t1.name)) throw new Error(`duplicated node name: ${t1.name}`);\n                        const e1 = this._nodes.push(new c1(t1)) - 1;\n                        n1.set(t1.name, e1);\n                    }\n                    for(let n1 = 0; n1 < this._nodes.length; n1++){\n                        const r1 = this._nodes[n1], o1 = e1.node[n1];\n                        if (!o1.output) throw new Error(`missing output for node: ${o1.name}`);\n                        for (const e1 of o1.output){\n                            let i1 = t1.get(e1);\n                            if (void 0 === i1 && (i1 = this._allData.push(new l1) - 1, t1.set(e1, i1)), r1.outputs.push(i1), void 0 !== this._allData[i1]._from) throw new Error(`multiple nodes output to one data value: ${i1}`);\n                            if (this._allData[i1]._from = n1, \"Constant\" === o1.opType) {\n                                if (!o1.attribute || 1 !== o1.attribute.length || !o1.attribute[0].t) throw new Error(\"missing attributes or missing tensor value in attributes for this Constant operator\");\n                                if (!o1.output || 1 !== o1.output.length) throw new Error(\"missing output or incorrect number of outputs for this Constant operator\");\n                                r1.outputs.pop(), r1.executeNode = !1, this._allData[i1]._from = -1, this._allData[i1].tensor = s1.Tensor.fromProto(o1.attribute[0].t);\n                            }\n                        }\n                    }\n                    for(let n1 = 0; n1 < this._nodes.length; n1++){\n                        const r1 = this._nodes[n1], o1 = e1.node[n1];\n                        if (!o1.input) throw new Error(`missing input for node: ${o1.name}`);\n                        for (const e1 of o1.input){\n                            const i1 = t1.get(e1);\n                            if (void 0 === i1) {\n                                if (\"\" === e1 && (3 === o1.input.length || 4 === o1.input.length) && \"Resize\" === o1.opType) continue;\n                                throw new Error(`unrecognized input '${e1}' for node: ${o1.name}`);\n                            }\n                            r1.inputs.push(i1), this._allData[i1]._to.push(n1);\n                        }\n                    }\n                    return !0;\n                }\n                buildGraphFromOrtFormat(e1) {\n                    var t1, n1, r1;\n                    const o1 = new Map;\n                    this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];\n                    const i1 = new Map, p1 = [];\n                    for(let i1 = 0; i1 < e1.inputsLength(); i1++){\n                        const s1 = e1.inputs(i1);\n                        if (o1.has(s1)) throw new Error(`duplicated input name: ${s1}`);\n                        for(let i1 = 0; i1 < e1.nodeArgsLength(); i1++)if ((null === (t1 = e1.nodeArgs(i1)) || void 0 === t1 ? void 0 : t1.name()) === s1) {\n                            const t1 = new l1;\n                            if ((null === (r1 = null === (n1 = e1.nodeArgs(i1)) || void 0 === n1 ? void 0 : n1.type()) || void 0 === r1 ? void 0 : r1.valueType()) !== u1.TypeInfoValue.tensor_type) throw new Error(\"Unexpected value type for the nodeArg.\");\n                            const c1 = e1.nodeArgs(i1).type().value(new u1.TensorTypeAndShape), d1 = a1.ProtoUtil.tensorDataTypeFromProto(c1.elemType()), f1 = c1.shape(), h1 = [];\n                            for(let e1 = 0; e1 < f1.dimLength(); e1++)h1.push(a1.LongUtil.longToNumber(f1.dim(e1).value().dimValue()));\n                            t1.type = {\n                                shape: {\n                                    dims: h1\n                                },\n                                tensorType: d1\n                            };\n                            const g1 = this._allData.push(t1) - 1;\n                            o1.set(s1, g1), p1.push(s1);\n                        }\n                    }\n                    for(let t1 = 0; t1 < e1.initializersLength(); t1++){\n                        const n1 = e1.initializers(t1);\n                        let r1 = o1.get(n1.name());\n                        if (void 0 === r1) {\n                            const e1 = new l1, t1 = a1.ProtoUtil.tensorDimsFromORTFormat(n1), i1 = a1.ProtoUtil.tensorDataTypeFromProto(n1.dataType());\n                            e1.type = {\n                                shape: {\n                                    dims: t1\n                                },\n                                tensorType: i1\n                            }, r1 = this._allData.push(e1) - 1, o1.set(n1.name(), r1);\n                        }\n                        this._allData[r1]._from = -1, this._allData[r1].tensor = s1.Tensor.fromOrtTensor(n1);\n                    }\n                    for(let e1 = 0; e1 < this._allData.length; e1++)this._allData[e1].tensor || (this._allInputIndices.push(e1), this._allInputNames.push(p1[e1]));\n                    for(let t1 = 0; t1 < e1.outputsLength(); t1++){\n                        const n1 = e1.outputs(t1);\n                        if (o1.has(n1)) throw new Error(`duplicated output name: ${n1}`);\n                        const r1 = this._allData.push(new l1) - 1;\n                        o1.set(n1, r1), this._allOutputIndices.push(r1), this._allOutputNames.push(n1);\n                    }\n                    if (!e1.nodes) throw new Error(\"missing information in graph: node\");\n                    for(let t1 = 0; t1 < e1.nodesLength(); t1++){\n                        const n1 = e1.nodes(t1);\n                        let r1 = n1.name();\n                        if (!r1) for(let e1 = 0; r1 = `unnamed_${n1.opType()}_${e1}`, i1.has(r1); e1++);\n                        if (i1.has(r1)) throw new Error(`duplicated node name: ${r1}`);\n                        const o1 = this._nodes.push(new c1(n1, r1)) - 1;\n                        i1.set(r1, o1);\n                    }\n                    for(let t1 = 0; t1 < this._nodes.length; t1++){\n                        const n1 = this._nodes[t1], r1 = e1.nodes(t1);\n                        if (null == r1) throw new Error(`No node exists at index ${t1}`);\n                        if (0 === (null == r1 ? void 0 : r1.outputsLength())) throw new Error(`missing output for node: ${r1.name}`);\n                        for(let e1 = 0; e1 < (null == r1 ? void 0 : r1.outputsLength()); e1++){\n                            const i1 = null == r1 ? void 0 : r1.outputs(e1);\n                            let a1 = o1.get(i1);\n                            if (void 0 === a1 && (a1 = this._allData.push(new l1) - 1, o1.set(i1, a1)), n1.outputs.push(a1), void 0 !== this._allData[a1]._from) throw new Error(`multiple nodes output to one data value: ${a1}`);\n                            if (this._allData[a1]._from = t1, \"Constant\" === r1.opType()) {\n                                if (1 !== r1.attributesLength() || !r1.attributes(0).t()) throw new Error(\"missing attributes or missing tensor value in attributes for this Constant operator\");\n                                if (1 !== r1.outputsLength()) throw new Error(\"missing output or incorrect number of outputs for this Constant operator\");\n                                n1.outputs.pop(), n1.executeNode = !1, this._allData[a1]._from = -1, this._allData[a1].tensor = s1.Tensor.fromOrtTensor(r1.attributes(0).t());\n                            }\n                        }\n                    }\n                    for(let t1 = 0; t1 < this._nodes.length; t1++){\n                        const n1 = this._nodes[t1], r1 = e1.nodes(t1);\n                        if (0 === r1.inputsLength()) throw new Error(`missing input for node: ${r1.name}`);\n                        for(let e1 = 0; e1 < r1.inputsLength(); e1++){\n                            const i1 = r1.inputs(e1), s1 = o1.get(i1);\n                            if (void 0 === s1) throw new Error(`unrecognized input '${i1}' for node: ${r1.name()}`);\n                            n1.inputs.push(s1), this._allData[s1]._to.push(t1);\n                        }\n                    }\n                }\n                checkIsAcyclic() {\n                    const e1 = new Set;\n                    this._allInputIndices.forEach((t1)=>{\n                        this._allData[t1]._to.forEach((t1)=>{\n                            e1.add(t1);\n                        });\n                    });\n                    const t1 = Array.from(e1), n1 = new Array(this._nodes.length).fill(\"white\");\n                    for(; t1.length > 0;){\n                        const e1 = t1.pop();\n                        \"gray\" === n1[e1] ? n1[e1] = \"black\" : (t1.push(e1), n1[e1] = \"gray\", this._nodes[e1].outputs.forEach((r1)=>{\n                            const o1 = this._allData[r1];\n                            if (void 0 !== o1.tensor) throw new Error(\"node outputs should not be initialized\");\n                            if (o1._from !== e1) throw new Error(\"from property of the Value object doesn't match index of Node being processed\");\n                            o1._to.forEach((e1)=>{\n                                if (\"gray\" === n1[e1]) throw new Error(\"model graph is cyclic\");\n                                \"white\" === n1[e1] && t1.push(e1);\n                            });\n                        }));\n                    }\n                }\n                transformGraph(e1) {\n                    this.removeAllIdentityNodes(), this.removeAllDropoutNodes(), this.fuseConvActivationNodes(), e1 && e1.transformGraph(this), this.finalizeGraph();\n                }\n                finalizeGraph() {\n                    let e1 = 0;\n                    const t1 = new Array(this._nodes.length, 0);\n                    let n1 = 0;\n                    for(let e1 = 0; e1 < this._nodes.length; e1++)t1[e1] = n1, this._nodes[e1].executeNode ? (n1 !== e1 && (this._nodes[n1] = this._nodes[e1]), n1++) : this._nodes[e1].outputs.forEach((e1)=>{\n                        this._allData[e1]._from = -2;\n                    });\n                    this._nodes.splice(n1, this._nodes.length - n1);\n                    for(let e1 = 0; e1 < this._allData.length; e1++){\n                        const n1 = this._allData[e1];\n                        void 0 !== n1._from && -1 !== n1._from && -2 !== n1._from && (n1._from = t1[n1._from]);\n                        for(let e1 = 0; e1 < n1._to.length; e1++){\n                            if (!(n1._to[e1] >= 0)) throw new Error(\"Trying to update a removed node\");\n                            n1._to[e1] = t1[n1._to[e1]];\n                        }\n                    }\n                    e1 = 0;\n                    for(let t1 = 0; t1 < this._allData.length; t1++)if (-2 !== this._allData[t1].from || -1 !== this._allOutputIndices.indexOf(t1 + e1)) {\n                        if (e1 > 0) {\n                            let n1 = -1;\n                            void 0 !== this._allData[t1].from && -1 !== this._allData[t1].from ? (n1 = this._nodes[this._allData[t1].from].outputs.indexOf(t1 + e1), -1 !== n1 && (this._nodes[this._allData[t1].from].outputs[n1] = t1)) : (n1 = this._allInputIndices.indexOf(t1 + e1), -1 !== n1 && (this._allInputIndices[n1] = t1)), this._allData[t1].to.forEach((r1)=>{\n                                n1 = this._nodes[r1].inputs.indexOf(t1 + e1), -1 !== n1 && (this._nodes[r1].inputs[n1] = t1);\n                            }), 0 === this._allData[t1].to.length && (n1 = this._allOutputIndices.indexOf(t1 + e1), -1 !== n1 && (this._allOutputIndices[n1] = t1));\n                        }\n                    } else e1++, this._allData.splice(t1, 1), t1--;\n                }\n                deleteNode(e1) {\n                    const t1 = this._nodes[e1];\n                    if (t1.outputs.length > 1) {\n                        for(let e1 = 1; e1 < t1.outputs.length; e1++)if (this._allData[t1.outputs[e1]].to.length > 0) throw new Error(\"Node deletion with more than one output connected to other nodes is not supported. \");\n                    }\n                    t1.executeNode = !1;\n                    const n1 = t1.inputs[0], r1 = t1.outputs[0], o1 = this._allData[r1].to;\n                    for(let n1 = 0; n1 < t1.inputs.length; n1++){\n                        const r1 = this._allData[t1.inputs[n1]].to.indexOf(e1);\n                        if (-1 === r1) throw new Error(\"The Value object doesn't have the current Node in it's 'to' property \");\n                        this._allData[t1.inputs[n1]].to.splice(r1, 1);\n                    }\n                    this._allData[r1]._to = [];\n                    const i1 = this._allOutputIndices.indexOf(r1);\n                    if (-1 !== i1 && (this._allOutputIndices[i1] = n1), o1 && o1.length > 0) for (const e1 of o1){\n                        const t1 = this._nodes[e1].inputs.indexOf(r1);\n                        if (-1 === t1) throw new Error(\"The Node object doesn't have the output Value in it's 'inputs' property \");\n                        this._nodes[e1].inputs[t1] = n1, this._allData[n1].to.push(e1);\n                    }\n                }\n                removeAllDropoutNodes() {\n                    let e1 = 0;\n                    for (const t1 of this._nodes){\n                        if (\"Dropout\" === t1.opType) {\n                            if (1 !== t1.inputs.length) throw new Error(\"Dropout nodes should only contain one input. \");\n                            if (1 !== t1.outputs.length && 2 !== t1.outputs.length) throw new Error(\"Dropout nodes should contain either 1 or 2 output(s)\");\n                            if (2 === t1.outputs.length && 0 !== this._allData[t1.outputs[1]]._to.length) throw new Error(\"Dropout nodes's second output should not be referenced by other nodes\");\n                            this.deleteNode(e1);\n                        }\n                        e1++;\n                    }\n                }\n                removeAllIdentityNodes() {\n                    let e1 = 0;\n                    for (const t1 of this._nodes)\"Identity\" === t1.opType && this.deleteNode(e1), e1++;\n                }\n                isActivation(e1) {\n                    switch(e1.opType){\n                        case \"Relu\":\n                        case \"Sigmoid\":\n                        case \"Clip\":\n                            return !0;\n                        default:\n                            return !1;\n                    }\n                }\n                fuseConvActivationNodes() {\n                    for (const e1 of this._nodes)if (\"Conv\" === e1.opType) {\n                        const t1 = this._allData[e1.outputs[0]]._to;\n                        if (1 === t1.length && this.isActivation(this._nodes[t1[0]])) {\n                            const n1 = this._nodes[t1[0]];\n                            if (\"Clip\" === n1.opType) if (1 === n1.inputs.length) try {\n                                e1.attributes.set(\"activation_params\", \"floats\", [\n                                    n1.attributes.getFloat(\"min\"),\n                                    n1.attributes.getFloat(\"max\")\n                                ]);\n                            } catch (t1) {\n                                e1.attributes.set(\"activation_params\", \"floats\", [\n                                    a1.MIN_CLIP,\n                                    a1.MAX_CLIP\n                                ]);\n                            }\n                            else {\n                                if (!(n1.inputs.length >= 3 && void 0 !== this._allData[n1.inputs[1]].tensor && void 0 !== this._allData[n1.inputs[2]].tensor)) continue;\n                                e1.attributes.set(\"activation_params\", \"floats\", [\n                                    this._allData[n1.inputs[1]].tensor.floatData[0],\n                                    this._allData[n1.inputs[2]].tensor.floatData[0]\n                                ]);\n                            }\n                            e1.attributes.set(\"activation\", \"string\", n1.opType), this.deleteNode(t1[0]);\n                        }\n                    }\n                }\n            }\n        },\n        1315: (e1, t1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.now = t1.Profiler = t1.Logger = void 0;\n            const n1 = {\n                verbose: 1e3,\n                info: 2e3,\n                warning: 4e3,\n                error: 5e3,\n                fatal: 6e3\n            }, r1 = {\n                none: new class {\n                    log(e1, t1, n1) {}\n                },\n                console: new class {\n                    log(e1, t1, n1) {\n                        console.log(`${this.color(e1)} ${n1 ? \"\\x1b[35m\" + n1 + \"\\x1b[0m \" : \"\"}${t1}`);\n                    }\n                    color(e1) {\n                        switch(e1){\n                            case \"verbose\":\n                                return \"\\x1b[34;40mv\\x1b[0m\";\n                            case \"info\":\n                                return \"\\x1b[32mi\\x1b[0m\";\n                            case \"warning\":\n                                return \"\\x1b[30;43mw\\x1b[0m\";\n                            case \"error\":\n                                return \"\\x1b[31;40me\\x1b[0m\";\n                            case \"fatal\":\n                                return \"\\x1b[101mf\\x1b[0m\";\n                            default:\n                                throw new Error(`unsupported severity: ${e1}`);\n                        }\n                    }\n                }\n            }, o1 = {\n                provider: \"console\",\n                minimalSeverity: \"warning\",\n                logDateTime: !0,\n                logSourceLocation: !1\n            };\n            let i1 = {\n                \"\": o1\n            };\n            function s1(e1, t1, n1, r1) {\n                if (void 0 === t1) return o1 = e1, {\n                    verbose: s1.verbose.bind(null, o1),\n                    info: s1.info.bind(null, o1),\n                    warning: s1.warning.bind(null, o1),\n                    error: s1.error.bind(null, o1),\n                    fatal: s1.fatal.bind(null, o1)\n                };\n                if (void 0 === n1) a1(e1, t1);\n                else if (\"number\" == typeof n1 && void 0 === r1) a1(e1, t1);\n                else if (\"string\" == typeof n1 && void 0 === r1) a1(e1, n1, 0, t1);\n                else {\n                    if (\"string\" != typeof n1 || \"number\" != typeof r1) throw new TypeError(\"input is valid\");\n                    a1(e1, n1, 0, t1);\n                }\n                var o1;\n            }\n            function a1(e1, t1, o1, s1) {\n                const a1 = i1[s1 || \"\"] || i1[\"\"];\n                n1[e1] < n1[a1.minimalSeverity] || (a1.logDateTime && (t1 = `${(new Date).toISOString()}|${t1}`), a1.logSourceLocation, r1[a1.provider].log(e1, t1, s1));\n            }\n            !function(e1) {\n                function t1(e1) {\n                    i1 = {}, n1(\"\", e1 || {});\n                }\n                function n1(e1, n1) {\n                    if (\"*\" === e1) t1(n1);\n                    else {\n                        const t1 = i1[e1] || o1;\n                        i1[e1] = {\n                            provider: n1.provider || t1.provider,\n                            minimalSeverity: n1.minimalSeverity || t1.minimalSeverity,\n                            logDateTime: void 0 === n1.logDateTime ? t1.logDateTime : n1.logDateTime,\n                            logSourceLocation: void 0 === n1.logSourceLocation ? t1.logSourceLocation : n1.logSourceLocation\n                        };\n                    }\n                }\n                e1.verbose = function(t1, n1) {\n                    e1(\"verbose\", t1, n1);\n                }, e1.info = function(t1, n1) {\n                    e1(\"info\", t1, n1);\n                }, e1.warning = function(t1, n1) {\n                    e1(\"warning\", t1, n1);\n                }, e1.error = function(t1, n1) {\n                    e1(\"error\", t1, n1);\n                }, e1.fatal = function(t1, n1) {\n                    e1(\"fatal\", t1, n1);\n                }, e1.reset = t1, e1.set = n1, e1.setWithEnv = function(e1) {\n                    const t1 = {};\n                    e1.logLevel && (t1.minimalSeverity = e1.logLevel), n1(\"\", t1);\n                };\n            }(s1 || (s1 = {})), t1.Logger = s1;\n            class u1 {\n                constructor(e1, t1, n1, r1, o1, i1){\n                    this.category = e1, this.name = t1, this.startTime = n1, this.endCallback = r1, this.timer = o1, this.ctx = i1;\n                }\n                async end() {\n                    return this.endCallback(this);\n                }\n                async checkTimer() {\n                    if (void 0 === this.ctx || void 0 === this.timer) throw new Error(\"No webgl timer found\");\n                    return this.ctx.endTimer(), this.ctx.waitForQueryAndGetTime(this.timer);\n                }\n            }\n            class l1 {\n                constructor(e1, t1, n1, r1){\n                    this.category = e1, this.name = t1, this.startTime = n1, this.endTime = r1;\n                }\n            }\n            t1.Profiler = class {\n                static create(e1) {\n                    return void 0 === e1 ? new this : new this(e1.maxNumberEvents, e1.flushBatchSize, e1.flushIntervalInMilliseconds);\n                }\n                constructor(e1, t1, n1){\n                    this._started = !1, this._flushPointer = 0, this._started = !1, this._maxNumberEvents = void 0 === e1 ? 1e4 : e1, this._flushBatchSize = void 0 === t1 ? 10 : t1, this._flushIntervalInMilliseconds = void 0 === n1 ? 5e3 : n1;\n                }\n                start() {\n                    this._started = !0, this._timingEvents = [], this._flushTime = (0, t1.now)(), this._flushPointer = 0;\n                }\n                stop() {\n                    for(this._started = !1; this._flushPointer < this._timingEvents.length; this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer]);\n                }\n                event(e1, t1, n1, r1) {\n                    const o1 = this._started ? this.begin(e1, t1, r1) : void 0;\n                    let i1 = !1;\n                    const s1 = n1();\n                    if (s1 && \"function\" == typeof s1.then) return i1 = !0, new Promise((e1, t1)=>{\n                        s1.then(async (t1)=>{\n                            o1 && await o1.end(), e1(t1);\n                        }, async (e1)=>{\n                            o1 && await o1.end(), t1(e1);\n                        });\n                    });\n                    if (!i1 && o1) {\n                        const e1 = o1.end();\n                        if (e1 && \"function\" == typeof e1.then) return new Promise((t1, n1)=>{\n                            e1.then(()=>{\n                                t1(s1);\n                            }, (e1)=>{\n                                n1(e1);\n                            });\n                        });\n                    }\n                    return s1;\n                }\n                begin(e1, n1, r1) {\n                    if (!this._started) throw new Error(\"profiler is not started yet\");\n                    if (void 0 === r1) {\n                        const r1 = (0, t1.now)();\n                        return this.flush(r1), new u1(e1, n1, r1, (e1)=>this.endSync(e1));\n                    }\n                    {\n                        const t1 = r1.beginTimer();\n                        return new u1(e1, n1, 0, async (e1)=>this.end(e1), t1, r1);\n                    }\n                }\n                async end(e1) {\n                    const t1 = await e1.checkTimer();\n                    this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new l1(e1.category, e1.name, e1.startTime, t1)), this.flush(t1));\n                }\n                endSync(e1) {\n                    const n1 = (0, t1.now)();\n                    this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new l1(e1.category, e1.name, e1.startTime, n1)), this.flush(n1));\n                }\n                logOneEvent(e1) {\n                    t1.Logger.verbose(`Profiler.${e1.category}`, `${(e1.endTime - e1.startTime).toFixed(2)}ms on event '${e1.name}' at ${e1.endTime.toFixed(2)}`);\n                }\n                flush(e1) {\n                    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize || e1 - this._flushTime >= this._flushIntervalInMilliseconds) {\n                        for(const e1 = this._flushPointer; this._flushPointer < e1 + this._flushBatchSize && this._flushPointer < this._timingEvents.length; this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer]);\n                        this._flushTime = (0, t1.now)();\n                    }\n                }\n                get started() {\n                    return this._started;\n                }\n            }, t1.now = \"undefined\" != typeof performance && performance.now ? ()=>performance.now() : Date.now;\n        },\n        1745: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.Model = void 0;\n            const r1 = n1(5686), o1 = n1(4662), i1 = n1(5127), s1 = n1(2446), a1 = n1(7273);\n            var u1 = i1.onnxruntime.experimental.fbs;\n            t1.Model = class {\n                constructor(){}\n                load(e1, t1, n1) {\n                    if (!n1) try {\n                        return void this.loadFromOnnxFormat(e1, t1);\n                    } catch (e1) {\n                        if (void 0 !== n1) throw e1;\n                    }\n                    this.loadFromOrtFormat(e1, t1);\n                }\n                loadFromOnnxFormat(e1, t1) {\n                    const n1 = s1.onnx.ModelProto.decode(e1);\n                    if (a1.LongUtil.longToNumber(n1.irVersion) < 3) throw new Error(\"only support ONNX model with IR_VERSION>=3\");\n                    this._opsets = n1.opsetImport.map((e1)=>({\n                            domain: e1.domain,\n                            version: a1.LongUtil.longToNumber(e1.version)\n                        })), this._graph = o1.Graph.from(n1.graph, t1);\n                }\n                loadFromOrtFormat(e1, t1) {\n                    const n1 = new r1.flatbuffers.ByteBuffer(e1), i1 = u1.InferenceSession.getRootAsInferenceSession(n1).model();\n                    if (a1.LongUtil.longToNumber(i1.irVersion()) < 3) throw new Error(\"only support ONNX model with IR_VERSION>=3\");\n                    this._opsets = [];\n                    for(let e1 = 0; e1 < i1.opsetImportLength(); e1++){\n                        const t1 = i1.opsetImport(e1);\n                        this._opsets.push({\n                            domain: null == t1 ? void 0 : t1.domain(),\n                            version: a1.LongUtil.longToNumber(t1.version())\n                        });\n                    }\n                    this._graph = o1.Graph.from(i1.graph(), t1);\n                }\n                get graph() {\n                    return this._graph;\n                }\n                get opsets() {\n                    return this._opsets;\n                }\n            };\n        },\n        6145: (e1, t1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.FLOAT_TYPES = t1.INT_TYPES = t1.NUMBER_TYPES = void 0, t1.NUMBER_TYPES = [\n                \"float32\",\n                \"float64\",\n                \"int32\",\n                \"int16\",\n                \"int8\",\n                \"uint16\",\n                \"uint32\",\n                \"uint8\"\n            ], t1.INT_TYPES = [\n                \"int32\",\n                \"int16\",\n                \"int8\",\n                \"uint16\",\n                \"uint32\",\n                \"uint8\"\n            ], t1.FLOAT_TYPES = [\n                \"float32\",\n                \"float64\"\n            ];\n        },\n        5881: (e1, t1)=>{\n            \"use strict\";\n            function n1(e1, t1) {\n                if (t1.endsWith(\"+\")) {\n                    const n1 = Number.parseInt(t1.substring(0, t1.length - 1), 10);\n                    return !isNaN(n1) && n1 <= e1;\n                }\n                if (2 === t1.split(\"-\").length) {\n                    const n1 = t1.split(\"-\"), r1 = Number.parseInt(n1[0], 10), o1 = Number.parseInt(n1[1], 10);\n                    return !isNaN(r1) && !isNaN(o1) && r1 <= e1 && e1 <= o1;\n                }\n                return Number.parseInt(t1, 10) === e1;\n            }\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.resolveOperator = void 0, t1.resolveOperator = function(e1, t1, r1) {\n                for (const o1 of r1){\n                    const r1 = o1[0], i1 = o1[1], s1 = o1[2], a1 = o1[3], u1 = o1[4];\n                    if (e1.opType === r1) {\n                        for (const e1 of t1)if ((e1.domain === i1 || \"ai.onnx\" === e1.domain && \"\" === i1) && n1(e1.version, s1)) return {\n                            opImpl: a1,\n                            opInit: u1\n                        };\n                    }\n                }\n                throw new TypeError(`cannot resolve operator '${e1.opType}' with opsets: ${t1.map((e1)=>`${e1.domain || \"ai.onnx\"} v${e1.version}`).join(\", \")}`);\n            };\n        },\n        5127: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.onnxruntime = void 0;\n            const r1 = n1(5686);\n            var o1, i1;\n            o1 = t1.onnxruntime || (t1.onnxruntime = {}), function(e1) {\n                let t1;\n                !function(e1) {\n                    e1[e1.UNDEFINED = 0] = \"UNDEFINED\", e1[e1.FLOAT = 1] = \"FLOAT\", e1[e1.INT = 2] = \"INT\", e1[e1.STRING = 3] = \"STRING\", e1[e1.TENSOR = 4] = \"TENSOR\", e1[e1.GRAPH = 5] = \"GRAPH\", e1[e1.FLOATS = 6] = \"FLOATS\", e1[e1.INTS = 7] = \"INTS\", e1[e1.STRINGS = 8] = \"STRINGS\", e1[e1.TENSORS = 9] = \"TENSORS\", e1[e1.GRAPHS = 10] = \"GRAPHS\", e1[e1.SPARSE_TENSOR = 11] = \"SPARSE_TENSOR\", e1[e1.SPARSE_TENSORS = 12] = \"SPARSE_TENSORS\";\n                }(t1 = e1.AttributeType || (e1.AttributeType = {}));\n            }((i1 = o1.experimental || (o1.experimental = {})).fbs || (i1.fbs = {})), function(e1) {\n                !function(e1) {\n                    !function(e1) {\n                        let t1;\n                        !function(e1) {\n                            e1[e1.UNKNOWN = 0] = \"UNKNOWN\", e1[e1.VALUE = 1] = \"VALUE\", e1[e1.PARAM = 2] = \"PARAM\";\n                        }(t1 = e1.DimensionValueType || (e1.DimensionValueType = {}));\n                    }(e1.fbs || (e1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(e1) {\n                    !function(e1) {\n                        let t1;\n                        !function(e1) {\n                            e1[e1.UNDEFINED = 0] = \"UNDEFINED\", e1[e1.FLOAT = 1] = \"FLOAT\", e1[e1.UINT8 = 2] = \"UINT8\", e1[e1.INT8 = 3] = \"INT8\", e1[e1.UINT16 = 4] = \"UINT16\", e1[e1.INT16 = 5] = \"INT16\", e1[e1.INT32 = 6] = \"INT32\", e1[e1.INT64 = 7] = \"INT64\", e1[e1.STRING = 8] = \"STRING\", e1[e1.BOOL = 9] = \"BOOL\", e1[e1.FLOAT16 = 10] = \"FLOAT16\", e1[e1.DOUBLE = 11] = \"DOUBLE\", e1[e1.UINT32 = 12] = \"UINT32\", e1[e1.UINT64 = 13] = \"UINT64\", e1[e1.COMPLEX64 = 14] = \"COMPLEX64\", e1[e1.COMPLEX128 = 15] = \"COMPLEX128\", e1[e1.BFLOAT16 = 16] = \"BFLOAT16\", e1[e1.FLOAT8E4M3FN = 17] = \"FLOAT8E4M3FN\", e1[e1.FLOAT8E4M3FNUZ = 18] = \"FLOAT8E4M3FNUZ\", e1[e1.FLOAT8E5M2 = 19] = \"FLOAT8E5M2\", e1[e1.FLOAT8E5M2FNUZ = 20] = \"FLOAT8E5M2FNUZ\";\n                        }(t1 = e1.TensorDataType || (e1.TensorDataType = {}));\n                    }(e1.fbs || (e1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(e1) {\n                    !function(e1) {\n                        let t1;\n                        !function(e1) {\n                            e1[e1.Primitive = 0] = \"Primitive\", e1[e1.Fused = 1] = \"Fused\";\n                        }(t1 = e1.NodeType || (e1.NodeType = {}));\n                    }(e1.fbs || (e1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(e1) {\n                    !function(e1) {\n                        let t1;\n                        !function(e1) {\n                            e1[e1.NONE = 0] = \"NONE\", e1[e1.tensor_type = 1] = \"tensor_type\", e1[e1.sequence_type = 2] = \"sequence_type\", e1[e1.map_type = 3] = \"map_type\";\n                        }(t1 = e1.TypeInfoValue || (e1.TypeInfoValue = {}));\n                    }(e1.fbs || (e1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsShape(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsShape(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            dim(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 4);\n                                return r1 ? (n1 || new e1.experimental.fbs.Dimension).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            dimLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 4);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            static startShape(e1) {\n                                e1.startObject(1);\n                            }\n                            static addDim(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static createDimVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startDimVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static endShape(e1) {\n                                return e1.endObject();\n                            }\n                            static createShape(e1, t1) {\n                                return n1.startShape(e1), n1.addDim(e1, t1), n1.endShape(e1);\n                            }\n                        }\n                        t1.Shape = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsDimension(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsDimension(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            value(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 4);\n                                return n1 ? (t1 || new e1.experimental.fbs.DimensionValue).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            denotation(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 6);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            static startDimension(e1) {\n                                e1.startObject(2);\n                            }\n                            static addValue(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addDenotation(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static endDimension(e1) {\n                                return e1.endObject();\n                            }\n                            static createDimension(e1, t1, r1) {\n                                return n1.startDimension(e1), n1.addValue(e1, t1), n1.addDenotation(e1, r1), n1.endDimension(e1);\n                            }\n                        }\n                        t1.Dimension = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsDimensionValue(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsDimensionValue(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            dimType() {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.readInt8(this.bb_pos + t1) : e1.experimental.fbs.DimensionValueType.UNKNOWN;\n                            }\n                            dimValue() {\n                                let e1 = this.bb.__offset(this.bb_pos, 6);\n                                return e1 ? this.bb.readInt64(this.bb_pos + e1) : this.bb.createLong(0, 0);\n                            }\n                            dimParam(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 8);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            static startDimensionValue(e1) {\n                                e1.startObject(3);\n                            }\n                            static addDimType(t1, n1) {\n                                t1.addFieldInt8(0, n1, e1.experimental.fbs.DimensionValueType.UNKNOWN);\n                            }\n                            static addDimValue(e1, t1) {\n                                e1.addFieldInt64(1, t1, e1.createLong(0, 0));\n                            }\n                            static addDimParam(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static endDimensionValue(e1) {\n                                return e1.endObject();\n                            }\n                            static createDimensionValue(e1, t1, r1, o1) {\n                                return n1.startDimensionValue(e1), n1.addDimType(e1, t1), n1.addDimValue(e1, r1), n1.addDimParam(e1, o1), n1.endDimensionValue(e1);\n                            }\n                        }\n                        t1.DimensionValue = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsTensorTypeAndShape(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsTensorTypeAndShape(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            elemType() {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.readInt32(this.bb_pos + t1) : e1.experimental.fbs.TensorDataType.UNDEFINED;\n                            }\n                            shape(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 6);\n                                return n1 ? (t1 || new e1.experimental.fbs.Shape).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            static startTensorTypeAndShape(e1) {\n                                e1.startObject(2);\n                            }\n                            static addElemType(t1, n1) {\n                                t1.addFieldInt32(0, n1, e1.experimental.fbs.TensorDataType.UNDEFINED);\n                            }\n                            static addShape(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static endTensorTypeAndShape(e1) {\n                                return e1.endObject();\n                            }\n                            static createTensorTypeAndShape(e1, t1, r1) {\n                                return n1.startTensorTypeAndShape(e1), n1.addElemType(e1, t1), n1.addShape(e1, r1), n1.endTensorTypeAndShape(e1);\n                            }\n                        }\n                        t1.TensorTypeAndShape = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsMapType(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsMapType(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            keyType() {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.readInt32(this.bb_pos + t1) : e1.experimental.fbs.TensorDataType.UNDEFINED;\n                            }\n                            valueType(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 6);\n                                return n1 ? (t1 || new e1.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            static startMapType(e1) {\n                                e1.startObject(2);\n                            }\n                            static addKeyType(t1, n1) {\n                                t1.addFieldInt32(0, n1, e1.experimental.fbs.TensorDataType.UNDEFINED);\n                            }\n                            static addValueType(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static endMapType(e1) {\n                                return e1.endObject();\n                            }\n                            static createMapType(e1, t1, r1) {\n                                return n1.startMapType(e1), n1.addKeyType(e1, t1), n1.addValueType(e1, r1), n1.endMapType(e1);\n                            }\n                        }\n                        t1.MapType = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsSequenceType(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsSequenceType(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            elemType(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 4);\n                                return n1 ? (t1 || new e1.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            static startSequenceType(e1) {\n                                e1.startObject(1);\n                            }\n                            static addElemType(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static endSequenceType(e1) {\n                                return e1.endObject();\n                            }\n                            static createSequenceType(e1, t1) {\n                                return n1.startSequenceType(e1), n1.addElemType(e1, t1), n1.endSequenceType(e1);\n                            }\n                        }\n                        t1.SequenceType = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(e1) {\n                    (e1.fbs || (e1.fbs = {})).EdgeEnd = class {\n                        constructor(){\n                            this.bb = null, this.bb_pos = 0;\n                        }\n                        __init(e1, t1) {\n                            return this.bb_pos = e1, this.bb = t1, this;\n                        }\n                        nodeIndex() {\n                            return this.bb.readUint32(this.bb_pos);\n                        }\n                        srcArgIndex() {\n                            return this.bb.readInt32(this.bb_pos + 4);\n                        }\n                        dstArgIndex() {\n                            return this.bb.readInt32(this.bb_pos + 8);\n                        }\n                        static createEdgeEnd(e1, t1, n1, r1) {\n                            return e1.prep(4, 12), e1.writeInt32(r1), e1.writeInt32(n1), e1.writeInt32(t1), e1.offset();\n                        }\n                    };\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsNodeEdge(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsNodeEdge(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            nodeIndex() {\n                                let e1 = this.bb.__offset(this.bb_pos, 4);\n                                return e1 ? this.bb.readUint32(this.bb_pos + e1) : 0;\n                            }\n                            inputEdges(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 6);\n                                return r1 ? (n1 || new e1.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos + r1) + 12 * t1, this.bb) : null;\n                            }\n                            inputEdgesLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 6);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            outputEdges(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 8);\n                                return r1 ? (n1 || new e1.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos + r1) + 12 * t1, this.bb) : null;\n                            }\n                            outputEdgesLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 8);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            static startNodeEdge(e1) {\n                                e1.startObject(3);\n                            }\n                            static addNodeIndex(e1, t1) {\n                                e1.addFieldInt32(0, t1, 0);\n                            }\n                            static addInputEdges(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static startInputEdgesVector(e1, t1) {\n                                e1.startVector(12, t1, 4);\n                            }\n                            static addOutputEdges(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static startOutputEdgesVector(e1, t1) {\n                                e1.startVector(12, t1, 4);\n                            }\n                            static endNodeEdge(e1) {\n                                return e1.endObject();\n                            }\n                            static createNodeEdge(e1, t1, r1, o1) {\n                                return n1.startNodeEdge(e1), n1.addNodeIndex(e1, t1), n1.addInputEdges(e1, r1), n1.addOutputEdges(e1, o1), n1.endNodeEdge(e1);\n                            }\n                        }\n                        t1.NodeEdge = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsNode(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsNode(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            name(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            docString(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 6);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            domain(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 8);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            sinceVersion() {\n                                let e1 = this.bb.__offset(this.bb_pos, 10);\n                                return e1 ? this.bb.readInt32(this.bb_pos + e1) : 0;\n                            }\n                            index() {\n                                let e1 = this.bb.__offset(this.bb_pos, 12);\n                                return e1 ? this.bb.readUint32(this.bb_pos + e1) : 0;\n                            }\n                            opType(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 14);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            type() {\n                                let t1 = this.bb.__offset(this.bb_pos, 16);\n                                return t1 ? this.bb.readInt32(this.bb_pos + t1) : e1.experimental.fbs.NodeType.Primitive;\n                            }\n                            executionProviderType(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 18);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            inputs(e1, t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 20);\n                                return n1 ? this.bb.__string(this.bb.__vector(this.bb_pos + n1) + 4 * e1, t1) : null;\n                            }\n                            inputsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 20);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            outputs(e1, t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 22);\n                                return n1 ? this.bb.__string(this.bb.__vector(this.bb_pos + n1) + 4 * e1, t1) : null;\n                            }\n                            outputsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 22);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            attributes(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 24);\n                                return r1 ? (n1 || new e1.experimental.fbs.Attribute).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            attributesLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 24);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            inputArgCounts(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 26);\n                                return t1 ? this.bb.readInt32(this.bb.__vector(this.bb_pos + t1) + 4 * e1) : 0;\n                            }\n                            inputArgCountsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 26);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            inputArgCountsArray() {\n                                let e1 = this.bb.__offset(this.bb_pos, 26);\n                                return e1 ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + e1), this.bb.__vector_len(this.bb_pos + e1)) : null;\n                            }\n                            implicitInputs(e1, t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 28);\n                                return n1 ? this.bb.__string(this.bb.__vector(this.bb_pos + n1) + 4 * e1, t1) : null;\n                            }\n                            implicitInputsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 28);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            static startNode(e1) {\n                                e1.startObject(13);\n                            }\n                            static addName(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addDocString(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static addDomain(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static addSinceVersion(e1, t1) {\n                                e1.addFieldInt32(3, t1, 0);\n                            }\n                            static addIndex(e1, t1) {\n                                e1.addFieldInt32(4, t1, 0);\n                            }\n                            static addOpType(e1, t1) {\n                                e1.addFieldOffset(5, t1, 0);\n                            }\n                            static addType(t1, n1) {\n                                t1.addFieldInt32(6, n1, e1.experimental.fbs.NodeType.Primitive);\n                            }\n                            static addExecutionProviderType(e1, t1) {\n                                e1.addFieldOffset(7, t1, 0);\n                            }\n                            static addInputs(e1, t1) {\n                                e1.addFieldOffset(8, t1, 0);\n                            }\n                            static createInputsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startInputsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addOutputs(e1, t1) {\n                                e1.addFieldOffset(9, t1, 0);\n                            }\n                            static createOutputsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startOutputsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addAttributes(e1, t1) {\n                                e1.addFieldOffset(10, t1, 0);\n                            }\n                            static createAttributesVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startAttributesVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addInputArgCounts(e1, t1) {\n                                e1.addFieldOffset(11, t1, 0);\n                            }\n                            static createInputArgCountsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addInt32(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startInputArgCountsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addImplicitInputs(e1, t1) {\n                                e1.addFieldOffset(12, t1, 0);\n                            }\n                            static createImplicitInputsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startImplicitInputsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static endNode(e1) {\n                                return e1.endObject();\n                            }\n                            static createNode(e1, t1, r1, o1, i1, s1, a1, u1, l1, c1, p1, d1, f1, h1) {\n                                return n1.startNode(e1), n1.addName(e1, t1), n1.addDocString(e1, r1), n1.addDomain(e1, o1), n1.addSinceVersion(e1, i1), n1.addIndex(e1, s1), n1.addOpType(e1, a1), n1.addType(e1, u1), n1.addExecutionProviderType(e1, l1), n1.addInputs(e1, c1), n1.addOutputs(e1, p1), n1.addAttributes(e1, d1), n1.addInputArgCounts(e1, f1), n1.addImplicitInputs(e1, h1), n1.endNode(e1);\n                            }\n                        }\n                        t1.Node = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsValueInfo(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsValueInfo(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            name(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            docString(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 6);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            type(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 8);\n                                return n1 ? (t1 || new e1.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            static startValueInfo(e1) {\n                                e1.startObject(3);\n                            }\n                            static addName(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addDocString(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static addType(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static endValueInfo(e1) {\n                                return e1.endObject();\n                            }\n                            static createValueInfo(e1, t1, r1, o1) {\n                                return n1.startValueInfo(e1), n1.addName(e1, t1), n1.addDocString(e1, r1), n1.addType(e1, o1), n1.endValueInfo(e1);\n                            }\n                        }\n                        t1.ValueInfo = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsTypeInfo(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsTypeInfo(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            denotation(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            valueType() {\n                                let t1 = this.bb.__offset(this.bb_pos, 6);\n                                return t1 ? this.bb.readUint8(this.bb_pos + t1) : e1.experimental.fbs.TypeInfoValue.NONE;\n                            }\n                            value(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 8);\n                                return t1 ? this.bb.__union(e1, this.bb_pos + t1) : null;\n                            }\n                            static startTypeInfo(e1) {\n                                e1.startObject(3);\n                            }\n                            static addDenotation(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addValueType(t1, n1) {\n                                t1.addFieldInt8(1, n1, e1.experimental.fbs.TypeInfoValue.NONE);\n                            }\n                            static addValue(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static endTypeInfo(e1) {\n                                return e1.endObject();\n                            }\n                            static createTypeInfo(e1, t1, r1, o1) {\n                                return n1.startTypeInfo(e1), n1.addDenotation(e1, t1), n1.addValueType(e1, r1), n1.addValue(e1, o1), n1.endTypeInfo(e1);\n                            }\n                        }\n                        t1.TypeInfo = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(e1) {\n                    !function(e1) {\n                        class t1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsOperatorSetId(e1, n1) {\n                                return (n1 || new t1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsOperatorSetId(e1, n1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (n1 || new t1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            domain(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            version() {\n                                let e1 = this.bb.__offset(this.bb_pos, 6);\n                                return e1 ? this.bb.readInt64(this.bb_pos + e1) : this.bb.createLong(0, 0);\n                            }\n                            static startOperatorSetId(e1) {\n                                e1.startObject(2);\n                            }\n                            static addDomain(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addVersion(e1, t1) {\n                                e1.addFieldInt64(1, t1, e1.createLong(0, 0));\n                            }\n                            static endOperatorSetId(e1) {\n                                return e1.endObject();\n                            }\n                            static createOperatorSetId(e1, n1, r1) {\n                                return t1.startOperatorSetId(e1), t1.addDomain(e1, n1), t1.addVersion(e1, r1), t1.endOperatorSetId(e1);\n                            }\n                        }\n                        e1.OperatorSetId = t1;\n                    }(e1.fbs || (e1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsTensor(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsTensor(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            name(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            docString(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 6);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            dims(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 8);\n                                return t1 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + t1) + 8 * e1) : this.bb.createLong(0, 0);\n                            }\n                            dimsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 8);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            dataType() {\n                                let t1 = this.bb.__offset(this.bb_pos, 10);\n                                return t1 ? this.bb.readInt32(this.bb_pos + t1) : e1.experimental.fbs.TensorDataType.UNDEFINED;\n                            }\n                            rawData(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 12);\n                                return t1 ? this.bb.readUint8(this.bb.__vector(this.bb_pos + t1) + e1) : 0;\n                            }\n                            rawDataLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 12);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            rawDataArray() {\n                                let e1 = this.bb.__offset(this.bb_pos, 12);\n                                return e1 ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + e1), this.bb.__vector_len(this.bb_pos + e1)) : null;\n                            }\n                            stringData(e1, t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 14);\n                                return n1 ? this.bb.__string(this.bb.__vector(this.bb_pos + n1) + 4 * e1, t1) : null;\n                            }\n                            stringDataLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 14);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            static startTensor(e1) {\n                                e1.startObject(6);\n                            }\n                            static addName(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addDocString(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static addDims(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static createDimsVector(e1, t1) {\n                                e1.startVector(8, t1.length, 8);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addInt64(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startDimsVector(e1, t1) {\n                                e1.startVector(8, t1, 8);\n                            }\n                            static addDataType(t1, n1) {\n                                t1.addFieldInt32(3, n1, e1.experimental.fbs.TensorDataType.UNDEFINED);\n                            }\n                            static addRawData(e1, t1) {\n                                e1.addFieldOffset(4, t1, 0);\n                            }\n                            static createRawDataVector(e1, t1) {\n                                e1.startVector(1, t1.length, 1);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addInt8(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startRawDataVector(e1, t1) {\n                                e1.startVector(1, t1, 1);\n                            }\n                            static addStringData(e1, t1) {\n                                e1.addFieldOffset(5, t1, 0);\n                            }\n                            static createStringDataVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startStringDataVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static endTensor(e1) {\n                                return e1.endObject();\n                            }\n                            static createTensor(e1, t1, r1, o1, i1, s1, a1) {\n                                return n1.startTensor(e1), n1.addName(e1, t1), n1.addDocString(e1, r1), n1.addDims(e1, o1), n1.addDataType(e1, i1), n1.addRawData(e1, s1), n1.addStringData(e1, a1), n1.endTensor(e1);\n                            }\n                        }\n                        t1.Tensor = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsSparseTensor(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsSparseTensor(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            values(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 4);\n                                return n1 ? (t1 || new e1.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            indices(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 6);\n                                return n1 ? (t1 || new e1.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            dims(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 8);\n                                return t1 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + t1) + 8 * e1) : this.bb.createLong(0, 0);\n                            }\n                            dimsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 8);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            static startSparseTensor(e1) {\n                                e1.startObject(3);\n                            }\n                            static addValues(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addIndices(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static addDims(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static createDimsVector(e1, t1) {\n                                e1.startVector(8, t1.length, 8);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addInt64(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startDimsVector(e1, t1) {\n                                e1.startVector(8, t1, 8);\n                            }\n                            static endSparseTensor(e1) {\n                                return e1.endObject();\n                            }\n                            static createSparseTensor(e1, t1, r1, o1) {\n                                return n1.startSparseTensor(e1), n1.addValues(e1, t1), n1.addIndices(e1, r1), n1.addDims(e1, o1), n1.endSparseTensor(e1);\n                            }\n                        }\n                        t1.SparseTensor = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsAttribute(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsAttribute(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            name(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            docString(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 6);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            type() {\n                                let t1 = this.bb.__offset(this.bb_pos, 8);\n                                return t1 ? this.bb.readInt32(this.bb_pos + t1) : e1.experimental.fbs.AttributeType.UNDEFINED;\n                            }\n                            f() {\n                                let e1 = this.bb.__offset(this.bb_pos, 10);\n                                return e1 ? this.bb.readFloat32(this.bb_pos + e1) : 0;\n                            }\n                            i() {\n                                let e1 = this.bb.__offset(this.bb_pos, 12);\n                                return e1 ? this.bb.readInt64(this.bb_pos + e1) : this.bb.createLong(0, 0);\n                            }\n                            s(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 14);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            t(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 16);\n                                return n1 ? (t1 || new e1.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            g(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 18);\n                                return n1 ? (t1 || new e1.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            floats(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 20);\n                                return t1 ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + t1) + 4 * e1) : 0;\n                            }\n                            floatsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 20);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            floatsArray() {\n                                let e1 = this.bb.__offset(this.bb_pos, 20);\n                                return e1 ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + e1), this.bb.__vector_len(this.bb_pos + e1)) : null;\n                            }\n                            ints(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 22);\n                                return t1 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + t1) + 8 * e1) : this.bb.createLong(0, 0);\n                            }\n                            intsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 22);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            strings(e1, t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 24);\n                                return n1 ? this.bb.__string(this.bb.__vector(this.bb_pos + n1) + 4 * e1, t1) : null;\n                            }\n                            stringsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 24);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            tensors(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 26);\n                                return r1 ? (n1 || new e1.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            tensorsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 26);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            graphs(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 28);\n                                return r1 ? (n1 || new e1.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            graphsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 28);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            static startAttribute(e1) {\n                                e1.startObject(13);\n                            }\n                            static addName(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addDocString(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static addType(t1, n1) {\n                                t1.addFieldInt32(2, n1, e1.experimental.fbs.AttributeType.UNDEFINED);\n                            }\n                            static addF(e1, t1) {\n                                e1.addFieldFloat32(3, t1, 0);\n                            }\n                            static addI(e1, t1) {\n                                e1.addFieldInt64(4, t1, e1.createLong(0, 0));\n                            }\n                            static addS(e1, t1) {\n                                e1.addFieldOffset(5, t1, 0);\n                            }\n                            static addT(e1, t1) {\n                                e1.addFieldOffset(6, t1, 0);\n                            }\n                            static addG(e1, t1) {\n                                e1.addFieldOffset(7, t1, 0);\n                            }\n                            static addFloats(e1, t1) {\n                                e1.addFieldOffset(8, t1, 0);\n                            }\n                            static createFloatsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addFloat32(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startFloatsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addInts(e1, t1) {\n                                e1.addFieldOffset(9, t1, 0);\n                            }\n                            static createIntsVector(e1, t1) {\n                                e1.startVector(8, t1.length, 8);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addInt64(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startIntsVector(e1, t1) {\n                                e1.startVector(8, t1, 8);\n                            }\n                            static addStrings(e1, t1) {\n                                e1.addFieldOffset(10, t1, 0);\n                            }\n                            static createStringsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startStringsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addTensors(e1, t1) {\n                                e1.addFieldOffset(11, t1, 0);\n                            }\n                            static createTensorsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startTensorsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addGraphs(e1, t1) {\n                                e1.addFieldOffset(12, t1, 0);\n                            }\n                            static createGraphsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startGraphsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static endAttribute(e1) {\n                                return e1.endObject();\n                            }\n                            static createAttribute(e1, t1, r1, o1, i1, s1, a1, u1, l1, c1, p1, d1, f1, h1) {\n                                return n1.startAttribute(e1), n1.addName(e1, t1), n1.addDocString(e1, r1), n1.addType(e1, o1), n1.addF(e1, i1), n1.addI(e1, s1), n1.addS(e1, a1), n1.addT(e1, u1), n1.addG(e1, l1), n1.addFloats(e1, c1), n1.addInts(e1, p1), n1.addStrings(e1, d1), n1.addTensors(e1, f1), n1.addGraphs(e1, h1), n1.endAttribute(e1);\n                            }\n                        }\n                        t1.Attribute = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsGraph(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsGraph(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            initializers(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 4);\n                                return r1 ? (n1 || new e1.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            initializersLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 4);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            nodeArgs(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 6);\n                                return r1 ? (n1 || new e1.experimental.fbs.ValueInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            nodeArgsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 6);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            nodes(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 8);\n                                return r1 ? (n1 || new e1.experimental.fbs.Node).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            nodesLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 8);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            maxNodeIndex() {\n                                let e1 = this.bb.__offset(this.bb_pos, 10);\n                                return e1 ? this.bb.readUint32(this.bb_pos + e1) : 0;\n                            }\n                            nodeEdges(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 12);\n                                return r1 ? (n1 || new e1.experimental.fbs.NodeEdge).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            nodeEdgesLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 12);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            inputs(e1, t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 14);\n                                return n1 ? this.bb.__string(this.bb.__vector(this.bb_pos + n1) + 4 * e1, t1) : null;\n                            }\n                            inputsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 14);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            outputs(e1, t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 16);\n                                return n1 ? this.bb.__string(this.bb.__vector(this.bb_pos + n1) + 4 * e1, t1) : null;\n                            }\n                            outputsLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 16);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            sparseInitializers(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 18);\n                                return r1 ? (n1 || new e1.experimental.fbs.SparseTensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            sparseInitializersLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 18);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            static startGraph(e1) {\n                                e1.startObject(8);\n                            }\n                            static addInitializers(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static createInitializersVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startInitializersVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addNodeArgs(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static createNodeArgsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startNodeArgsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addNodes(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static createNodesVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startNodesVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addMaxNodeIndex(e1, t1) {\n                                e1.addFieldInt32(3, t1, 0);\n                            }\n                            static addNodeEdges(e1, t1) {\n                                e1.addFieldOffset(4, t1, 0);\n                            }\n                            static createNodeEdgesVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startNodeEdgesVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addInputs(e1, t1) {\n                                e1.addFieldOffset(5, t1, 0);\n                            }\n                            static createInputsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startInputsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addOutputs(e1, t1) {\n                                e1.addFieldOffset(6, t1, 0);\n                            }\n                            static createOutputsVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startOutputsVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addSparseInitializers(e1, t1) {\n                                e1.addFieldOffset(7, t1, 0);\n                            }\n                            static createSparseInitializersVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startSparseInitializersVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static endGraph(e1) {\n                                return e1.endObject();\n                            }\n                            static createGraph(e1, t1, r1, o1, i1, s1, a1, u1, l1) {\n                                return n1.startGraph(e1), n1.addInitializers(e1, t1), n1.addNodeArgs(e1, r1), n1.addNodes(e1, o1), n1.addMaxNodeIndex(e1, i1), n1.addNodeEdges(e1, s1), n1.addInputs(e1, a1), n1.addOutputs(e1, u1), n1.addSparseInitializers(e1, l1), n1.endGraph(e1);\n                            }\n                        }\n                        t1.Graph = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsModel(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsModel(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            irVersion() {\n                                let e1 = this.bb.__offset(this.bb_pos, 4);\n                                return e1 ? this.bb.readInt64(this.bb_pos + e1) : this.bb.createLong(0, 0);\n                            }\n                            opsetImport(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 6);\n                                return r1 ? (n1 || new e1.experimental.fbs.OperatorSetId).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            opsetImportLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 6);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            producerName(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 8);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            producerVersion(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 10);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            domain(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 12);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            modelVersion() {\n                                let e1 = this.bb.__offset(this.bb_pos, 14);\n                                return e1 ? this.bb.readInt64(this.bb_pos + e1) : this.bb.createLong(0, 0);\n                            }\n                            docString(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 16);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            graph(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 18);\n                                return n1 ? (t1 || new e1.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            graphDocString(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 20);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            static startModel(e1) {\n                                e1.startObject(9);\n                            }\n                            static addIrVersion(e1, t1) {\n                                e1.addFieldInt64(0, t1, e1.createLong(0, 0));\n                            }\n                            static addOpsetImport(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static createOpsetImportVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startOpsetImportVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addProducerName(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static addProducerVersion(e1, t1) {\n                                e1.addFieldOffset(3, t1, 0);\n                            }\n                            static addDomain(e1, t1) {\n                                e1.addFieldOffset(4, t1, 0);\n                            }\n                            static addModelVersion(e1, t1) {\n                                e1.addFieldInt64(5, t1, e1.createLong(0, 0));\n                            }\n                            static addDocString(e1, t1) {\n                                e1.addFieldOffset(6, t1, 0);\n                            }\n                            static addGraph(e1, t1) {\n                                e1.addFieldOffset(7, t1, 0);\n                            }\n                            static addGraphDocString(e1, t1) {\n                                e1.addFieldOffset(8, t1, 0);\n                            }\n                            static endModel(e1) {\n                                return e1.endObject();\n                            }\n                            static createModel(e1, t1, r1, o1, i1, s1, a1, u1, l1, c1) {\n                                return n1.startModel(e1), n1.addIrVersion(e1, t1), n1.addOpsetImport(e1, r1), n1.addProducerName(e1, o1), n1.addProducerVersion(e1, i1), n1.addDomain(e1, s1), n1.addModelVersion(e1, a1), n1.addDocString(e1, u1), n1.addGraph(e1, l1), n1.addGraphDocString(e1, c1), n1.endModel(e1);\n                            }\n                        }\n                        t1.Model = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(e1) {\n                    !function(e1) {\n                        class t1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsKernelCreateInfos(e1, n1) {\n                                return (n1 || new t1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsKernelCreateInfos(e1, n1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (n1 || new t1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            nodeIndices(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.readUint32(this.bb.__vector(this.bb_pos + t1) + 4 * e1) : 0;\n                            }\n                            nodeIndicesLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 4);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            nodeIndicesArray() {\n                                let e1 = this.bb.__offset(this.bb_pos, 4);\n                                return e1 ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + e1), this.bb.__vector_len(this.bb_pos + e1)) : null;\n                            }\n                            kernelDefHashes(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 6);\n                                return t1 ? this.bb.readUint64(this.bb.__vector(this.bb_pos + t1) + 8 * e1) : this.bb.createLong(0, 0);\n                            }\n                            kernelDefHashesLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 6);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            static startKernelCreateInfos(e1) {\n                                e1.startObject(2);\n                            }\n                            static addNodeIndices(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static createNodeIndicesVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addInt32(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startNodeIndicesVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static addKernelDefHashes(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static createKernelDefHashesVector(e1, t1) {\n                                e1.startVector(8, t1.length, 8);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addInt64(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startKernelDefHashesVector(e1, t1) {\n                                e1.startVector(8, t1, 8);\n                            }\n                            static endKernelCreateInfos(e1) {\n                                return e1.endObject();\n                            }\n                            static createKernelCreateInfos(e1, n1, r1) {\n                                return t1.startKernelCreateInfos(e1), t1.addNodeIndices(e1, n1), t1.addKernelDefHashes(e1, r1), t1.endKernelCreateInfos(e1);\n                            }\n                        }\n                        e1.KernelCreateInfos = t1;\n                    }(e1.fbs || (e1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsSubGraphSessionState(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsSubGraphSessionState(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            graphId(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            sessionState(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 6);\n                                return n1 ? (t1 || new e1.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            static startSubGraphSessionState(e1) {\n                                e1.startObject(2);\n                            }\n                            static addGraphId(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addSessionState(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static endSubGraphSessionState(e1) {\n                                let t1 = e1.endObject();\n                                return e1.requiredField(t1, 4), t1;\n                            }\n                            static createSubGraphSessionState(e1, t1, r1) {\n                                return n1.startSubGraphSessionState(e1), n1.addGraphId(e1, t1), n1.addSessionState(e1, r1), n1.endSubGraphSessionState(e1);\n                            }\n                        }\n                        t1.SubGraphSessionState = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsSessionState(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsSessionState(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            kernels(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 4);\n                                return n1 ? (t1 || new e1.experimental.fbs.KernelCreateInfos).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            subGraphSessionStates(t1, n1) {\n                                let r1 = this.bb.__offset(this.bb_pos, 6);\n                                return r1 ? (n1 || new e1.experimental.fbs.SubGraphSessionState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r1) + 4 * t1), this.bb) : null;\n                            }\n                            subGraphSessionStatesLength() {\n                                let e1 = this.bb.__offset(this.bb_pos, 6);\n                                return e1 ? this.bb.__vector_len(this.bb_pos + e1) : 0;\n                            }\n                            static startSessionState(e1) {\n                                e1.startObject(2);\n                            }\n                            static addKernels(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addSubGraphSessionStates(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static createSubGraphSessionStatesVector(e1, t1) {\n                                e1.startVector(4, t1.length, 4);\n                                for(let n1 = t1.length - 1; n1 >= 0; n1--)e1.addOffset(t1[n1]);\n                                return e1.endVector();\n                            }\n                            static startSubGraphSessionStatesVector(e1, t1) {\n                                e1.startVector(4, t1, 4);\n                            }\n                            static endSessionState(e1) {\n                                return e1.endObject();\n                            }\n                            static createSessionState(e1, t1, r1) {\n                                return n1.startSessionState(e1), n1.addKernels(e1, t1), n1.addSubGraphSessionStates(e1, r1), n1.endSessionState(e1);\n                            }\n                        }\n                        t1.SessionState = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {})), function(e1) {\n                !function(t1) {\n                    !function(t1) {\n                        class n1 {\n                            constructor(){\n                                this.bb = null, this.bb_pos = 0;\n                            }\n                            __init(e1, t1) {\n                                return this.bb_pos = e1, this.bb = t1, this;\n                            }\n                            static getRootAsInferenceSession(e1, t1) {\n                                return (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static getSizePrefixedRootAsInferenceSession(e1, t1) {\n                                return e1.setPosition(e1.position() + r1.flatbuffers.SIZE_PREFIX_LENGTH), (t1 || new n1).__init(e1.readInt32(e1.position()) + e1.position(), e1);\n                            }\n                            static bufferHasIdentifier(e1) {\n                                return e1.__has_identifier(\"ORTM\");\n                            }\n                            ortVersion(e1) {\n                                let t1 = this.bb.__offset(this.bb_pos, 4);\n                                return t1 ? this.bb.__string(this.bb_pos + t1, e1) : null;\n                            }\n                            model(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 6);\n                                return n1 ? (t1 || new e1.experimental.fbs.Model).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            sessionState(t1) {\n                                let n1 = this.bb.__offset(this.bb_pos, 8);\n                                return n1 ? (t1 || new e1.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos + n1), this.bb) : null;\n                            }\n                            static startInferenceSession(e1) {\n                                e1.startObject(3);\n                            }\n                            static addOrtVersion(e1, t1) {\n                                e1.addFieldOffset(0, t1, 0);\n                            }\n                            static addModel(e1, t1) {\n                                e1.addFieldOffset(1, t1, 0);\n                            }\n                            static addSessionState(e1, t1) {\n                                e1.addFieldOffset(2, t1, 0);\n                            }\n                            static endInferenceSession(e1) {\n                                return e1.endObject();\n                            }\n                            static finishInferenceSessionBuffer(e1, t1) {\n                                e1.finish(t1, \"ORTM\");\n                            }\n                            static finishSizePrefixedInferenceSessionBuffer(e1, t1) {\n                                e1.finish(t1, \"ORTM\", !0);\n                            }\n                            static createInferenceSession(e1, t1, r1, o1) {\n                                return n1.startInferenceSession(e1), n1.addOrtVersion(e1, t1), n1.addModel(e1, r1), n1.addSessionState(e1, o1), n1.endInferenceSession(e1);\n                            }\n                        }\n                        t1.InferenceSession = n1;\n                    }(t1.fbs || (t1.fbs = {}));\n                }(e1.experimental || (e1.experimental = {}));\n            }(t1.onnxruntime || (t1.onnxruntime = {}));\n        },\n        1723: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.OnnxjsSessionHandler = void 0;\n            const r1 = n1(6207), o1 = n1(9240);\n            t1.OnnxjsSessionHandler = class {\n                constructor(e1){\n                    this.session = e1, this.inputNames = this.session.inputNames, this.outputNames = this.session.outputNames;\n                }\n                async dispose() {}\n                async run(e1, t1, n1) {\n                    const i1 = new Map;\n                    for(const t1 in e1)if (Object.hasOwnProperty.call(e1, t1)) {\n                        const n1 = e1[t1];\n                        i1.set(t1, new o1.Tensor(n1.dims, n1.type, void 0, void 0, n1.data));\n                    }\n                    const s1 = await this.session.run(i1), a1 = {};\n                    return s1.forEach((e1, t1)=>{\n                        a1[t1] = new r1.Tensor(e1.type, e1.data, e1.dims);\n                    }), a1;\n                }\n                startProfiling() {\n                    this.session.startProfiling();\n                }\n                endProfiling() {\n                    this.session.endProfiling();\n                }\n            };\n        },\n        6027: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.Session = void 0;\n            const r1 = n1(6231), o1 = n1(6464), i1 = n1(1975), s1 = n1(6496), a1 = n1(1315), u1 = n1(1745);\n            t1.Session = class {\n                constructor(e1 = {}){\n                    this._initialized = !1, this.backendHint = e1.backendHint, this.profiler = a1.Profiler.create(e1.profiler), this.context = {\n                        profiler: this.profiler,\n                        graphInputTypes: [],\n                        graphInputDims: []\n                    };\n                }\n                get inputNames() {\n                    return this._model.graph.getInputNames();\n                }\n                get outputNames() {\n                    return this._model.graph.getOutputNames();\n                }\n                startProfiling() {\n                    this.profiler.start();\n                }\n                endProfiling() {\n                    this.profiler.stop();\n                }\n                async loadModel(e1, t1, n1) {\n                    await this.profiler.event(\"session\", \"Session.loadModel\", async ()=>{\n                        const s1 = await (0, i1.resolveBackend)(this.backendHint);\n                        if (this.sessionHandler = s1.createSessionHandler(this.context), this._model = new u1.Model, \"string\" == typeof e1) {\n                            const t1 = e1.endsWith(\".ort\");\n                            if (\"undefined\" != typeof process && process.versions && process.versions.node) {\n                                const n1 = await (0, o1.promisify)(r1.readFile)(e1);\n                                this.initialize(n1, t1);\n                            } else {\n                                const n1 = await fetch(e1), r1 = await n1.arrayBuffer();\n                                this.initialize(new Uint8Array(r1), t1);\n                            }\n                        } else if (ArrayBuffer.isView(e1)) this.initialize(e1);\n                        else {\n                            const r1 = new Uint8Array(e1, t1 || 0, n1 || e1.byteLength);\n                            this.initialize(r1);\n                        }\n                    });\n                }\n                initialize(e1, t1) {\n                    if (this._initialized) throw new Error(\"already initialized\");\n                    this.profiler.event(\"session\", \"Session.initialize\", ()=>{\n                        const n1 = this.sessionHandler.transformGraph ? this.sessionHandler : void 0;\n                        this._model.load(e1, n1, t1), this.sessionHandler.onGraphInitialized && this.sessionHandler.onGraphInitialized(this._model.graph), this.initializeOps(this._model.graph), this._executionPlan = new s1.ExecutionPlan(this._model.graph, this._ops, this.profiler);\n                    }), this._initialized = !0;\n                }\n                async run(e1) {\n                    if (!this._initialized) throw new Error(\"session not initialized yet\");\n                    return this.profiler.event(\"session\", \"Session.run\", async ()=>{\n                        const t1 = this.normalizeAndValidateInputs(e1), n1 = await this._executionPlan.execute(this.sessionHandler, t1);\n                        return this.createOutput(n1);\n                    });\n                }\n                normalizeAndValidateInputs(e1) {\n                    const t1 = this._model.graph.getInputNames();\n                    if (Array.isArray(e1)) {\n                        if (e1.length !== t1.length) throw new Error(`incorrect input array length: expected ${t1.length} but got ${e1.length}`);\n                    } else {\n                        if (e1.size !== t1.length) throw new Error(`incorrect input map size: expected ${t1.length} but got ${e1.size}`);\n                        const n1 = new Array(e1.size);\n                        let r1 = 0;\n                        for(let o1 = 0; o1 < t1.length; ++o1){\n                            const i1 = e1.get(t1[o1]);\n                            if (!i1) throw new Error(`missing input tensor for: '${name}'`);\n                            n1[r1++] = i1;\n                        }\n                        e1 = n1;\n                    }\n                    if (this.context.graphInputTypes && 0 !== this.context.graphInputTypes.length && this.context.graphInputDims && 0 !== this.context.graphInputDims.length) this.validateInputTensorDims(this.context.graphInputDims, e1, !1);\n                    else {\n                        const t1 = this._model.graph.getInputIndices(), n1 = this._model.graph.getValues(), r1 = new Array(t1.length);\n                        for(let o1 = 0; o1 < t1.length; ++o1){\n                            const i1 = n1[t1[o1]];\n                            r1[o1] = i1.type.shape.dims, this.context.graphInputTypes.push(i1.type.tensorType), this.context.graphInputDims.push(e1[o1].dims);\n                        }\n                        this.validateInputTensorDims(r1, e1, !0);\n                    }\n                    return this.validateInputTensorTypes(this.context.graphInputTypes, e1), e1;\n                }\n                validateInputTensorTypes(e1, t1) {\n                    for(let n1 = 0; n1 < t1.length; n1++){\n                        const r1 = e1[n1], o1 = t1[n1].type;\n                        if (r1 !== o1) throw new Error(`input tensor[${n1}] check failed: expected type '${r1}' but got ${o1}`);\n                    }\n                }\n                validateInputTensorDims(e1, t1, n1) {\n                    for(let r1 = 0; r1 < t1.length; r1++){\n                        const o1 = e1[r1], i1 = t1[r1].dims;\n                        if (!this.compareTensorDims(o1, i1, n1)) throw new Error(`input tensor[${r1}] check failed: expected shape '[${o1.join(\",\")}]' but got [${i1.join(\",\")}]`);\n                    }\n                }\n                compareTensorDims(e1, t1, n1) {\n                    if (e1.length !== t1.length) return !1;\n                    for(let r1 = 0; r1 < e1.length; ++r1)if (e1[r1] !== t1[r1] && (!n1 || 0 !== e1[r1])) return !1;\n                    return !0;\n                }\n                createOutput(e1) {\n                    const t1 = this._model.graph.getOutputNames();\n                    if (e1.length !== t1.length) throw new Error(\"expected number of outputs do not match number of generated outputs\");\n                    const n1 = new Map;\n                    for(let r1 = 0; r1 < t1.length; ++r1)n1.set(t1[r1], e1[r1]);\n                    return n1;\n                }\n                initializeOps(e1) {\n                    const t1 = e1.getNodes();\n                    this._ops = new Array(t1.length);\n                    for(let n1 = 0; n1 < t1.length; n1++)this._ops[n1] = this.sessionHandler.resolve(t1[n1], this._model.opsets, e1);\n                }\n            };\n        },\n        9240: function(e1, t1, n1) {\n            \"use strict\";\n            var r1 = this && this.__importDefault || function(e1) {\n                return e1 && e1.__esModule ? e1 : {\n                    default: e1\n                };\n            };\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.Tensor = void 0;\n            const o1 = n1(3442), i1 = r1(n1(1583)), s1 = n1(5127), a1 = n1(2446), u1 = n1(7273);\n            var l1 = s1.onnxruntime.experimental.fbs;\n            class c1 {\n                get data() {\n                    if (void 0 === this.cache) {\n                        const e1 = this.dataProvider(this.dataId);\n                        if (e1.length !== this.size) throw new Error(\"Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.\");\n                        this.cache = e1;\n                    }\n                    return this.cache;\n                }\n                get stringData() {\n                    if (\"string\" !== this.type) throw new TypeError(\"data type is not string\");\n                    return this.data;\n                }\n                get integerData() {\n                    switch(this.type){\n                        case \"uint8\":\n                        case \"int8\":\n                        case \"uint16\":\n                        case \"int16\":\n                        case \"int32\":\n                        case \"uint32\":\n                        case \"bool\":\n                            return this.data;\n                        default:\n                            throw new TypeError(\"data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)\");\n                    }\n                }\n                get floatData() {\n                    switch(this.type){\n                        case \"float32\":\n                        case \"float64\":\n                            return this.data;\n                        default:\n                            throw new TypeError(\"data type is not float (float32, float64)\");\n                    }\n                }\n                get numberData() {\n                    if (\"string\" !== this.type) return this.data;\n                    throw new TypeError(\"type cannot be non-number (string)\");\n                }\n                get(e1) {\n                    return this.data[u1.ShapeUtil.indicesToOffset(e1, this.strides)];\n                }\n                set(e1, t1) {\n                    this.data[u1.ShapeUtil.indicesToOffset(e1, this.strides)] = t1;\n                }\n                async getData() {\n                    return void 0 === this.cache && (this.cache = await this.asyncDataProvider(this.dataId)), this.cache;\n                }\n                get strides() {\n                    return this._strides || (this._strides = u1.ShapeUtil.computeStrides(this.dims)), this._strides;\n                }\n                constructor(e1, t1, n1, r1, i1, s1 = o1.Guid.create()){\n                    this.dims = e1, this.type = t1, this.dataProvider = n1, this.asyncDataProvider = r1, this.cache = i1, this.dataId = s1, this.size = u1.ShapeUtil.validateDimsAndCalcSize(e1);\n                    const a1 = this.size, l1 = void 0 === n1 && void 0 === r1 && void 0 === i1;\n                    if (void 0 !== i1 && i1.length !== a1) throw new RangeError(\"Input dims doesn't match data length.\");\n                    if (\"string\" === t1) {\n                        if (!(void 0 === i1 || Array.isArray(i1) && i1.every((e1)=>\"string\" == typeof e1))) throw new TypeError(\"cache should be a string array\");\n                        l1 && (this.cache = new Array(a1));\n                    } else {\n                        if (void 0 !== i1) {\n                            const e1 = d1(t1);\n                            if (!(i1 instanceof e1)) throw new TypeError(`cache should be type ${e1.name}`);\n                        }\n                        if (l1) {\n                            const e1 = new ArrayBuffer(a1 * function(e1) {\n                                switch(e1){\n                                    case \"bool\":\n                                    case \"int8\":\n                                    case \"uint8\":\n                                        return 1;\n                                    case \"int16\":\n                                    case \"uint16\":\n                                        return 2;\n                                    case \"int32\":\n                                    case \"uint32\":\n                                    case \"float32\":\n                                        return 4;\n                                    case \"float64\":\n                                        return 8;\n                                    default:\n                                        throw new Error(`cannot calculate sizeof() on type ${e1}`);\n                                }\n                            }(t1));\n                            this.cache = function(e1, t1) {\n                                return new (d1(t1))(e1);\n                            }(e1, t1);\n                        }\n                    }\n                }\n                static fromProto(e1) {\n                    if (!e1) throw new Error(\"cannot construct Value from an empty tensor\");\n                    const t1 = u1.ProtoUtil.tensorDataTypeFromProto(e1.dataType), n1 = u1.ProtoUtil.tensorDimsFromProto(e1.dims), r1 = new c1(n1, t1);\n                    if (\"string\" === t1) e1.stringData.forEach((e1, t1)=>{\n                        r1.data[t1] = (0, u1.decodeUtf8String)(e1);\n                    });\n                    else if (e1.rawData && \"number\" == typeof e1.rawData.byteLength && e1.rawData.byteLength > 0) {\n                        const t1 = r1.data, n1 = new DataView(e1.rawData.buffer, e1.rawData.byteOffset, e1.rawData.byteLength), o1 = p1(e1.dataType), i1 = e1.rawData.byteLength / o1;\n                        if (e1.rawData.byteLength % o1 != 0) throw new Error(\"invalid buffer length\");\n                        if (t1.length !== i1) throw new Error(\"buffer length mismatch\");\n                        for(let r1 = 0; r1 < i1; r1++){\n                            const i1 = h1(n1, e1.dataType, r1 * o1);\n                            t1[r1] = i1;\n                        }\n                    } else {\n                        let t1;\n                        switch(e1.dataType){\n                            case a1.onnx.TensorProto.DataType.FLOAT:\n                                t1 = e1.floatData;\n                                break;\n                            case a1.onnx.TensorProto.DataType.INT32:\n                            case a1.onnx.TensorProto.DataType.INT16:\n                            case a1.onnx.TensorProto.DataType.UINT16:\n                            case a1.onnx.TensorProto.DataType.INT8:\n                            case a1.onnx.TensorProto.DataType.UINT8:\n                            case a1.onnx.TensorProto.DataType.BOOL:\n                                t1 = e1.int32Data;\n                                break;\n                            case a1.onnx.TensorProto.DataType.INT64:\n                                t1 = e1.int64Data;\n                                break;\n                            case a1.onnx.TensorProto.DataType.DOUBLE:\n                                t1 = e1.doubleData;\n                                break;\n                            case a1.onnx.TensorProto.DataType.UINT32:\n                            case a1.onnx.TensorProto.DataType.UINT64:\n                                t1 = e1.uint64Data;\n                                break;\n                            default:\n                                throw new Error(\"unspecific error\");\n                        }\n                        if (null == t1) throw new Error(\"failed to populate data from a tensorproto value\");\n                        const n1 = r1.data;\n                        if (n1.length !== t1.length) throw new Error(\"array length mismatch\");\n                        for(let r1 = 0; r1 < t1.length; r1++){\n                            const o1 = t1[r1];\n                            i1.default.isLong(o1) ? n1[r1] = f1(o1, e1.dataType) : n1[r1] = o1;\n                        }\n                    }\n                    return r1;\n                }\n                static fromData(e1, t1, n1) {\n                    return new c1(t1, n1, void 0, void 0, e1);\n                }\n                static fromOrtTensor(e1) {\n                    if (!e1) throw new Error(\"cannot construct Value from an empty tensor\");\n                    const t1 = u1.ProtoUtil.tensorDimsFromORTFormat(e1), n1 = u1.ProtoUtil.tensorDataTypeFromProto(e1.dataType()), r1 = new c1(t1, n1);\n                    if (\"string\" === n1) for(let t1 = 0; t1 < e1.stringDataLength(); t1++)r1.data[t1] = e1.stringData(t1);\n                    else if (e1.rawDataArray() && \"number\" == typeof e1.rawDataLength() && e1.rawDataLength() > 0) {\n                        const t1 = r1.data, n1 = new DataView(e1.rawDataArray().buffer, e1.rawDataArray().byteOffset, e1.rawDataLength()), o1 = p1(e1.dataType()), i1 = e1.rawDataLength() / o1;\n                        if (e1.rawDataLength() % o1 != 0) throw new Error(\"invalid buffer length\");\n                        if (t1.length !== i1) throw new Error(\"buffer length mismatch\");\n                        for(let r1 = 0; r1 < i1; r1++){\n                            const i1 = h1(n1, e1.dataType(), r1 * o1);\n                            t1[r1] = i1;\n                        }\n                    }\n                    return r1;\n                }\n            }\n            function p1(e1) {\n                switch(e1){\n                    case a1.onnx.TensorProto.DataType.UINT8:\n                    case a1.onnx.TensorProto.DataType.INT8:\n                    case a1.onnx.TensorProto.DataType.BOOL:\n                        return 1;\n                    case a1.onnx.TensorProto.DataType.UINT16:\n                    case a1.onnx.TensorProto.DataType.INT16:\n                        return 2;\n                    case a1.onnx.TensorProto.DataType.FLOAT:\n                    case a1.onnx.TensorProto.DataType.INT32:\n                    case a1.onnx.TensorProto.DataType.UINT32:\n                        return 4;\n                    case a1.onnx.TensorProto.DataType.INT64:\n                    case a1.onnx.TensorProto.DataType.DOUBLE:\n                    case a1.onnx.TensorProto.DataType.UINT64:\n                        return 8;\n                    default:\n                        throw new Error(`cannot calculate sizeof() on type ${a1.onnx.TensorProto.DataType[e1]}`);\n                }\n            }\n            function d1(e1) {\n                switch(e1){\n                    case \"bool\":\n                    case \"uint8\":\n                        return Uint8Array;\n                    case \"int8\":\n                        return Int8Array;\n                    case \"int16\":\n                        return Int16Array;\n                    case \"uint16\":\n                        return Uint16Array;\n                    case \"int32\":\n                        return Int32Array;\n                    case \"uint32\":\n                        return Uint32Array;\n                    case \"int64\":\n                        return BigInt64Array;\n                    case \"float32\":\n                        return Float32Array;\n                    case \"float64\":\n                        return Float64Array;\n                    default:\n                        throw new Error(\"unspecified error\");\n                }\n            }\n            function f1(e1, t1) {\n                if (t1 === a1.onnx.TensorProto.DataType.INT64 || t1 === l1.TensorDataType.INT64) {\n                    if (e1.greaterThanOrEqual(2147483648) || e1.lessThan(-2147483648)) throw new TypeError(\"int64 is not supported\");\n                } else {\n                    if (t1 !== a1.onnx.TensorProto.DataType.UINT32 && t1 !== l1.TensorDataType.UINT32 && t1 !== a1.onnx.TensorProto.DataType.UINT64 && t1 !== l1.TensorDataType.UINT64) throw new TypeError(`not a LONG type: ${a1.onnx.TensorProto.DataType[t1]}`);\n                    if (e1.greaterThanOrEqual(4294967296) || e1.lessThan(0)) throw new TypeError(\"uint64 is not supported\");\n                }\n                return e1.toNumber();\n            }\n            function h1(e1, t1, n1) {\n                switch(t1){\n                    case a1.onnx.TensorProto.DataType.BOOL:\n                    case a1.onnx.TensorProto.DataType.UINT8:\n                        return e1.getUint8(n1);\n                    case a1.onnx.TensorProto.DataType.INT8:\n                        return e1.getInt8(n1);\n                    case a1.onnx.TensorProto.DataType.UINT16:\n                        return e1.getUint16(n1, !0);\n                    case a1.onnx.TensorProto.DataType.INT16:\n                        return e1.getInt16(n1, !0);\n                    case a1.onnx.TensorProto.DataType.FLOAT:\n                        return e1.getFloat32(n1, !0);\n                    case a1.onnx.TensorProto.DataType.INT32:\n                        return e1.getInt32(n1, !0);\n                    case a1.onnx.TensorProto.DataType.UINT32:\n                        return e1.getUint32(n1, !0);\n                    case a1.onnx.TensorProto.DataType.INT64:\n                        return f1(i1.default.fromBits(e1.getUint32(n1, !0), e1.getUint32(n1 + 4, !0), !1), t1);\n                    case a1.onnx.TensorProto.DataType.DOUBLE:\n                        return e1.getFloat64(n1, !0);\n                    case a1.onnx.TensorProto.DataType.UINT64:\n                        return f1(i1.default.fromBits(e1.getUint32(n1, !0), e1.getUint32(n1 + 4, !0), !0), t1);\n                    default:\n                        throw new Error(`cannot read from DataView for type ${a1.onnx.TensorProto.DataType[t1]}`);\n                }\n            }\n            t1.Tensor = c1;\n        },\n        7273: function(e1, t1, n1) {\n            \"use strict\";\n            var r1 = this && this.__importDefault || function(e1) {\n                return e1 && e1.__esModule ? e1 : {\n                    default: e1\n                };\n            };\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.decodeUtf8String = t1.MAX_CLIP = t1.MIN_CLIP = t1.PoolConvUtil = t1.ReduceUtil = t1.SplitUtil = t1.MathUtil = t1.ShapeUtil = t1.LongUtil = t1.ProtoUtil = t1.GemmUtil = t1.arrayCopyHelper = t1.BroadcastUtil = t1.MatMulUtil = t1.ArrayUtil = t1.assert = t1.checkInputsShape = void 0;\n            const o1 = n1(5686), i1 = r1(n1(1583)), s1 = n1(2446), a1 = n1(9240);\n            t1.checkInputsShape = function(e1, ...t1) {\n                if (!e1 || e1.length !== t1.length) return !1;\n                for(let n1 = 0; n1 < e1.length; n1++)if (!e1[n1].dims || e1[n1].dims.length !== t1[n1]) return !1;\n                return !0;\n            }, t1.assert = function(e1, t1) {\n                if (!e1) throw new Error(\"string\" == typeof t1 ? t1 : t1());\n            }, t1.ArrayUtil = class {\n                static arraysEqual(e1, t1) {\n                    if (e1.length !== t1.length) return !1;\n                    for(let n1 = 0; n1 < e1.length; n1++)if (e1[n1] !== t1[n1]) return !1;\n                    return !0;\n                }\n            };\n            class u1 {\n                static preprocessInputShapes(e1, t1) {\n                    return [\n                        1 === e1.length ? [\n                            1,\n                            e1[0]\n                        ] : e1,\n                        1 === t1.length ? [\n                            t1[0],\n                            1\n                        ] : t1\n                    ];\n                }\n                static postprocessOutputShape(e1, t1, n1) {\n                    1 === t1 && e1.splice(e1.length - 2, 1), 1 === n1 && e1.pop();\n                }\n                static calcMatMulShape(e1, t1) {\n                    return e1[1] !== t1[0] ? void 0 : [\n                        e1[0],\n                        t1[1]\n                    ];\n                }\n            }\n            t1.MatMulUtil = u1;\n            class l1 {\n                static calcShape(e1, t1, n1 = !1) {\n                    const r1 = e1.length, o1 = t1.length;\n                    if (0 === r1) return t1;\n                    if (0 === o1) return e1;\n                    const i1 = Math.max(e1.length, t1.length), s1 = new Array(i1);\n                    if (n1) {\n                        if (r1 < 2 || o1 < 2) return;\n                        const n1 = u1.calcMatMulShape([\n                            e1[r1 - 2],\n                            e1[r1 - 1]\n                        ], [\n                            t1[o1 - 2],\n                            t1[o1 - 1]\n                        ]);\n                        if (void 0 === n1) return;\n                        [s1[i1 - 2], s1[i1 - 1]] = n1;\n                    }\n                    for(let a1 = n1 ? 3 : 1; a1 <= i1; a1++){\n                        const n1 = r1 - a1 < 0 ? 1 : e1[r1 - a1], u1 = o1 - a1 < 0 ? 1 : t1[o1 - a1];\n                        if (n1 !== u1 && n1 > 1 && u1 > 1) return;\n                        s1[i1 - a1] = Math.max(n1, u1);\n                    }\n                    return s1;\n                }\n                static index(e1, t1) {\n                    const n1 = new Array(t1.length);\n                    return l1.fillIndex(e1, t1, n1), n1;\n                }\n                static fillIndex(e1, t1, n1) {\n                    const r1 = e1.length - t1.length;\n                    for(let o1 = 0; o1 < t1.length; o1++)n1[o1] = e1[r1 + o1] % t1[o1];\n                }\n                static calc(e1, t1, n1, r1, o1) {\n                    const i1 = l1.calcShape(e1.dims, t1.dims);\n                    if (i1) {\n                        if (r1 && !d1.areEqual(i1, e1.dims)) return;\n                        const s1 = d1.size(i1), u1 = r1 ? e1 : new a1.Tensor(i1, o1 || e1.type);\n                        if (0 === i1.length) u1.set([], n1(e1.get([]), t1.get([])));\n                        else {\n                            const r1 = new Array(i1.length), o1 = new Array(e1.dims.length), a1 = new Array(t1.dims.length);\n                            let c1, p1 = 0, d1 = 0, f1 = !1, h1 = !1;\n                            0 === e1.dims.length && (p1 = e1.get([]), f1 = !0), 0 === t1.dims.length && (d1 = t1.get([]), h1 = !0);\n                            for(let g1 = 0; g1 < s1; g1++){\n                                c1 = g1;\n                                for(let e1 = i1.length - 1; e1 >= 0; e1--)r1[e1] = c1 % i1[e1], c1 = Math.floor(c1 / i1[e1]);\n                                f1 || (l1.fillIndex(r1, e1.dims, o1), p1 = e1.get(o1)), h1 || (l1.fillIndex(r1, t1.dims, a1), d1 = t1.get(a1)), u1.set(r1, n1(p1, d1));\n                            }\n                        }\n                        return u1;\n                    }\n                }\n                static isValidBroadcast(e1, t1) {\n                    const n1 = e1.length, r1 = t1.length;\n                    if (n1 > r1) return !1;\n                    for(let o1 = 1; o1 <= n1; o1++)if (1 !== e1[n1 - o1] && e1[n1 - o1] !== t1[r1 - o1]) return !1;\n                    return !0;\n                }\n                static getBroadcastDims(e1, t1) {\n                    const n1 = e1.length, r1 = [];\n                    for(let o1 = 0; o1 < n1; o1++){\n                        const i1 = n1 - 1 - o1, s1 = e1[i1] || 1;\n                        (t1[t1.length - 1 - o1] || 1) > 1 && 1 === s1 && r1.unshift(i1);\n                    }\n                    return r1;\n                }\n            }\n            t1.BroadcastUtil = l1, t1.arrayCopyHelper = function(e1, t1, n1, r1, o1) {\n                if (r1 < 0 || r1 >= t1.length) throw new Error(\"sourceIndex out of bounds\");\n                if (n1 < 0 || n1 >= e1.length) throw new Error(\"targetIndex out of bounds\");\n                if (r1 + o1 > t1.length) throw new Error(\"source indices to be copied are outside bounds\");\n                if (n1 + o1 > e1.length) throw new Error(\"target array is too small to hold result\");\n                for(let i1 = 0; i1 < o1; i1++)e1[n1 + i1] = t1[r1 + i1];\n            }, t1.GemmUtil = class {\n                static getShapeOfGemmResult(e1, t1, n1, r1, o1) {\n                    if (2 !== e1.length || 2 !== n1.length) throw new Error(\"shape need to be of size 2\");\n                    let i1, s1, a1;\n                    t1 ? (i1 = e1[1], s1 = e1[0]) : (i1 = e1[0], s1 = e1[1]);\n                    let u1 = -1;\n                    if (r1 ? (a1 = n1[0], u1 = 1) : (a1 = n1[1], u1 = 0), n1[u1] !== s1) throw new Error(\"dimension mismatch\");\n                    if (i1 <= 0 || a1 <= 0 || s1 <= 0) throw new Error(\"invalid shape specified\");\n                    if (o1 && !l1.isValidBroadcast(o1, [\n                        i1,\n                        a1\n                    ])) throw new Error(\"gemm: invalid bias shape for broadcast\");\n                    return [\n                        i1,\n                        a1,\n                        s1\n                    ];\n                }\n            };\n            class c1 {\n                static tensorDataTypeFromProto(e1) {\n                    switch(e1){\n                        case s1.onnx.TensorProto.DataType.INT8:\n                            return \"int8\";\n                        case s1.onnx.TensorProto.DataType.UINT8:\n                            return \"uint8\";\n                        case s1.onnx.TensorProto.DataType.BOOL:\n                            return \"bool\";\n                        case s1.onnx.TensorProto.DataType.INT16:\n                            return \"int16\";\n                        case s1.onnx.TensorProto.DataType.UINT16:\n                            return \"uint16\";\n                        case s1.onnx.TensorProto.DataType.INT32:\n                            return \"int32\";\n                        case s1.onnx.TensorProto.DataType.UINT32:\n                            return \"uint32\";\n                        case s1.onnx.TensorProto.DataType.FLOAT:\n                            return \"float32\";\n                        case s1.onnx.TensorProto.DataType.DOUBLE:\n                            return \"float64\";\n                        case s1.onnx.TensorProto.DataType.STRING:\n                            return \"string\";\n                        case s1.onnx.TensorProto.DataType.INT64:\n                            return \"int32\";\n                        case s1.onnx.TensorProto.DataType.UINT64:\n                            return \"uint32\";\n                        default:\n                            throw new Error(`unsupported data type: ${s1.onnx.TensorProto.DataType[e1]}`);\n                    }\n                }\n                static tensorDataTypeStringToEnum(e1) {\n                    switch(e1){\n                        case \"int8\":\n                            return s1.onnx.TensorProto.DataType.INT8;\n                        case \"uint8\":\n                            return s1.onnx.TensorProto.DataType.UINT8;\n                        case \"bool\":\n                            return s1.onnx.TensorProto.DataType.BOOL;\n                        case \"int16\":\n                            return s1.onnx.TensorProto.DataType.INT16;\n                        case \"uint16\":\n                            return s1.onnx.TensorProto.DataType.UINT16;\n                        case \"int32\":\n                            return s1.onnx.TensorProto.DataType.INT32;\n                        case \"uint32\":\n                            return s1.onnx.TensorProto.DataType.UINT32;\n                        case \"float32\":\n                            return s1.onnx.TensorProto.DataType.FLOAT;\n                        case \"float64\":\n                            return s1.onnx.TensorProto.DataType.DOUBLE;\n                        case \"string\":\n                            return s1.onnx.TensorProto.DataType.STRING;\n                        case \"int64\":\n                            return s1.onnx.TensorProto.DataType.INT64;\n                        case \"uint64\":\n                            return s1.onnx.TensorProto.DataType.UINT64;\n                        default:\n                            throw new Error(`unsupported data type: ${e1}`);\n                    }\n                }\n                static tensorDimsFromProto(e1) {\n                    return e1.map((e1)=>i1.default.isLong(e1) ? e1.toNumber() : e1);\n                }\n                static tensorValueTypeFromProto(e1) {\n                    return {\n                        tensorType: c1.tensorDataTypeFromProto(e1.elemType),\n                        shape: {\n                            dims: c1.tensorDimsFromProto(e1.shape.dim.map((e1)=>e1.dimValue))\n                        }\n                    };\n                }\n                static tensorDimsFromORTFormat(e1) {\n                    const t1 = [];\n                    for(let n1 = 0; n1 < e1.dimsLength(); n1++)t1.push(p1.longToNumber(e1.dims(n1)));\n                    return t1;\n                }\n                static tensorAttributesFromORTFormat(e1) {\n                    const t1 = [];\n                    for(let n1 = 0; n1 < e1.attributesLength(); n1++)t1.push(e1.attributes(n1));\n                    return t1;\n                }\n            }\n            t1.ProtoUtil = c1;\n            class p1 {\n                static longToNumber(e1, t1) {\n                    return i1.default.isLong(e1) ? e1.toNumber() : e1 instanceof o1.flatbuffers.Long ? i1.default.fromValue({\n                        low: e1.low,\n                        high: e1.high,\n                        unsigned: null != t1 && t1\n                    }).toNumber() : e1;\n                }\n                static isLong(e1) {\n                    return i1.default.isLong(e1) || e1 instanceof o1.flatbuffers.Long;\n                }\n            }\n            t1.LongUtil = p1;\n            class d1 {\n                static size(e1) {\n                    return d1.getSizeFromDimensionRange(e1, 0, e1.length);\n                }\n                static sizeFromDimension(e1, t1) {\n                    if (t1 < 0 || t1 > e1.length) throw new Error(`invalid dimension of ${t1} for sizeFromDimension as Tensor has ${e1.length} dimensions.`);\n                    return d1.getSizeFromDimensionRange(e1, t1, e1.length);\n                }\n                static sizeToDimension(e1, t1) {\n                    if (t1 < 0 || t1 > e1.length) throw new Error(`invalid dimension of ${t1} for sizeToDimension as Tensor has ${e1.length} dimensions.`);\n                    return d1.getSizeFromDimensionRange(e1, 0, t1);\n                }\n                static getSizeFromDimensionRange(e1, t1, n1) {\n                    let r1 = 1;\n                    for(let o1 = t1; o1 < n1; o1++){\n                        if (e1[o1] <= 0) throw new Error(\"cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.\");\n                        r1 *= e1[o1];\n                    }\n                    return r1;\n                }\n                static computeStrides(e1) {\n                    const t1 = e1.length;\n                    if (0 === t1) return [];\n                    if (1 === t1) return [\n                        1\n                    ];\n                    const n1 = new Array(t1);\n                    n1[t1 - 1] = 1, n1[t1 - 2] = e1[t1 - 1];\n                    for(let r1 = t1 - 3; r1 >= 0; --r1)n1[r1] = n1[r1 + 1] * e1[r1 + 1];\n                    return n1;\n                }\n                static transpose(e1) {\n                    return e1.slice().reverse();\n                }\n                static indicesToOffset(e1, t1, n1) {\n                    void 0 === n1 && (n1 = e1.length);\n                    let r1 = 0;\n                    for(let o1 = 0; o1 < n1; ++o1)r1 += t1[o1] * e1[o1];\n                    return r1;\n                }\n                static offsetToIndices(e1, t1) {\n                    const n1 = t1.length;\n                    if (0 === n1) return [];\n                    if (1 === n1) return [\n                        e1 * t1[0]\n                    ];\n                    const r1 = new Array(t1.length);\n                    for(let n1 = 0; n1 < r1.length - 1; ++n1)r1[n1] = Math.floor(e1 / t1[n1]), e1 -= r1[n1] * t1[n1];\n                    return r1[r1.length - 1] = e1, r1;\n                }\n                static normalizeAxis(e1, t1) {\n                    if (e1 < -t1 && e1 >= t1) throw new Error(\"unsupported axis for this operation.\");\n                    return e1 < 0 ? e1 + t1 : e1;\n                }\n                static normalizeAxes(e1, t1) {\n                    return e1.map((e1)=>this.normalizeAxis(e1, t1));\n                }\n                static incrementIndex(e1, t1, n1) {\n                    if (0 === t1.length || 0 === e1.length) throw new Error(\"Index incrementing unsupported for scalar Tensor\");\n                    if (void 0 === n1) n1 = t1.length;\n                    else if (n1 <= 0 || n1 > t1.length) throw new Error(\"Incorrect axis to increment on\");\n                    for(let r1 = n1 - 1; r1 >= 0 && (e1[r1]++, !(e1[r1] < t1[r1])); --r1)e1[r1] = 0;\n                }\n                static calculateReshapedDims(e1, t1) {\n                    if (0 === t1.length) {\n                        if (0 === e1.length || 1 === d1.size(e1)) return [];\n                        throw new Error(\"cannot reshape to a scalar Tensor\");\n                    }\n                    const n1 = t1.length, r1 = new Array(n1);\n                    let o1 = -1, i1 = 1;\n                    for(let s1 = 0; s1 < n1; s1++){\n                        if (t1[s1] < -1) throw new Error(\"a dimension in shape hints cannot be less than -1\");\n                        if (-1 === t1[s1]) {\n                            if (-1 !== o1) throw new Error(\"at most one dimension in shape hints can be -1\");\n                            o1 = s1;\n                        } else {\n                            if (0 === t1[s1]) {\n                                if (s1 >= e1.length) throw new Error(\"the dimension with value zero exceeds the dimension size of the input tensor\");\n                                r1[s1] = e1[s1];\n                            } else r1[s1] = t1[s1];\n                            i1 *= r1[s1];\n                        }\n                    }\n                    const s1 = d1.size(e1);\n                    if (-1 !== o1) {\n                        if (s1 % i1 != 0) throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${e1}] Output shape: [${t1}]`);\n                        r1[o1] = s1 / i1;\n                    } else if (i1 !== s1) throw new Error(\"reshapedDims and originalDims don't have matching sizes\");\n                    return r1;\n                }\n                static sortBasedOnPerm(e1, t1) {\n                    return t1 ? t1.map((t1)=>e1[t1]) : e1.slice().reverse();\n                }\n                static padShape(e1, t1) {\n                    const n1 = e1.length;\n                    return e1.map((e1, r1)=>e1 + t1[r1] + t1[r1 + n1]);\n                }\n                static areEqual(e1, t1) {\n                    return e1.length === t1.length && e1.every((e1, n1)=>e1 === t1[n1]);\n                }\n                static validateDimsAndCalcSize(e1) {\n                    if (e1.length > 6) throw new TypeError(\"Only rank 0 to 6 is supported for tensor shape.\");\n                    let t1 = 1;\n                    for (const n1 of e1){\n                        if (!Number.isInteger(n1)) throw new TypeError(`Invalid shape: ${n1} is not an integer`);\n                        if (n1 < 0 || n1 > 2147483647) throw new TypeError(`Invalid shape: length ${n1} is not allowed`);\n                        t1 *= n1;\n                    }\n                    return t1;\n                }\n                static flattenShape(e1, t1) {\n                    t1 < 0 && (t1 += e1.length);\n                    const n1 = e1.reduce((e1, t1)=>e1 * t1, 1), r1 = e1.slice(t1).reduce((e1, t1)=>e1 * t1, 1);\n                    return [\n                        n1 / r1,\n                        r1\n                    ];\n                }\n                static squeezeShape(e1, t1) {\n                    const n1 = new Array;\n                    t1 = d1.normalizeAxes(t1, e1.length);\n                    for(let r1 = 0; r1 < e1.length; r1++){\n                        const o1 = t1.indexOf(r1) >= 0;\n                        if (o1 && 1 !== e1[r1]) throw new Error(\"squeeze an axis of size different than 1\");\n                        (0 === t1.length && e1[r1] > 1 || t1.length > 0 && !o1) && n1.push(e1[r1]);\n                    }\n                    return n1;\n                }\n                static unsqueezeShape(e1, t1) {\n                    const n1 = new Array(e1.length + t1.length);\n                    n1.fill(0);\n                    for(let e1 = 0; e1 < t1.length; e1++){\n                        const r1 = d1.normalizeAxis(t1[e1], n1.length);\n                        if (r1 >= n1.length) throw new Error(\"'axes' has an out of range axis\");\n                        if (0 !== n1[r1]) throw new Error(\"'axes' has a duplicate axis\");\n                        n1[r1] = 1;\n                    }\n                    let r1 = 0;\n                    for(let t1 = 0; t1 < n1.length; t1++)0 === n1[t1] && (n1[t1] = e1[r1++]);\n                    if (r1 !== e1.length) throw new Error(\"the unsqueezed dimension could not be established\");\n                    return n1;\n                }\n            }\n            t1.ShapeUtil = d1, t1.MathUtil = class {\n                static sqr(e1, t1, n1, r1, o1) {\n                    if (r1 < 0 || r1 >= t1.length) throw new Error(\"sourceIndex out of bounds\");\n                    if (n1 < 0 || n1 >= e1.length) throw new Error(\"targetIndex out of bounds\");\n                    if (r1 + o1 > t1.length) throw new Error(\"source indices to be copied are outside bounds\");\n                    if (n1 + o1 > e1.length) throw new Error(\"target array is too small to hold result\");\n                    for(let i1 = 0; i1 < o1; i1++)e1[n1 + i1] += Math.pow(t1[r1 + i1], 2);\n                }\n                static axpy(e1, t1, n1, r1, o1, i1) {\n                    if (r1 < 0 || r1 >= t1.length) throw new Error(\"sourceIndex out of bounds\");\n                    if (n1 < 0 || n1 >= e1.length) throw new Error(\"targetIndex out of bounds\");\n                    if (r1 + o1 > t1.length) throw new Error(\"source indices to be copied are outside bounds\");\n                    if (n1 + o1 > e1.length) throw new Error(\"target array is too small to hold result\");\n                    for(let s1 = 0; s1 < o1; s1++)e1[n1 + s1] += i1 * t1[r1 + s1];\n                }\n                static powx(e1, t1, n1, r1, o1, i1) {\n                    if (r1 < 0 || r1 >= t1.length) throw new Error(\"sourceIndex out of bounds\");\n                    if (n1 < 0 || n1 >= e1.length) throw new Error(\"targetIndex out of bounds\");\n                    if (r1 + o1 > t1.length) throw new Error(\"source indices to be copied are outside bounds\");\n                    if (n1 + o1 > e1.length) throw new Error(\"target array is too small to hold result\");\n                    for(let s1 = 0; s1 < o1; s1++)e1[n1 + s1] = Math.pow(t1[r1 + s1], i1);\n                }\n                static mul(e1, t1, n1, r1, o1) {\n                    if (r1 < 0 || r1 >= t1.length) throw new Error(\"sourceIndex out of bounds\");\n                    if (n1 < 0 || n1 >= e1.length) throw new Error(\"targetIndex out of bounds\");\n                    if (r1 + o1 > t1.length) throw new Error(\"source indices to be copied are outside bounds\");\n                    if (n1 + o1 > e1.length) throw new Error(\"target array is too small to hold result\");\n                    for(let i1 = 0; i1 < o1; i1++)e1[n1 + i1] = t1[r1 + i1] * e1[n1 + i1];\n                }\n            };\n            class f1 {\n                static splitShape(e1, t1, n1, r1) {\n                    if (0 === n1.length) {\n                        if (!r1) throw new Error(\"need to know number of outputs when the 'split' attribute is not specified\");\n                        f1.determineSplit(e1[t1], r1, n1);\n                    }\n                    const o1 = [], i1 = [\n                        0\n                    ];\n                    for(let r1 = 0; r1 < n1.length; ++r1){\n                        0 !== r1 && i1.push(i1[r1 - 1] + n1[r1 - 1]);\n                        const s1 = e1.slice();\n                        s1[t1] = n1[r1], o1.push(s1);\n                    }\n                    return [\n                        o1,\n                        i1\n                    ];\n                }\n                static determineSplit(e1, t1, n1) {\n                    if (e1 % t1 != 0) throw new Error(\"cannot split tensor to equal sized parts\");\n                    for(let r1 = 0; r1 < t1; ++r1)n1.push(e1 / t1);\n                }\n            }\n            t1.SplitUtil = f1;\n            class h1 {\n                static calcReduce(e1, t1, n1, r1, o1) {\n                    const i1 = e1.dims.slice(0);\n                    0 === t1.length && i1.forEach((e1, n1)=>t1.push(n1));\n                    const s1 = h1.calcReduceShape(i1, t1, !0), u1 = d1.size(s1), c1 = new a1.Tensor(s1, e1.type), p1 = d1.computeStrides(s1), f1 = d1.computeStrides(i1), g1 = new Array(i1.length);\n                    for(let n1 = 0; n1 < u1; n1++){\n                        const s1 = d1.offsetToIndices(n1, p1);\n                        l1.fillIndex(s1, i1, g1), c1.set(s1, h1.calcReduceByAxis(e1.numberData, t1, i1, 0, d1.indicesToOffset(g1, f1), r1, o1));\n                    }\n                    return n1 ? c1 : new a1.Tensor(h1.calcReduceShape(i1, t1, n1), c1.type, void 0, void 0, c1.data, c1.dataId);\n                }\n                static calcReduceByAxis(e1, t1, n1, r1, o1, i1, s1) {\n                    let a1 = 0;\n                    if (r1 >= t1.length) return i1(e1[o1]);\n                    const u1 = t1[r1], l1 = u1 >= n1.length ? 1 : d1.size(n1.slice(u1 + 1));\n                    for(let c1 = 0; c1 < n1[u1]; c1++)a1 = 0 === c1 ? h1.calcReduceByAxis(e1, t1, n1, r1 + 1, o1, i1, s1) : s1(a1, h1.calcReduceByAxis(e1, t1, n1, r1 + 1, o1, i1, s1)), o1 += l1;\n                    return a1;\n                }\n                static calcReduceShape(e1, t1, n1) {\n                    const r1 = e1.slice();\n                    for(let e1 = 0; e1 < t1.length; e1++)r1[t1[e1]] = n1 ? 1 : 0;\n                    return r1.filter((e1)=>0 !== e1);\n                }\n            }\n            t1.ReduceUtil = h1;\n            class g1 {\n                static adjustPoolAttributes(e1, t1, n1, r1, o1, i1) {\n                    if (!e1 && n1.length !== t1.length - 2) throw new Error(\"length of specified kernel shapes should be 2 less than length of input dimensions\");\n                    if (e1) for(let e1 = 0; e1 < t1.length - 2; e1++)e1 >= n1.length ? n1.push(t1[e1 + 2]) : n1[e1] = t1[e1 + 2];\n                    for(let e1 = 0; e1 < n1.length; e1++)if (e1 < r1.length) {\n                        if (r1[e1] < 0) throw new Error(\"strides should be greater than or equal to 1\");\n                    } else r1.push(1);\n                    for(let e1 = 0; e1 < n1.length; e1++)if (e1 < o1.length) {\n                        if (o1[e1] < 0) throw new Error(\"dilations should be greater than or equal to 1\");\n                    } else o1.push(1);\n                    for(let e1 = 0; e1 < 2 * n1.length; e1++)if (e1 < i1.length) {\n                        if (i1[e1] < 0) throw new Error(\"pad should be greater than or equal to 1\");\n                    } else i1.push(0);\n                    for(let e1 = 0; e1 < n1.length; e1++){\n                        if (n1[e1] <= 0) throw new Error(\"kernel shapes need to be greater than 0\");\n                        if (i1[e1] >= n1[e1] || i1[e1 + n1.length] >= n1[e1]) throw new Error(\"pads should be smaller than kernel\");\n                    }\n                }\n                static adjustPadsBasedOnAutoPad(e1, t1, n1, r1, o1, i1) {\n                    if (i1) {\n                        if (o1.length !== 2 * (e1.length - 2)) throw new Error(\"length of pads should be twice the length of data dimensions\");\n                        if (t1.length !== e1.length - 2) throw new Error(\"length of strides should be the length of data dimensions\");\n                        if (r1.length !== e1.length - 2) throw new Error(\"length of kernel shapes should be the length of data dimensions\");\n                        for(let s1 = 0; s1 < e1.length - 2; s1++)g1.adjustPadAndReturnShape(e1[s1 + 2], t1[s1], n1[s1], r1[s1], o1, s1, s1 + e1.length - 2, i1);\n                    }\n                }\n                static computePoolOutputShape(e1, t1, n1, r1, o1, i1, s1) {\n                    if (t1.length <= 0) throw new Error(\"input shape must be of size greater than 0\");\n                    const a1 = [\n                        t1[0],\n                        t1[1]\n                    ];\n                    return g1.computeShapeHelper(e1, t1, a1, n1, r1, o1, i1, s1), a1;\n                }\n                static computeConvOutputShape(e1, t1, n1, r1, o1, i1, s1) {\n                    if (e1.length <= 0 || t1.length <= 0) throw new Error(\"invalid input tensor dims or invalid filter tensor dims\");\n                    const a1 = [\n                        e1[0],\n                        t1[0]\n                    ];\n                    return g1.computeShapeHelper(!1, e1, a1, n1, r1, o1, i1, s1), a1;\n                }\n                static computeShapeHelper(e1, t1, n1, r1, o1, i1, s1, a1) {\n                    if (e1) for(let e1 = 0; e1 < t1.length - 2; e1++)n1.push(1);\n                    else for(let e1 = 0; e1 < t1.length - 2; e1++)n1.push(g1.adjustPadAndReturnShape(t1[e1 + 2], r1[e1], o1[e1], i1[e1], s1, e1, e1 + t1.length - 2, a1));\n                }\n                static adjustPadAndReturnShape(e1, t1, n1, r1, o1, i1, s1, a1) {\n                    const u1 = n1 * (r1 - 1) + 1;\n                    if (!a1 || \"NOTSET\" === a1) return Math.floor((e1 + o1[i1] + o1[s1] - u1) / t1 + 1);\n                    switch(a1){\n                        case \"VALID\":\n                            return o1[i1] = 0, o1[s1] = 0, Math.floor((e1 - u1) / t1 + 1);\n                        case \"SAME_LOWER\":\n                        case \"SAME_UPPER\":\n                            if (1 !== n1) throw new Error(\"Dilation not supported for SAME_UPPER or SAME_LOWER\");\n                            {\n                                const n1 = ((e1 + t1 - 1) / t1 - 1) * t1 + r1 - e1;\n                                return o1[i1] = \"SAME_LOWER\" === a1 ? Math.floor((n1 + 1) / 2) : Math.floor(n1 / 2), o1[s1] = n1 - o1[i1], Math.floor((e1 + n1 - r1) / t1 + 1);\n                            }\n                        default:\n                            throw new Error(\"Unsupported AutoPad type\");\n                    }\n                }\n            }\n            t1.PoolConvUtil = g1, t1.MIN_CLIP = -34028234663852886e22, t1.MAX_CLIP = 34028234663852886e22, t1.decodeUtf8String = function(e1) {\n                return (new TextDecoder).decode(e1);\n            };\n        },\n        8408: (e1, t1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.version = void 0, t1.version = \"1.16.3\";\n        },\n        9544: function(e1, t1, n1) {\n            \"use strict\";\n            var r1, o1 = this && this.__createBinding || (Object.create ? function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1);\n                var o1 = Object.getOwnPropertyDescriptor(t1, n1);\n                o1 && !(\"get\" in o1 ? !t1.__esModule : o1.writable || o1.configurable) || (o1 = {\n                    enumerable: !0,\n                    get: function() {\n                        return t1[n1];\n                    }\n                }), Object.defineProperty(e1, r1, o1);\n            } : function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1), e1[r1] = t1[n1];\n            }), i1 = this && this.__setModuleDefault || (Object.create ? function(e1, t1) {\n                Object.defineProperty(e1, \"default\", {\n                    enumerable: !0,\n                    value: t1\n                });\n            } : function(e1, t1) {\n                e1.default = t1;\n            }), s1 = this && this.__importStar || function(e1) {\n                if (e1 && e1.__esModule) return e1;\n                var t1 = {};\n                if (null != e1) for(var n1 in e1)\"default\" !== n1 && Object.prototype.hasOwnProperty.call(e1, n1) && o1(t1, e1, n1);\n                return i1(t1, e1), t1;\n            };\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.endProfiling = t1.run = t1.releaseSession = t1.createSession = t1.createSessionFinalize = t1.createSessionAllocate = t1.initializeRuntime = t1.initializeWebAssemblyInstance = void 0;\n            const a1 = n1(6207), u1 = s1(n1(1259)), l1 = n1(263), c1 = ()=>!!a1.env.wasm.proxy && \"undefined\" != typeof document;\n            let p1, d1, f1, h1 = !1, g1 = !1, b1 = !1;\n            const m1 = [], y1 = [], _1 = [], v1 = [], T1 = [], x1 = [], w1 = ()=>{\n                if (h1 || !g1 || b1 || !p1) throw new Error(\"worker not ready\");\n            }, O1 = (e1)=>{\n                switch(e1.data.type){\n                    case \"init-wasm\":\n                        h1 = !1, e1.data.err ? (b1 = !0, d1[1](e1.data.err)) : (g1 = !0, d1[0]());\n                        break;\n                    case \"init-ort\":\n                        e1.data.err ? f1[1](e1.data.err) : f1[0]();\n                        break;\n                    case \"create_allocate\":\n                        e1.data.err ? m1.shift()[1](e1.data.err) : m1.shift()[0](e1.data.out);\n                        break;\n                    case \"create_finalize\":\n                        e1.data.err ? y1.shift()[1](e1.data.err) : y1.shift()[0](e1.data.out);\n                        break;\n                    case \"create\":\n                        e1.data.err ? _1.shift()[1](e1.data.err) : _1.shift()[0](e1.data.out);\n                        break;\n                    case \"release\":\n                        e1.data.err ? v1.shift()[1](e1.data.err) : v1.shift()[0]();\n                        break;\n                    case \"run\":\n                        e1.data.err ? T1.shift()[1](e1.data.err) : T1.shift()[0](e1.data.out);\n                        break;\n                    case \"end-profiling\":\n                        e1.data.err ? x1.shift()[1](e1.data.err) : x1.shift()[0]();\n                }\n            }, S1 = \"undefined\" != typeof document ? null === (r1 = null === document || void 0 === document ? void 0 : document.currentScript) || void 0 === r1 ? void 0 : r1.src : void 0;\n            t1.initializeWebAssemblyInstance = async ()=>{\n                if (c1()) {\n                    if (g1) return;\n                    if (h1) throw new Error(\"multiple calls to 'initWasm()' detected.\");\n                    if (b1) throw new Error(\"previous call to 'initWasm()' failed.\");\n                    return h1 = !0, void 0 === a1.env.wasm.wasmPaths && S1 && 0 !== S1.indexOf(\"blob:\") && (a1.env.wasm.wasmPaths = S1.substr(0, +S1.lastIndexOf(\"/\") + 1)), new Promise((e1, t1)=>{\n                        null == p1 || p1.terminate(), p1 = n1(8050).Z(), p1.onmessage = O1, d1 = [\n                            e1,\n                            t1\n                        ];\n                        const r1 = {\n                            type: \"init-wasm\",\n                            in: a1.env.wasm\n                        };\n                        p1.postMessage(r1);\n                    });\n                }\n                return (0, l1.initializeWebAssembly)(a1.env.wasm);\n            }, t1.initializeRuntime = async (e1)=>{\n                if (c1()) return w1(), new Promise((t1, n1)=>{\n                    f1 = [\n                        t1,\n                        n1\n                    ];\n                    const r1 = {\n                        type: \"init-ort\",\n                        in: e1\n                    };\n                    p1.postMessage(r1);\n                });\n                await u1.initRuntime(e1);\n            }, t1.createSessionAllocate = async (e1)=>c1() ? (w1(), new Promise((t1, n1)=>{\n                    m1.push([\n                        t1,\n                        n1\n                    ]);\n                    const r1 = {\n                        type: \"create_allocate\",\n                        in: {\n                            model: e1\n                        }\n                    };\n                    p1.postMessage(r1, [\n                        e1.buffer\n                    ]);\n                })) : u1.createSessionAllocate(e1), t1.createSessionFinalize = async (e1, t1)=>c1() ? (w1(), new Promise((n1, r1)=>{\n                    y1.push([\n                        n1,\n                        r1\n                    ]);\n                    const o1 = {\n                        type: \"create_finalize\",\n                        in: {\n                            modeldata: e1,\n                            options: t1\n                        }\n                    };\n                    p1.postMessage(o1);\n                })) : u1.createSessionFinalize(e1, t1), t1.createSession = async (e1, t1)=>c1() ? (w1(), new Promise((n1, r1)=>{\n                    _1.push([\n                        n1,\n                        r1\n                    ]);\n                    const o1 = {\n                        type: \"create\",\n                        in: {\n                            model: e1,\n                            options: t1\n                        }\n                    };\n                    p1.postMessage(o1, [\n                        e1.buffer\n                    ]);\n                })) : u1.createSession(e1, t1), t1.releaseSession = async (e1)=>{\n                if (c1()) return w1(), new Promise((t1, n1)=>{\n                    v1.push([\n                        t1,\n                        n1\n                    ]);\n                    const r1 = {\n                        type: \"release\",\n                        in: e1\n                    };\n                    p1.postMessage(r1);\n                });\n                u1.releaseSession(e1);\n            }, t1.run = async (e1, t1, n1, r1, o1)=>c1() ? (w1(), new Promise((i1, s1)=>{\n                    T1.push([\n                        i1,\n                        s1\n                    ]);\n                    const a1 = {\n                        type: \"run\",\n                        in: {\n                            sessionId: e1,\n                            inputIndices: t1,\n                            inputs: n1,\n                            outputIndices: r1,\n                            options: o1\n                        }\n                    };\n                    p1.postMessage(a1, u1.extractTransferableBuffers(n1));\n                })) : u1.run(e1, t1, n1, r1, o1), t1.endProfiling = async (e1)=>{\n                if (c1()) return w1(), new Promise((t1, n1)=>{\n                    x1.push([\n                        t1,\n                        n1\n                    ]);\n                    const r1 = {\n                        type: \"end-profiling\",\n                        in: e1\n                    };\n                    p1.postMessage(r1);\n                });\n                u1.endProfiling(e1);\n            };\n        },\n        7918: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.setRunOptions = void 0;\n            const r1 = n1(263), o1 = n1(1497);\n            t1.setRunOptions = (e1)=>{\n                const t1 = (0, r1.getInstance)();\n                let n1 = 0;\n                const i1 = [], s1 = e1 || {};\n                try {\n                    if (void 0 === (null == e1 ? void 0 : e1.logSeverityLevel)) s1.logSeverityLevel = 2;\n                    else if (\"number\" != typeof e1.logSeverityLevel || !Number.isInteger(e1.logSeverityLevel) || e1.logSeverityLevel < 0 || e1.logSeverityLevel > 4) throw new Error(`log serverity level is not valid: ${e1.logSeverityLevel}`);\n                    if (void 0 === (null == e1 ? void 0 : e1.logVerbosityLevel)) s1.logVerbosityLevel = 0;\n                    else if (\"number\" != typeof e1.logVerbosityLevel || !Number.isInteger(e1.logVerbosityLevel)) throw new Error(`log verbosity level is not valid: ${e1.logVerbosityLevel}`);\n                    void 0 === (null == e1 ? void 0 : e1.terminate) && (s1.terminate = !1);\n                    let r1 = 0;\n                    return void 0 !== (null == e1 ? void 0 : e1.tag) && (r1 = (0, o1.allocWasmString)(e1.tag, i1)), n1 = t1._OrtCreateRunOptions(s1.logSeverityLevel, s1.logVerbosityLevel, !!s1.terminate, r1), 0 === n1 && (0, o1.checkLastError)(\"Can't create run options.\"), void 0 !== (null == e1 ? void 0 : e1.extra) && (0, o1.iterateExtraOptions)(e1.extra, \"\", new WeakSet, (e1, r1)=>{\n                        const s1 = (0, o1.allocWasmString)(e1, i1), a1 = (0, o1.allocWasmString)(r1, i1);\n                        0 !== t1._OrtAddRunConfigEntry(n1, s1, a1) && (0, o1.checkLastError)(`Can't set a run config entry: ${e1} - ${r1}.`);\n                    }), [\n                        n1,\n                        i1\n                    ];\n                } catch (e1) {\n                    throw 0 !== n1 && t1._OrtReleaseRunOptions(n1), i1.forEach((e1)=>t1._free(e1)), e1;\n                }\n            };\n        },\n        6640: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.OnnxruntimeWebAssemblySessionHandler = void 0;\n            const r1 = n1(6231), o1 = n1(6207), i1 = n1(6464), s1 = n1(9544);\n            let a1;\n            t1.OnnxruntimeWebAssemblySessionHandler = class {\n                async createSessionAllocate(e1) {\n                    const t1 = await fetch(e1);\n                    if (200 !== t1.status) throw new Error(`failed to load model: ${e1}`);\n                    const n1 = await t1.arrayBuffer();\n                    return (0, s1.createSessionAllocate)(new Uint8Array(n1));\n                }\n                async loadModel(e1, t1) {\n                    if (a1 || (await (0, s1.initializeRuntime)(o1.env), a1 = !0), \"string\" == typeof e1) if (\"undefined\" != typeof process && process.versions && process.versions.node) {\n                        const n1 = await (0, i1.promisify)(r1.readFile)(e1);\n                        [this.sessionId, this.inputNames, this.outputNames] = await (0, s1.createSession)(n1, t1);\n                    } else {\n                        const n1 = await this.createSessionAllocate(e1);\n                        [this.sessionId, this.inputNames, this.outputNames] = await (0, s1.createSessionFinalize)(n1, t1);\n                    }\n                    else [this.sessionId, this.inputNames, this.outputNames] = await (0, s1.createSession)(e1, t1);\n                }\n                async dispose() {\n                    return (0, s1.releaseSession)(this.sessionId);\n                }\n                async run(e1, t1, n1) {\n                    const r1 = [], i1 = [];\n                    Object.entries(e1).forEach((e1)=>{\n                        const t1 = e1[0], n1 = e1[1], o1 = this.inputNames.indexOf(t1);\n                        if (-1 === o1) throw new Error(`invalid input '${t1}'`);\n                        r1.push(n1), i1.push(o1);\n                    });\n                    const a1 = [];\n                    Object.entries(t1).forEach((e1)=>{\n                        const t1 = e1[0], n1 = this.outputNames.indexOf(t1);\n                        if (-1 === n1) throw new Error(`invalid output '${t1}'`);\n                        a1.push(n1);\n                    });\n                    const u1 = await (0, s1.run)(this.sessionId, i1, r1.map((e1)=>[\n                            e1.type,\n                            e1.dims,\n                            e1.data\n                        ]), a1, n1), l1 = {};\n                    for(let e1 = 0; e1 < u1.length; e1++)l1[this.outputNames[a1[e1]]] = new o1.Tensor(u1[e1][0], u1[e1][2], u1[e1][1]);\n                    return l1;\n                }\n                startProfiling() {}\n                endProfiling() {\n                    (0, s1.endProfiling)(this.sessionId);\n                }\n            };\n        },\n        7622: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.setSessionOptions = void 0;\n            const r1 = n1(263), o1 = n1(1497);\n            t1.setSessionOptions = (e1)=>{\n                var t1, n1, i1, s1;\n                const a1 = (0, r1.getInstance)();\n                let u1 = 0;\n                const l1 = [], c1 = e1 || {};\n                ((e1)=>{\n                    e1.extra || (e1.extra = {}), e1.extra.session || (e1.extra.session = {});\n                    const t1 = e1.extra.session;\n                    t1.use_ort_model_bytes_directly || (t1.use_ort_model_bytes_directly = \"1\"), e1.executionProviders && e1.executionProviders.some((e1)=>\"webgpu\" === (\"string\" == typeof e1 ? e1 : e1.name)) && (e1.enableMemPattern = !1);\n                })(c1);\n                try {\n                    const e1 = ((e1)=>{\n                        switch(e1){\n                            case \"disabled\":\n                                return 0;\n                            case \"basic\":\n                                return 1;\n                            case \"extended\":\n                                return 2;\n                            case \"all\":\n                                return 99;\n                            default:\n                                throw new Error(`unsupported graph optimization level: ${e1}`);\n                        }\n                    })(null !== (t1 = c1.graphOptimizationLevel) && void 0 !== t1 ? t1 : \"all\"), p1 = ((e1)=>{\n                        switch(e1){\n                            case \"sequential\":\n                                return 0;\n                            case \"parallel\":\n                                return 1;\n                            default:\n                                throw new Error(`unsupported execution mode: ${e1}`);\n                        }\n                    })(null !== (n1 = c1.executionMode) && void 0 !== n1 ? n1 : \"sequential\"), d1 = \"string\" == typeof c1.logId ? (0, o1.allocWasmString)(c1.logId, l1) : 0, f1 = null !== (i1 = c1.logSeverityLevel) && void 0 !== i1 ? i1 : 2;\n                    if (!Number.isInteger(f1) || f1 < 0 || f1 > 4) throw new Error(`log serverity level is not valid: ${f1}`);\n                    const h1 = null !== (s1 = c1.logVerbosityLevel) && void 0 !== s1 ? s1 : 0;\n                    if (!Number.isInteger(h1) || h1 < 0 || h1 > 4) throw new Error(`log verbosity level is not valid: ${h1}`);\n                    const g1 = \"string\" == typeof c1.optimizedModelFilePath ? (0, o1.allocWasmString)(c1.optimizedModelFilePath, l1) : 0;\n                    return u1 = a1._OrtCreateSessionOptions(e1, !!c1.enableCpuMemArena, !!c1.enableMemPattern, p1, !!c1.enableProfiling, 0, d1, f1, h1, g1), 0 === u1 && (0, o1.checkLastError)(\"Can't create session options.\"), c1.executionProviders && ((e1, t1, n1)=>{\n                        for (const i1 of t1){\n                            let t1 = \"string\" == typeof i1 ? i1 : i1.name;\n                            switch(t1){\n                                case \"xnnpack\":\n                                    t1 = \"XNNPACK\";\n                                    break;\n                                case \"webnn\":\n                                    if (t1 = \"WEBNN\", \"string\" != typeof i1) {\n                                        const t1 = i1;\n                                        if (null == t1 ? void 0 : t1.deviceType) {\n                                            const i1 = (0, o1.allocWasmString)(\"deviceType\", n1), s1 = (0, o1.allocWasmString)(t1.deviceType, n1);\n                                            0 !== (0, r1.getInstance)()._OrtAddSessionConfigEntry(e1, i1, s1) && (0, o1.checkLastError)(`Can't set a session config entry: 'deviceType' - ${t1.deviceType}.`);\n                                        }\n                                        if (null == t1 ? void 0 : t1.powerPreference) {\n                                            const i1 = (0, o1.allocWasmString)(\"powerPreference\", n1), s1 = (0, o1.allocWasmString)(t1.powerPreference, n1);\n                                            0 !== (0, r1.getInstance)()._OrtAddSessionConfigEntry(e1, i1, s1) && (0, o1.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${t1.powerPreference}.`);\n                                        }\n                                    }\n                                    break;\n                                case \"webgpu\":\n                                    t1 = \"JS\";\n                                    break;\n                                case \"wasm\":\n                                case \"cpu\":\n                                    continue;\n                                default:\n                                    throw new Error(`not supported execution provider: ${t1}`);\n                            }\n                            const s1 = (0, o1.allocWasmString)(t1, n1);\n                            0 !== (0, r1.getInstance)()._OrtAppendExecutionProvider(e1, s1) && (0, o1.checkLastError)(`Can't append execution provider: ${t1}.`);\n                        }\n                    })(u1, c1.executionProviders, l1), void 0 !== c1.extra && (0, o1.iterateExtraOptions)(c1.extra, \"\", new WeakSet, (e1, t1)=>{\n                        const n1 = (0, o1.allocWasmString)(e1, l1), r1 = (0, o1.allocWasmString)(t1, l1);\n                        0 !== a1._OrtAddSessionConfigEntry(u1, n1, r1) && (0, o1.checkLastError)(`Can't set a session config entry: ${e1} - ${t1}.`);\n                    }), [\n                        u1,\n                        l1\n                    ];\n                } catch (e1) {\n                    throw 0 !== u1 && a1._OrtReleaseSessionOptions(u1), l1.forEach((e1)=>a1._free(e1)), e1;\n                }\n            };\n        },\n        7917: (e1, t1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.logLevelStringToEnum = t1.tensorTypeToTypedArrayConstructor = t1.getTensorElementSize = t1.tensorDataTypeEnumToString = t1.tensorDataTypeStringToEnum = void 0, t1.tensorDataTypeStringToEnum = (e1)=>{\n                switch(e1){\n                    case \"int8\":\n                        return 3;\n                    case \"uint8\":\n                        return 2;\n                    case \"bool\":\n                        return 9;\n                    case \"int16\":\n                        return 5;\n                    case \"uint16\":\n                        return 4;\n                    case \"int32\":\n                        return 6;\n                    case \"uint32\":\n                        return 12;\n                    case \"float16\":\n                        return 10;\n                    case \"float32\":\n                        return 1;\n                    case \"float64\":\n                        return 11;\n                    case \"string\":\n                        return 8;\n                    case \"int64\":\n                        return 7;\n                    case \"uint64\":\n                        return 13;\n                    default:\n                        throw new Error(`unsupported data type: ${e1}`);\n                }\n            }, t1.tensorDataTypeEnumToString = (e1)=>{\n                switch(e1){\n                    case 3:\n                        return \"int8\";\n                    case 2:\n                        return \"uint8\";\n                    case 9:\n                        return \"bool\";\n                    case 5:\n                        return \"int16\";\n                    case 4:\n                        return \"uint16\";\n                    case 6:\n                        return \"int32\";\n                    case 12:\n                        return \"uint32\";\n                    case 10:\n                        return \"float16\";\n                    case 1:\n                        return \"float32\";\n                    case 11:\n                        return \"float64\";\n                    case 8:\n                        return \"string\";\n                    case 7:\n                        return \"int64\";\n                    case 13:\n                        return \"uint64\";\n                    default:\n                        throw new Error(`unsupported data type: ${e1}`);\n                }\n            }, t1.getTensorElementSize = (e1)=>[\n                    void 0,\n                    4,\n                    1,\n                    1,\n                    2,\n                    2,\n                    4,\n                    8,\n                    void 0,\n                    1,\n                    2,\n                    8,\n                    4,\n                    8,\n                    void 0,\n                    void 0,\n                    void 0\n                ][e1], t1.tensorTypeToTypedArrayConstructor = (e1)=>{\n                switch(e1){\n                    case \"float16\":\n                    case \"uint16\":\n                        return Uint16Array;\n                    case \"float32\":\n                        return Float32Array;\n                    case \"uint8\":\n                    case \"bool\":\n                        return Uint8Array;\n                    case \"int8\":\n                        return Int8Array;\n                    case \"int16\":\n                        return Int16Array;\n                    case \"int32\":\n                        return Int32Array;\n                    case \"float64\":\n                        return Float64Array;\n                    case \"uint32\":\n                        return Uint32Array;\n                    case \"int64\":\n                        return BigInt64Array;\n                    case \"uint64\":\n                        return BigUint64Array;\n                    default:\n                        throw new Error(`unsupported type: ${e1}`);\n                }\n            }, t1.logLevelStringToEnum = (e1)=>{\n                switch(e1){\n                    case \"verbose\":\n                        return 0;\n                    case \"info\":\n                        return 1;\n                    case \"warning\":\n                        return 2;\n                    case \"error\":\n                        return 3;\n                    case \"fatal\":\n                        return 4;\n                    default:\n                        throw new Error(`unsupported logging level: ${e1}`);\n                }\n            };\n        },\n        1259: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.extractTransferableBuffers = t1.endProfiling = t1.run = t1.releaseSession = t1.createSession = t1.createSessionFinalize = t1.createSessionAllocate = t1.initRuntime = void 0;\n            const r1 = n1(7918), o1 = n1(7622), i1 = n1(7917), s1 = n1(263), a1 = n1(1497);\n            t1.initRuntime = async (e1)=>{\n                var t1, n1;\n                t1 = e1.wasm.numThreads, n1 = (0, i1.logLevelStringToEnum)(e1.logLevel), 0 !== (0, s1.getInstance)()._OrtInit(t1, n1) && (0, a1.checkLastError)(\"Can't initialize onnxruntime.\");\n            };\n            const u1 = new Map;\n            t1.createSessionAllocate = (e1)=>{\n                const t1 = (0, s1.getInstance)(), n1 = t1._malloc(e1.byteLength);\n                if (0 === n1) throw new Error(`Can't create a session. failed to allocate a buffer of size ${e1.byteLength}.`);\n                return t1.HEAPU8.set(e1, n1), [\n                    n1,\n                    e1.byteLength\n                ];\n            }, t1.createSessionFinalize = (e1, t1)=>{\n                const n1 = (0, s1.getInstance)();\n                let r1 = 0, i1 = 0, l1 = [];\n                const c1 = [], p1 = [];\n                try {\n                    [i1, l1] = (0, o1.setSessionOptions)(t1), r1 = n1._OrtCreateSession(e1[0], e1[1], i1), 0 === r1 && (0, a1.checkLastError)(\"Can't create a session.\");\n                    const [d1, f1] = ((e1)=>{\n                        const t1 = (0, s1.getInstance)(), n1 = t1.stackSave();\n                        try {\n                            const n1 = t1.stackAlloc(8);\n                            return 0 !== t1._OrtGetInputOutputCount(e1, n1, n1 + 4) && (0, a1.checkLastError)(\"Can't get session input/output count.\"), [\n                                t1.HEAP32[n1 / 4],\n                                t1.HEAP32[n1 / 4 + 1]\n                            ];\n                        } finally{\n                            t1.stackRestore(n1);\n                        }\n                    })(r1), h1 = [], g1 = [];\n                    for(let e1 = 0; e1 < d1; e1++){\n                        const t1 = n1._OrtGetInputName(r1, e1);\n                        0 === t1 && (0, a1.checkLastError)(\"Can't get an input name.\"), c1.push(t1), h1.push(n1.UTF8ToString(t1));\n                    }\n                    for(let e1 = 0; e1 < f1; e1++){\n                        const t1 = n1._OrtGetOutputName(r1, e1);\n                        0 === t1 && (0, a1.checkLastError)(\"Can't get an output name.\"), p1.push(t1), g1.push(n1.UTF8ToString(t1));\n                    }\n                    return u1.set(r1, [\n                        r1,\n                        c1,\n                        p1\n                    ]), [\n                        r1,\n                        h1,\n                        g1\n                    ];\n                } catch (e1) {\n                    throw c1.forEach((e1)=>n1._OrtFree(e1)), p1.forEach((e1)=>n1._OrtFree(e1)), 0 !== r1 && n1._OrtReleaseSession(r1), e1;\n                } finally{\n                    n1._free(e1[0]), 0 !== i1 && n1._OrtReleaseSessionOptions(i1), l1.forEach((e1)=>n1._free(e1));\n                }\n            }, t1.createSession = (e1, n1)=>{\n                const r1 = (0, t1.createSessionAllocate)(e1);\n                return (0, t1.createSessionFinalize)(r1, n1);\n            }, t1.releaseSession = (e1)=>{\n                const t1 = (0, s1.getInstance)(), n1 = u1.get(e1);\n                if (!n1) throw new Error(`cannot release session. invalid session id: ${e1}`);\n                const [r1, o1, i1] = n1;\n                o1.forEach((e1)=>t1._OrtFree(e1)), i1.forEach((e1)=>t1._OrtFree(e1)), t1._OrtReleaseSession(r1), u1.delete(e1);\n            }, t1.run = async (e1, t1, n1, o1, l1)=>{\n                const c1 = (0, s1.getInstance)(), p1 = u1.get(e1);\n                if (!p1) throw new Error(`cannot run inference. invalid session id: ${e1}`);\n                const [d1, f1, h1] = p1, g1 = t1.length, b1 = o1.length;\n                let m1 = 0, y1 = [];\n                const _1 = [], v1 = [];\n                try {\n                    [m1, y1] = (0, r1.setRunOptions)(l1);\n                    for(let e1 = 0; e1 < g1; e1++){\n                        const t1 = n1[e1][0], r1 = n1[e1][1], o1 = n1[e1][2];\n                        let s1, u1;\n                        if (Array.isArray(o1)) {\n                            u1 = 4 * o1.length, s1 = c1._malloc(u1), v1.push(s1);\n                            let e1 = s1 / 4;\n                            for(let t1 = 0; t1 < o1.length; t1++){\n                                if (\"string\" != typeof o1[t1]) throw new TypeError(`tensor data at index ${t1} is not a string`);\n                                c1.HEAPU32[e1++] = (0, a1.allocWasmString)(o1[t1], v1);\n                            }\n                        } else u1 = o1.byteLength, s1 = c1._malloc(u1), v1.push(s1), c1.HEAPU8.set(new Uint8Array(o1.buffer, o1.byteOffset, u1), s1);\n                        const l1 = c1.stackSave(), p1 = c1.stackAlloc(4 * r1.length);\n                        try {\n                            let n1 = p1 / 4;\n                            r1.forEach((e1)=>c1.HEAP32[n1++] = e1);\n                            const o1 = c1._OrtCreateTensor((0, i1.tensorDataTypeStringToEnum)(t1), s1, u1, p1, r1.length);\n                            0 === o1 && (0, a1.checkLastError)(`Can't create tensor for input[${e1}].`), _1.push(o1);\n                        } finally{\n                            c1.stackRestore(l1);\n                        }\n                    }\n                    const e1 = c1.stackSave(), s1 = c1.stackAlloc(4 * g1), u1 = c1.stackAlloc(4 * g1), p1 = c1.stackAlloc(4 * b1), T1 = c1.stackAlloc(4 * b1);\n                    try {\n                        let e1 = s1 / 4, n1 = u1 / 4, r1 = p1 / 4, l1 = T1 / 4;\n                        for(let r1 = 0; r1 < g1; r1++)c1.HEAPU32[e1++] = _1[r1], c1.HEAPU32[n1++] = f1[t1[r1]];\n                        for(let e1 = 0; e1 < b1; e1++)c1.HEAPU32[r1++] = 0, c1.HEAPU32[l1++] = h1[o1[e1]];\n                        let y1 = c1._OrtRun(d1, u1, s1, g1, T1, b1, p1, m1);\n                        const v1 = c1.jsepRunPromise;\n                        v1 && void 0 !== v1.then && (y1 = await v1);\n                        const x1 = [];\n                        0 !== y1 && (0, a1.checkLastError)(\"failed to call OrtRun().\");\n                        for(let e1 = 0; e1 < b1; e1++){\n                            const t1 = c1.HEAPU32[p1 / 4 + e1], n1 = c1.stackSave(), r1 = c1.stackAlloc(16);\n                            let o1, s1 = 0;\n                            try {\n                                y1 = c1._OrtGetTensorData(t1, r1, r1 + 4, r1 + 8, r1 + 12), 0 !== y1 && (0, a1.checkLastError)(`Can't access output tensor data on index ${e1}.`);\n                                let n1 = r1 / 4;\n                                const u1 = c1.HEAPU32[n1++];\n                                s1 = c1.HEAPU32[n1++];\n                                const l1 = c1.HEAPU32[n1++], p1 = c1.HEAPU32[n1++], d1 = [];\n                                for(let e1 = 0; e1 < p1; e1++)d1.push(c1.HEAPU32[l1 / 4 + e1]);\n                                c1._OrtFree(l1);\n                                const f1 = 0 === d1.length ? 1 : d1.reduce((e1, t1)=>e1 * t1);\n                                if (o1 = (0, i1.tensorDataTypeEnumToString)(u1), \"string\" === o1) {\n                                    const e1 = [];\n                                    let t1 = s1 / 4;\n                                    for(let n1 = 0; n1 < f1; n1++){\n                                        const r1 = c1.HEAPU32[t1++], o1 = n1 === f1 - 1 ? void 0 : c1.HEAPU32[t1] - r1;\n                                        e1.push(c1.UTF8ToString(r1, o1));\n                                    }\n                                    x1.push([\n                                        o1,\n                                        d1,\n                                        e1\n                                    ]);\n                                } else {\n                                    const e1 = new ((0, i1.tensorTypeToTypedArrayConstructor)(o1))(f1);\n                                    new Uint8Array(e1.buffer, e1.byteOffset, e1.byteLength).set(c1.HEAPU8.subarray(s1, s1 + e1.byteLength)), x1.push([\n                                        o1,\n                                        d1,\n                                        e1\n                                    ]);\n                                }\n                            } finally{\n                                c1.stackRestore(n1), \"string\" === o1 && s1 && c1._free(s1), c1._OrtReleaseTensor(t1);\n                            }\n                        }\n                        return x1;\n                    } finally{\n                        c1.stackRestore(e1);\n                    }\n                } finally{\n                    _1.forEach((e1)=>c1._OrtReleaseTensor(e1)), v1.forEach((e1)=>c1._free(e1)), 0 !== m1 && c1._OrtReleaseRunOptions(m1), y1.forEach((e1)=>c1._free(e1));\n                }\n            }, t1.endProfiling = (e1)=>{\n                const t1 = (0, s1.getInstance)(), n1 = u1.get(e1);\n                if (!n1) throw new Error(\"invalid session id\");\n                const r1 = n1[0], o1 = t1._OrtEndProfiling(r1);\n                0 === o1 && (0, a1.checkLastError)(\"Can't get an profile file name.\"), t1._OrtFree(o1);\n            }, t1.extractTransferableBuffers = (e1)=>{\n                const t1 = [];\n                for (const n1 of e1){\n                    const e1 = n1[2];\n                    !Array.isArray(e1) && e1.buffer && t1.push(e1.buffer);\n                }\n                return t1;\n            };\n        },\n        263: function(e1, t1, n1) {\n            \"use strict\";\n            var r1 = this && this.__createBinding || (Object.create ? function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1);\n                var o1 = Object.getOwnPropertyDescriptor(t1, n1);\n                o1 && !(\"get\" in o1 ? !t1.__esModule : o1.writable || o1.configurable) || (o1 = {\n                    enumerable: !0,\n                    get: function() {\n                        return t1[n1];\n                    }\n                }), Object.defineProperty(e1, r1, o1);\n            } : function(e1, t1, n1, r1) {\n                void 0 === r1 && (r1 = n1), e1[r1] = t1[n1];\n            }), o1 = this && this.__setModuleDefault || (Object.create ? function(e1, t1) {\n                Object.defineProperty(e1, \"default\", {\n                    enumerable: !0,\n                    value: t1\n                });\n            } : function(e1, t1) {\n                e1.default = t1;\n            }), i1 = this && this.__importStar || function(e1) {\n                if (e1 && e1.__esModule) return e1;\n                var t1 = {};\n                if (null != e1) for(var n1 in e1)\"default\" !== n1 && Object.prototype.hasOwnProperty.call(e1, n1) && r1(t1, e1, n1);\n                return o1(t1, e1), t1;\n            };\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.dispose = t1.getInstance = t1.initializeWebAssembly = void 0;\n            const s1 = i1(n1(1423)), a1 = n1(932), u1 = n1(3474);\n            let l1, c1 = !1, p1 = !1, d1 = !1;\n            t1.initializeWebAssembly = async (e1)=>{\n                if (c1) return Promise.resolve();\n                if (p1) throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");\n                if (d1) throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");\n                p1 = !0;\n                const t1 = e1.initTimeout, r1 = e1.numThreads, o1 = e1.simd, i1 = r1 > 1 && (()=>{\n                    try {\n                        return \"undefined\" != typeof SharedArrayBuffer && (\"undefined\" != typeof MessageChannel && (new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([\n                            0,\n                            97,\n                            115,\n                            109,\n                            1,\n                            0,\n                            0,\n                            0,\n                            1,\n                            4,\n                            1,\n                            96,\n                            0,\n                            0,\n                            3,\n                            2,\n                            1,\n                            0,\n                            5,\n                            4,\n                            1,\n                            3,\n                            1,\n                            1,\n                            10,\n                            11,\n                            1,\n                            9,\n                            0,\n                            65,\n                            0,\n                            254,\n                            16,\n                            2,\n                            0,\n                            26,\n                            11\n                        ])));\n                    } catch (e1) {\n                        return !1;\n                    }\n                })(), f1 = o1 && (()=>{\n                    try {\n                        return WebAssembly.validate(new Uint8Array([\n                            0,\n                            97,\n                            115,\n                            109,\n                            1,\n                            0,\n                            0,\n                            0,\n                            1,\n                            4,\n                            1,\n                            96,\n                            0,\n                            0,\n                            3,\n                            2,\n                            1,\n                            0,\n                            10,\n                            30,\n                            1,\n                            28,\n                            0,\n                            65,\n                            0,\n                            253,\n                            15,\n                            253,\n                            12,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            253,\n                            186,\n                            1,\n                            26,\n                            11\n                        ]));\n                    } catch (e1) {\n                        return !1;\n                    }\n                })(), h1 = e1.wasmPaths, g1 = \"string\" == typeof h1 ? h1 : void 0, b1 = ((e1, t1)=>t1 ? e1 ? \"ort-wasm-simd-threaded.wasm\" : \"ort-wasm-threaded.wasm\" : e1 ? \"ort-wasm-simd.wasm\" : \"ort-wasm.wasm\")(f1, i1), m1 = \"object\" == typeof h1 ? h1[b1] : void 0;\n                let y1 = !1;\n                const _1 = [];\n                if (t1 > 0 && _1.push(new Promise((e1)=>{\n                    setTimeout(()=>{\n                        y1 = !0, e1();\n                    }, t1);\n                })), _1.push(new Promise((e1, t1)=>{\n                    const r1 = i1 ? u1 : a1, o1 = {\n                        locateFile: (e1, t1)=>i1 && e1.endsWith(\".worker.js\") && \"undefined\" != typeof Blob ? URL.createObjectURL(new Blob([\n                                n1(4154)\n                            ], {\n                                type: \"text/javascript\"\n                            })) : e1.endsWith(\".wasm\") ? m1 || (null != g1 ? g1 : t1) + b1 : t1 + e1\n                    };\n                    if (i1) if (\"undefined\" == typeof Blob) o1.mainScriptUrlOrBlob = s1.join(__dirname, \"ort-wasm-threaded.js\");\n                    else {\n                        const e1 = `var ortWasmThreaded=(function(){var _scriptDir;return ${r1.toString()}})();`;\n                        o1.mainScriptUrlOrBlob = new Blob([\n                            e1\n                        ], {\n                            type: \"text/javascript\"\n                        });\n                    }\n                    r1(o1).then((t1)=>{\n                        p1 = !1, c1 = !0, l1 = t1, e1();\n                    }, (e1)=>{\n                        p1 = !1, d1 = !0, t1(e1);\n                    });\n                })), await Promise.race(_1), y1) throw new Error(`WebAssembly backend initializing failed due to timeout: ${t1}ms`);\n            }, t1.getInstance = ()=>{\n                if (c1 && l1) return l1;\n                throw new Error(\"WebAssembly is not initialized yet.\");\n            }, t1.dispose = ()=>{\n                var e1;\n                !c1 || p1 || d1 || (p1 = !0, null === (e1 = l1.PThread) || void 0 === e1 || e1.terminateAllThreads(), l1 = void 0, p1 = !1, c1 = !1, d1 = !0);\n            };\n        },\n        1497: (e1, t1, n1)=>{\n            \"use strict\";\n            Object.defineProperty(t1, \"__esModule\", {\n                value: !0\n            }), t1.checkLastError = t1.iterateExtraOptions = t1.allocWasmString = void 0;\n            const r1 = n1(263);\n            t1.allocWasmString = (e1, t1)=>{\n                const n1 = (0, r1.getInstance)(), o1 = n1.lengthBytesUTF8(e1) + 1, i1 = n1._malloc(o1);\n                return n1.stringToUTF8(e1, i1, o1), t1.push(i1), i1;\n            }, t1.iterateExtraOptions = (e1, n1, r1, o1)=>{\n                if (\"object\" == typeof e1 && null !== e1) {\n                    if (r1.has(e1)) throw new Error(\"Circular reference in options\");\n                    r1.add(e1);\n                }\n                Object.entries(e1).forEach(([e1, i1])=>{\n                    const s1 = n1 ? n1 + e1 : e1;\n                    if (\"object\" == typeof i1) (0, t1.iterateExtraOptions)(i1, s1 + \".\", r1, o1);\n                    else if (\"string\" == typeof i1 || \"number\" == typeof i1) o1(s1, i1.toString());\n                    else {\n                        if (\"boolean\" != typeof i1) throw new Error(\"Can't handle extra config type: \" + typeof i1);\n                        o1(s1, i1 ? \"1\" : \"0\");\n                    }\n                });\n            }, t1.checkLastError = (e1)=>{\n                const t1 = (0, r1.getInstance)(), n1 = t1.stackSave();\n                try {\n                    const n1 = t1.stackAlloc(8);\n                    t1._OrtGetLastError(n1, n1 + 4);\n                    const r1 = t1.HEAP32[n1 / 4], o1 = t1.HEAPU32[n1 / 4 + 1], i1 = o1 ? t1.UTF8ToString(o1) : \"\";\n                    throw new Error(`${e1} ERROR_CODE: ${r1}, ERROR_MESSAGE: ${i1}`);\n                } finally{\n                    t1.stackRestore(n1);\n                }\n            };\n        },\n        8050: (e1, t1, n1)=>{\n            \"use strict\";\n            n1.d(t1, {\n                Z: ()=>i1\n            });\n            var r1 = n1(6614), o1 = n1.n(r1);\n            function i1() {\n                return o1()('/*!\\n* ONNX Runtime Web v1.16.3\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={918:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.setRunOptions=void 0;const n=r(263),a=r(497);t.setRunOptions=e=>{const t=(0,n.getInstance)();let r=0;const o=[],s=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\"number\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\"number\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(s.terminate=!1);let n=0;return void 0!==(null==e?void 0:e.tag)&&(n=(0,a.allocWasmString)(e.tag,o)),r=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,n),0===r&&(0,a.checkLastError)(\"Can\\'t create run options.\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\"\",new WeakSet,((e,n)=>{const s=(0,a.allocWasmString)(e,o),i=(0,a.allocWasmString)(n,o);0!==t._OrtAddRunConfigEntry(r,s,i)&&(0,a.checkLastError)(`Can\\'t set a run config entry: ${e} - ${n}.`)})),[r,o]}catch(e){throw 0!==r&&t._OrtReleaseRunOptions(r),o.forEach((e=>t._free(e))),e}}},622:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.setSessionOptions=void 0;const n=r(263),a=r(497);t.setSessionOptions=e=>{var t,r,o,s;const i=(0,n.getInstance)();let u=0;const c=[],l=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\"1\"),e.executionProviders&&e.executionProviders.some((e=>\"webgpu\"===(\"string\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(l);try{const e=(e=>{switch(e){case\"disabled\":return 0;case\"basic\":return 1;case\"extended\":return 2;case\"all\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=l.graphOptimizationLevel)&&void 0!==t?t:\"all\"),f=(e=>{switch(e){case\"sequential\":return 0;case\"parallel\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(r=l.executionMode)&&void 0!==r?r:\"sequential\"),d=\"string\"==typeof l.logId?(0,a.allocWasmString)(l.logId,c):0,p=null!==(o=l.logSeverityLevel)&&void 0!==o?o:2;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log serverity level is not valid: ${p}`);const g=null!==(s=l.logVerbosityLevel)&&void 0!==s?s:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const h=\"string\"==typeof l.optimizedModelFilePath?(0,a.allocWasmString)(l.optimizedModelFilePath,c):0;return u=i._OrtCreateSessionOptions(e,!!l.enableCpuMemArena,!!l.enableMemPattern,f,!!l.enableProfiling,0,d,p,g,h),0===u&&(0,a.checkLastError)(\"Can\\'t create session options.\"),l.executionProviders&&((e,t,r)=>{for(const o of t){let t=\"string\"==typeof o?o:o.name;switch(t){case\"xnnpack\":t=\"XNNPACK\";break;case\"webnn\":if(t=\"WEBNN\",\"string\"!=typeof o){const t=o;if(null==t?void 0:t.deviceType){const o=(0,a.allocWasmString)(\"deviceType\",r),s=(0,a.allocWasmString)(t.deviceType,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,s)&&(0,a.checkLastError)(`Can\\'t set a session config entry: \\'deviceType\\' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const o=(0,a.allocWasmString)(\"powerPreference\",r),s=(0,a.allocWasmString)(t.powerPreference,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,s)&&(0,a.checkLastError)(`Can\\'t set a session config entry: \\'powerPreference\\' - ${t.powerPreference}.`)}}break;case\"webgpu\":t=\"JS\";break;case\"wasm\":case\"cpu\":continue;default:throw new Error(`not supported execution provider: ${t}`)}const s=(0,a.allocWasmString)(t,r);0!==(0,n.getInstance)()._OrtAppendExecutionProvider(e,s)&&(0,a.checkLastError)(`Can\\'t append execution provider: ${t}.`)}})(u,l.executionProviders,c),void 0!==l.extra&&(0,a.iterateExtraOptions)(l.extra,\"\",new WeakSet,((e,t)=>{const r=(0,a.allocWasmString)(e,c),n=(0,a.allocWasmString)(t,c);0!==i._OrtAddSessionConfigEntry(u,r,n)&&(0,a.checkLastError)(`Can\\'t set a session config entry: ${e} - ${t}.`)})),[u,c]}catch(e){throw 0!==u&&i._OrtReleaseSessionOptions(u),c.forEach((e=>i._free(e))),e}}},917:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\"int8\":return 3;case\"uint8\":return 2;case\"bool\":return 9;case\"int16\":return 5;case\"uint16\":return 4;case\"int32\":return 6;case\"uint32\":return 12;case\"float16\":return 10;case\"float32\":return 1;case\"float64\":return 11;case\"string\":return 8;case\"int64\":return 7;case\"uint64\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\"int8\";case 2:return\"uint8\";case 9:return\"bool\";case 5:return\"int16\";case 4:return\"uint16\";case 6:return\"int32\";case 12:return\"uint32\";case 10:return\"float16\";case 1:return\"float32\";case 11:return\"float64\";case 8:return\"string\";case 7:return\"int64\";case 13:return\"uint64\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\"float16\":case\"uint16\":return Uint16Array;case\"float32\":return Float32Array;case\"uint8\":case\"bool\":return Uint8Array;case\"int8\":return Int8Array;case\"int16\":return Int16Array;case\"int32\":return Int32Array;case\"float64\":return Float64Array;case\"uint32\":return Uint32Array;case\"int64\":return BigInt64Array;case\"uint64\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\"verbose\":return 0;case\"info\":return 1;case\"warning\":return 2;case\"error\":return 3;case\"fatal\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const n=r(918),a=r(622),o=r(917),s=r(263),i=r(497);t.initRuntime=async e=>{var t,r;t=e.wasm.numThreads,r=(0,o.logLevelStringToEnum)(e.logLevel),0!==(0,s.getInstance)()._OrtInit(t,r)&&(0,i.checkLastError)(\"Can\\'t initialize onnxruntime.\")};const u=new Map;t.createSessionAllocate=e=>{const t=(0,s.getInstance)(),r=t._malloc(e.byteLength);if(0===r)throw new Error(`Can\\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},t.createSessionFinalize=(e,t)=>{const r=(0,s.getInstance)();let n=0,o=0,c=[];const l=[],f=[];try{[o,c]=(0,a.setSessionOptions)(t),n=r._OrtCreateSession(e[0],e[1],o),0===n&&(0,i.checkLastError)(\"Can\\'t create a session.\");const[d,p]=(e=>{const t=(0,s.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,i.checkLastError)(\"Can\\'t get session input/output count.\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(r)}})(n),g=[],h=[];for(let e=0;e<d;e++){const t=r._OrtGetInputName(n,e);0===t&&(0,i.checkLastError)(\"Can\\'t get an input name.\"),l.push(t),g.push(r.UTF8ToString(t))}for(let e=0;e<p;e++){const t=r._OrtGetOutputName(n,e);0===t&&(0,i.checkLastError)(\"Can\\'t get an output name.\"),f.push(t),h.push(r.UTF8ToString(t))}return u.set(n,[n,l,f]),[n,g,h]}catch(e){throw l.forEach((e=>r._OrtFree(e))),f.forEach((e=>r._OrtFree(e))),0!==n&&r._OrtReleaseSession(n),e}finally{r._free(e[0]),0!==o&&r._OrtReleaseSessionOptions(o),c.forEach((e=>r._free(e)))}},t.createSession=(e,r)=>{const n=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(n,r)},t.releaseSession=e=>{const t=(0,s.getInstance)(),r=u.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);const[n,a,o]=r;a.forEach((e=>t._OrtFree(e))),o.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(n),u.delete(e)},t.run=async(e,t,r,a,c)=>{const l=(0,s.getInstance)(),f=u.get(e);if(!f)throw new Error(`cannot run inference. invalid session id: ${e}`);const[d,p,g]=f,h=t.length,m=a.length;let y=0,v=[];const b=[],w=[];try{[y,v]=(0,n.setRunOptions)(c);for(let e=0;e<h;e++){const t=r[e][0],n=r[e][1],a=r[e][2];let s,u;if(Array.isArray(a)){u=4*a.length,s=l._malloc(u),w.push(s);let e=s/4;for(let t=0;t<a.length;t++){if(\"string\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);l.HEAPU32[e++]=(0,i.allocWasmString)(a[t],w)}}else u=a.byteLength,s=l._malloc(u),w.push(s),l.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),s);const c=l.stackSave(),f=l.stackAlloc(4*n.length);try{let r=f/4;n.forEach((e=>l.HEAP32[r++]=e));const a=l._OrtCreateTensor((0,o.tensorDataTypeStringToEnum)(t),s,u,f,n.length);0===a&&(0,i.checkLastError)(`Can\\'t create tensor for input[${e}].`),b.push(a)}finally{l.stackRestore(c)}}const e=l.stackSave(),s=l.stackAlloc(4*h),u=l.stackAlloc(4*h),f=l.stackAlloc(4*m),_=l.stackAlloc(4*m);try{let e=s/4,r=u/4,n=f/4,c=_/4;for(let n=0;n<h;n++)l.HEAPU32[e++]=b[n],l.HEAPU32[r++]=p[t[n]];for(let e=0;e<m;e++)l.HEAPU32[n++]=0,l.HEAPU32[c++]=g[a[e]];let v=l._OrtRun(d,u,s,h,_,m,f,y);const w=l.jsepRunPromise;w&&void 0!==w.then&&(v=await w);const O=[];0!==v&&(0,i.checkLastError)(\"failed to call OrtRun().\");for(let e=0;e<m;e++){const t=l.HEAPU32[f/4+e],r=l.stackSave(),n=l.stackAlloc(16);let a,s=0;try{v=l._OrtGetTensorData(t,n,n+4,n+8,n+12),0!==v&&(0,i.checkLastError)(`Can\\'t access output tensor data on index ${e}.`);let r=n/4;const u=l.HEAPU32[r++];s=l.HEAPU32[r++];const c=l.HEAPU32[r++],f=l.HEAPU32[r++],d=[];for(let e=0;e<f;e++)d.push(l.HEAPU32[c/4+e]);l._OrtFree(c);const p=0===d.length?1:d.reduce(((e,t)=>e*t));if(a=(0,o.tensorDataTypeEnumToString)(u),\"string\"===a){const e=[];let t=s/4;for(let r=0;r<p;r++){const n=l.HEAPU32[t++],a=r===p-1?void 0:l.HEAPU32[t]-n;e.push(l.UTF8ToString(n,a))}O.push([a,d,e])}else{const e=new((0,o.tensorTypeToTypedArrayConstructor)(a))(p);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(l.HEAPU8.subarray(s,s+e.byteLength)),O.push([a,d,e])}}finally{l.stackRestore(r),\"string\"===a&&s&&l._free(s),l._OrtReleaseTensor(t)}}return O}finally{l.stackRestore(e)}}finally{b.forEach((e=>l._OrtReleaseTensor(e))),w.forEach((e=>l._free(e))),0!==y&&l._OrtReleaseRunOptions(y),v.forEach((e=>l._free(e)))}},t.endProfiling=e=>{const t=(0,s.getInstance)(),r=u.get(e);if(!r)throw new Error(\"invalid session id\");const n=r[0],a=t._OrtEndProfiling(n);0===a&&(0,i.checkLastError)(\"Can\\'t get an profile file name.\"),t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const r of e){const e=r[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,r){\"use strict\";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!(\"get\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,a)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\"default\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)\"default\"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return a(t,e),t};Object.defineProperty(t,\"__esModule\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const s=o(r(17)),i=r(932),u=r(474);let c,l=!1,f=!1,d=!1;t.initializeWebAssembly=async e=>{if(l)return Promise.resolve();if(f)throw new Error(\"multiple calls to \\'initializeWebAssembly()\\' detected.\");if(d)throw new Error(\"previous call to \\'initializeWebAssembly()\\' failed.\");f=!0;const t=e.initTimeout,n=e.numThreads,a=e.simd,o=n>1&&(()=>{try{return\"undefined\"!=typeof SharedArrayBuffer&&(\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),p=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),g=e.wasmPaths,h=\"string\"==typeof g?g:void 0,m=((e,t)=>t?e?\"ort-wasm-simd-threaded.wasm\":\"ort-wasm-threaded.wasm\":e?\"ort-wasm-simd.wasm\":\"ort-wasm.wasm\")(p,o),y=\"object\"==typeof g?g[m]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const n=o?u:i,a={locateFile:(e,t)=>o&&e.endsWith(\".worker.js\")&&\"undefined\"!=typeof Blob?URL.createObjectURL(new Blob([r(154)],{type:\"text/javascript\"})):e.endsWith(\".wasm\")?y||(null!=h?h:t)+m:t+e};if(o)if(\"undefined\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(__dirname,\"ort-wasm-threaded.js\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${n.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\"text/javascript\"})}n(a).then((t=>{f=!1,l=!0,c=t,e()}),(e=>{f=!1,d=!0,t(e)}))}))),await Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(l&&c)return c;throw new Error(\"WebAssembly is not initialized yet.\")},t.dispose=()=>{var e;!l||f||d||(f=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,f=!1,l=!1,d=!0)}},497:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const n=r(263);t.allocWasmString=(e,t)=>{const r=(0,n.getInstance)(),a=r.lengthBytesUTF8(e)+1,o=r._malloc(a);return r.stringToUTF8(e,o,a),t.push(o),o},t.iterateExtraOptions=(e,r,n,a)=>{if(\"object\"==typeof e&&null!==e){if(n.has(e))throw new Error(\"Circular reference in options\");n.add(e)}Object.entries(e).forEach((([e,o])=>{const s=r?r+e:e;if(\"object\"==typeof o)(0,t.iterateExtraOptions)(o,s+\".\",n,a);else if(\"string\"==typeof o||\"number\"==typeof o)a(s,o.toString());else{if(\"boolean\"!=typeof o)throw new Error(\"Can\\'t handle extra config type: \"+typeof o);a(s,o?\"1\":\"0\")}}))},t.checkLastError=e=>{const t=(0,n.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);const n=t.HEAP32[r/4],a=t.HEAPU32[r/4+1],o=a?t.UTF8ToString(a):\"\";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}},474:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return k.buffer!=D.buffer&&Y(),D}function n(){return k.buffer!=D.buffer&&Y(),I}function a(){return k.buffer!=D.buffer&&Y(),U}function o(){return k.buffer!=D.buffer&&Y(),L}function s(){return k.buffer!=D.buffer&&Y(),W}var i,u,c=e;c.ready=new Promise(((e,t)=>{i=e,u=t}));var l,f,d,p=Object.assign({},c),g=\"./this.program\",h=(e,t)=>{throw t},m=\"object\"==typeof window,y=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,b=c.ENVIRONMENT_IS_PTHREAD||!1,w=\"\";function _(e){return c.locateFile?c.locateFile(e,w):w+e}if(v){var O=r(147),S=r(17);let t;w=y?S.dirname(w)+\"/\":__dirname+\"/\",l=(e,t)=>(e=e.startsWith(\"file://\")?new URL(e):S.normalize(e),O.readFileSync(e,t?void 0:\"utf8\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,r,n=!0)=>{e=e.startsWith(\"file://\")?new URL(e):S.normalize(e),O.readFile(e,n?void 0:\"utf8\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!c.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\\\\\/g,\"/\")),process.argv.slice(2),h=(e,t)=>{throw process.exitCode=e,t},c.inspect=()=>\"[Emscripten Module object]\";try{t=r(267)}catch(e){throw console.error(\\'The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?\\'),e}global.Worker=t.Worker}else(m||y)&&(y?w=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\"blob:\")?w.substr(0,w.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(l=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},y&&(d=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),f=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=r(74).performance);var E=console.log.bind(console),A=console.error.bind(console);v&&(E=(...e)=>O.writeSync(1,e.join(\" \")+\"\\\\n\"),A=(...e)=>O.writeSync(2,e.join(\" \")+\"\\\\n\"));var T,M=c.print||E,R=c.printErr||A;Object.assign(c,p),p=null,c.thisProgram&&(g=c.thisProgram),c.quit&&(h=c.quit),c.wasmBinary&&(T=c.wasmBinary);var F=c.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&te(\"no native wasm support detected\");var k,C,x,P,D,I,U,L,W,H=!1;function Y(){var e=k.buffer;c.HEAP8=D=new Int8Array(e),c.HEAP16=new Int16Array(e),c.HEAP32=U=new Int32Array(e),c.HEAPU8=I=new Uint8Array(e),c.HEAPU16=new Uint16Array(e),c.HEAPU32=L=new Uint32Array(e),c.HEAPF32=new Float32Array(e),c.HEAPF64=W=new Float64Array(e)}var j=c.INITIAL_MEMORY||16777216;if(5242880<=j||te(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+j+\"! (STACK_SIZE=5242880)\"),b)k=c.wasmMemory;else if(c.wasmMemory)k=c.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:j/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&R(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");Y(),j=k.buffer.byteLength;var z,G=[],N=[],B=[],$=0;function q(){return F||0<$}var V,J,X=0,K=null,Z=null;function Q(){X++,c.monitorRunDependencies&&c.monitorRunDependencies(X)}function ee(){if(X--,c.monitorRunDependencies&&c.monitorRunDependencies(X),0==X&&(null!==K&&(clearInterval(K),K=null),Z)){var e=Z;Z=null,e()}}function te(e){throw c.onAbort&&c.onAbort(e),R(e=\"Aborted(\"+e+\")\"),H=!0,P=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),u(e),e}function re(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function ne(e){if(e==V&&T)return new Uint8Array(T);if(d)return d(e);throw\"both async and sync fetching of the wasm failed\"}function ae(e,t,r){return function(e){if(!T&&(m||y)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((t=>{if(!t.ok)throw\"failed to load wasm binary file at \\'\"+e+\"\\'\";return t.arrayBuffer()})).catch((()=>ne(e)));if(f)return new Promise(((t,r)=>{f(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ne(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{R(\"failed to asynchronously prepare wasm: \"+e),te(e)}))}function oe(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}function se(e){e.terminate(),e.onmessage=()=>{}}function ie(e){(e=ge.Fa[e])||te(),ge.fb(e)}function ue(e){var t=ge.Za();if(!t)return 6;ge.Ia.push(t),ge.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\"run\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return v&&t.unref(),t.postMessage(r,e.mb),0}re(V=\"ort-wasm-threaded.wasm\")||(V=_(V));var ce=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,le=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&ce)return ce.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\"\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var s=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|s:(7&a)<<18|o<<12|s<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},fe=(e,t)=>(e>>>=0)?le(n(),e,t):\"\";function de(e){if(b)return qe(1,1,e);P=e,q()||(ge.hb(),c.onExit&&c.onExit(e),H=!0),h(e,new oe(e))}var pe=e=>{if(P=e,b)throw me(e),\"unwind\";de(e)},ge={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){b?ge.ab():ge.$a()},$a:function(){G.unshift((()=>{Q(),ge.bb((()=>ee()))}))},ab:function(){ge.receiveObjectTransfer=ge.eb,ge.threadInitTLS=ge.Sa,ge.setExitStatus=ge.Ra,F=!1},Ra:function(e){P=e},rb:[\"$terminateWorker\"],hb:function(){for(var e of ge.Ia)se(e);for(e of ge.La)se(e);ge.La=[],ge.Ia=[],ge.Fa=[]},fb:function(e){var t=e.Ha;delete ge.Fa[t],ge.La.push(e),ge.Ia.splice(ge.Ia.indexOf(e),1),e.Ha=0,yt(t)},eb:function(){},Sa:function(){ge.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=dt()){var a=ge.Fa[r.qb];a?a.postMessage(r,r.transferList):R(\\'Internal error! Worker sent a message \"\\'+n+\\'\" to target pthread \\'+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===n?He():\"spawnThread\"===n?ue(r):\"cleanupThread\"===n?ie(r.thread):\"killThread\"===n?(r=r.thread,n=ge.Fa[r],delete ge.Fa[r],se(n),yt(r),ge.Ia.splice(ge.Ia.indexOf(n),1),n.Ha=0):\"cancelThread\"===n?ge.Fa[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===n?(e.loaded=!0,t(e)):\"alert\"===n?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===n?c[r.handler](...r.args):n&&R(\"worker sent an unknown command \"+n)},e.onerror=e=>{throw R(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])c.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\"load\",handlers:n,urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:k,wasmModule:x})})),bb:function(e){e()},Xa:function(){var e=_(\"ort-wasm-threaded.worker.js\");e=new Worker(e),ge.La.push(e)},Za:function(){return 0==ge.La.length&&(ge.Xa(),ge.cb(ge.La[0])),ge.La.pop()}};c.PThread=ge;var he=e=>{for(;0<e.length;)e.shift()(c)};function me(e){if(b)return qe(2,0,e);pe(e)}c.establishStackSpace=function(){var e=dt(),t=a()[e+52>>2>>>0];e=a()[e+56>>2>>>0],_t(t,t-e),St(t)};var ye=[];function ve(e){this.Oa=e-24,this.Wa=function(e){o()[this.Oa+4>>2>>>0]=e},this.Va=function(e){o()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){o()[this.Oa+16>>2>>>0]=0}}function be(e,t,r,n){return b?qe(3,1,e,t,r,n):we(e,t,r,n)}function we(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\"undefined\"==typeof SharedArrayBuffer)return R(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return b&&0===a.length?be(e,t,r,n):(e={gb:r,Ha:e,Ya:n,mb:a},b?(e.ob=\"spawnThread\",postMessage(e,a),0):ue(e))}function _e(e,t,r){return b?qe(4,1,e,t,r):0}function Oe(e,t){if(b)return qe(5,1,e,t)}c.invokeEntryPoint=function(e,t){var r=ye[e];r||(e>=ye.length&&(ye.length=e+1),ye[e]=r=z.get(e)),e=r(t),q()?ge.Ra(e):vt(e)};var Se=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Ee=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var s=e.charCodeAt(o);if(55296<=s&&57343>=s&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++o)),127>=s){if(r>=n)break;t[r++>>>0]=s}else{if(2047>=s){if(r+1>=n)break;t[r++>>>0]=192|s>>6}else{if(65535>=s){if(r+2>=n)break;t[r++>>>0]=224|s>>12}else{if(r+3>=n)break;t[r++>>>0]=240|s>>18,t[r++>>>0]=128|s>>12&63}t[r++>>>0]=128|s>>6&63}t[r++>>>0]=128|63&s}}return t[r>>>0]=0,r-a},Ae=(e,t,r)=>Ee(e,n(),t,r);function Te(e,t){if(b)return qe(6,1,e,t)}function Me(e,t,r){if(b)return qe(7,1,e,t,r)}function Re(e,t,r){return b?qe(8,1,e,t,r):0}function Fe(e,t){if(b)return qe(9,1,e,t)}function ke(e,t,r){if(b)return qe(10,1,e,t,r)}function Ce(e,t,r,n){if(b)return qe(11,1,e,t,r,n)}function xe(e,t,r,n){if(b)return qe(12,1,e,t,r,n)}function Pe(e,t,r,n){if(b)return qe(13,1,e,t,r,n)}function De(e){if(b)return qe(14,1,e)}function Ie(e,t){if(b)return qe(15,1,e,t)}function Ue(e,t,r){if(b)return qe(16,1,e,t,r)}var Le=e=>{if(!H)try{if(e(),!q())try{b?vt(P):pe(P)}catch(e){e instanceof oe||\"unwind\"==e||h(1,e)}}catch(e){e instanceof oe||\"unwind\"==e||h(1,e)}};function We(e){e>>>=0,\"function\"==typeof Atomics.nb&&(Atomics.nb(a(),e>>2,e).value.then(He),e+=128,Atomics.store(a(),e>>2,1))}function He(){var e=dt();e&&(We(e),Le((()=>bt())))}c.__emscripten_thread_mailbox_await=We,c.checkMailbox=He;var Ye=e=>0==e%4&&(0!=e%100||0==e%400),je=[0,31,60,91,121,152,182,213,244,274,305,335],ze=[0,31,59,90,120,151,181,212,243,273,304,334];function Ge(e,t,r,n,a,o,s,i){return b?qe(17,1,e,t,r,n,a,o,s,i):-52}function Ne(e,t,r,n,a,o,s){if(b)return qe(18,1,e,t,r,n,a,o,s)}var Be=e=>{var t=Se(e)+1,r=pt(t);return r&&Ae(e,r,t),r},$e=e=>{var t=Ot();return e=e(),St(t),e};function qe(e,t){var r=arguments.length-2,n=arguments;return $e((()=>{for(var a=Et(8*r),o=a>>3,i=0;i<r;i++){var u=n[2+i];s()[o+i>>>0]=u}return mt(e,r,a,t)}))}var Ve,Je=[],Xe={},Ke=()=>{if(!Ve){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);Ve=r}return Ve};function Ze(e,r){if(b)return qe(19,1,e,r);e>>>=0,r>>>=0;var n=0;return Ke().forEach((function(a,s){var i=r+n;for(s=o()[e+4*s>>2>>>0]=i,i=0;i<a.length;++i)t()[s++>>0>>>0]=a.charCodeAt(i);t()[s>>0>>>0]=0,n+=a.length+1})),0}function Qe(e,t){if(b)return qe(20,1,e,t);e>>>=0,t>>>=0;var r=Ke();o()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),o()[t>>2>>>0]=n,0}function et(e){return b?qe(21,1,e):52}function tt(e,t,r,n){return b?qe(22,1,e,t,r,n):52}function rt(e,t,r,n,a){return b?qe(23,1,e,t,r,n,a):70}var nt=[null,[],[]];function at(e,t,r,a){if(b)return qe(24,1,e,t,r,a);t>>>=0,r>>>=0,a>>>=0;for(var s=0,i=0;i<r;i++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++){var f=n()[u+l>>>0],d=nt[e];0===f||10===f?((1===e?M:R)(le(d,0)),d.length=0):d.push(f)}s+=c}return o()[a>>2>>>0]=s,0}var ot=e=>(ot=(()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return e=>(e.set(crypto.getRandomValues(new Uint8Array(e.byteLength))),e);if(v)try{var e=r(113);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}te(\"initRandomDevice\")})())(e),st=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31],ut=(e,r)=>{t().set(e,r>>>0)};function ct(e,t,r,n){function o(e,t,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=r[0]+e;return e}function s(e,t){return o(e,t,\"0\")}function i(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Ye(e.getFullYear())?st:it)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),r=u(r),0>=i(t,e)?0>=i(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,n>>>=0;var l=a()[n+40>>2>>>0];for(var f in n={kb:a()[n>>2>>>0],jb:a()[n+4>>2>>>0],Ma:a()[n+8>>2>>>0],Qa:a()[n+12>>2>>>0],Na:a()[n+16>>2>>>0],Ka:a()[n+20>>2>>>0],Ga:a()[n+24>>2>>>0],Ja:a()[n+28>>2>>>0],sb:a()[n+32>>2>>>0],ib:a()[n+36>>2>>>0],lb:l?fe(l):\"\"},r=fe(r),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(f,\"g\"),l[f]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),p=\"January February March April May June July August September October November December\".split(\" \");for(f in l={\"%a\":e=>d[e.Ga].substring(0,3),\"%A\":e=>d[e.Ga],\"%b\":e=>p[e.Na].substring(0,3),\"%B\":e=>p[e.Na],\"%C\":e=>s((e.Ka+1900)/100|0,2),\"%d\":e=>s(e.Qa,2),\"%e\":e=>o(e.Qa,2,\" \"),\"%g\":e=>c(e).toString().substring(2),\"%G\":e=>c(e),\"%H\":e=>s(e.Ma,2),\"%I\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),s(e,2)),\"%j\":e=>{for(var t=0,r=0;r<=e.Na-1;t+=(Ye(e.Ka+1900)?st:it)[r++]);return s(e.Qa+t,3)},\"%m\":e=>s(e.Na+1,2),\"%M\":e=>s(e.jb,2),\"%n\":()=>\"\\\\n\",\"%p\":e=>0<=e.Ma&&12>e.Ma?\"AM\":\"PM\",\"%S\":e=>s(e.kb,2),\"%t\":()=>\"\\\\t\",\"%u\":e=>e.Ga||7,\"%U\":e=>s(Math.floor((e.Ja+7-e.Ga)/7),2),\"%V\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&Ye(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&Ye(e.Ka%400-1))&&t++}return s(t,2)},\"%w\":e=>e.Ga,\"%W\":e=>s(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\"%y\":e=>(e.Ka+1900).toString().substring(2),\"%Y\":e=>e.Ka+1900,\"%z\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":e=>e.lb,\"%%\":()=>\"%\"},r=r.replace(/%%/g,\"\\\\0\\\\0\"),l)r.includes(f)&&(r=r.replace(new RegExp(f,\"g\"),l[f](n)));return f=function(e){var t=Array(Se(e)+1);return Ee(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\"%\")),f.length>t?0:(ut(f,e),f.length-1)}ge.Pa();var lt=[null,de,me,be,_e,Oe,Te,Me,Re,Fe,ke,Ce,xe,Pe,De,Ie,Ue,Ge,Ne,Ze,Qe,et,tt,rt,at],ft={b:function(e,t,r){throw new ve(e>>>=0).Pa(t>>>0,r>>>0),e},N:function(e){gt(e>>>0,!y,1,!m,131072,!1),ge.Sa()},k:function(e){e>>>=0,b?postMessage({cmd:\"cleanupThread\",thread:e}):ie(e)},I:we,h:_e,T:Oe,E:Te,G:Me,U:Re,R:Fe,J:ke,Q:Ce,o:xe,F:Pe,C:De,S:Ie,D:Ue,q:()=>!0,A:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>He())):b?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=ge.Fa[e])&&e.postMessage({cmd:\"checkMailbox\"})},L:function(){return-1},M:We,p:function(e){v&&ge.Fa[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),a()[r>>2>>>0]=e.getUTCSeconds(),a()[r+4>>2>>>0]=e.getUTCMinutes(),a()[r+8>>2>>>0]=e.getUTCHours(),a()[r+12>>2>>>0]=e.getUTCDate(),a()[r+16>>2>>>0]=e.getUTCMonth(),a()[r+20>>2>>>0]=e.getUTCFullYear()-1900,a()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),a()[r>>2>>>0]=e.getSeconds(),a()[r+4>>2>>>0]=e.getMinutes(),a()[r+8>>2>>>0]=e.getHours(),a()[r+12>>2>>>0]=e.getDate(),a()[r+16>>2>>>0]=e.getMonth(),a()[r+20>>2>>>0]=e.getFullYear()-1900,a()[r+24>>2>>>0]=e.getDay(),t=(Ye(e.getFullYear())?je:ze)[e.getMonth()]+e.getDate()-1|0,a()[r+28>>2>>>0]=t,a()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=n&&e.getTimezoneOffset()==Math.min(n,t)),a()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),r=a()[e+32>>2>>>0],n=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),s=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(s,o);return 0>r?a()[e+32>>2>>>0]=Number(o!=s&&i==n):0<r!=(i==n)&&(o=Math.max(s,o),t.setTime(t.getTime()+6e4*((0<r?i:o)-n))),a()[e+24>>2>>>0]=t.getDay(),r=(Ye(t.getFullYear())?je:ze)[t.getMonth()]+t.getDate()-1|0,a()[e+28>>2>>>0]=r,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,wt((J=e,1<=+Math.abs(J)?0<J?+Math.floor(J/4294967296)>>>0:~~+Math.ceil((J-+(~~J>>>0))/4294967296)>>>0:0)),e>>>0},r:Ge,s:Ne,z:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\"GMT\"}e>>>=0,t>>>=0,r>>>=0;var s=(new Date).getFullYear(),i=new Date(s,0,1),u=new Date(s,6,1);s=i.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(s,c);o()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(s!=c),e=n(i),t=n(u),e=Be(e),t=Be(t),c<s?(o()[r>>2>>>0]=e,o()[r+4>>2>>>0]=t):(o()[r>>2>>>0]=t,o()[r+4>>2>>>0]=e)},c:()=>{te(\"\")},l:function(){},i:function(){return Date.now()},V:()=>{throw $+=1,\"unwind\"},B:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return v?r(37).cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(ge.pb=t>>>0,Je.length=r,t=n>>>0>>3,n=0;n<r;n++)Je[n]=s()[t+n>>>0];return lt[e].apply(null,Je)},y:function(e){e>>>=0;var t=n().length;if(e<=t||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-k.buffer.byteLength+65535>>>16;try{k.grow(o),Y();var s=1;break e}catch(e){}s=void 0}if(s)return!0}return!1},O:Ze,P:Qe,j:pe,g:et,n:tt,w:rt,m:at,x:function(e,t){return e>>>=0,t>>>=0,ot(n().subarray(e>>>0,e+t>>>0)),0},a:k||c.wasmMemory,H:ct,d:function(e,t,r,n){return ct(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,C=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),ge.Ta.push(C.sa),z=C.ta,N.unshift(C.W),x=t,ee(),e}var t={a:ft};if(Q(),c.instantiateWasm)try{return c.instantiateWasm(t,e)}catch(e){R(\"Module.instantiateWasm callback failed with error: \"+e),u(e)}(function(e,t){var r=V;return T||\"function\"!=typeof WebAssembly.instantiateStreaming||re(r)||r.startsWith(\"file://\")||v||\"function\"!=typeof fetch?ae(r,e,t):fetch(r,{credentials:\"same-origin\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return R(\"wasm streaming compile failed: \"+n),R(\"falling back to ArrayBuffer instantiation\"),ae(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),c._OrtInit=(e,t)=>(c._OrtInit=C.X)(e,t),c._OrtGetLastError=(e,t)=>(c._OrtGetLastError=C.Y)(e,t),c._OrtCreateSessionOptions=(e,t,r,n,a,o,s,i,u,l)=>(c._OrtCreateSessionOptions=C.Z)(e,t,r,n,a,o,s,i,u,l),c._OrtAppendExecutionProvider=(e,t)=>(c._OrtAppendExecutionProvider=C._)(e,t),c._OrtAddSessionConfigEntry=(e,t,r)=>(c._OrtAddSessionConfigEntry=C.$)(e,t,r),c._OrtReleaseSessionOptions=e=>(c._OrtReleaseSessionOptions=C.aa)(e),c._OrtCreateSession=(e,t,r)=>(c._OrtCreateSession=C.ba)(e,t,r),c._OrtReleaseSession=e=>(c._OrtReleaseSession=C.ca)(e),c._OrtGetInputOutputCount=(e,t,r)=>(c._OrtGetInputOutputCount=C.da)(e,t,r),c._OrtGetInputName=(e,t)=>(c._OrtGetInputName=C.ea)(e,t),c._OrtGetOutputName=(e,t)=>(c._OrtGetOutputName=C.fa)(e,t),c._OrtFree=e=>(c._OrtFree=C.ga)(e),c._OrtCreateTensor=(e,t,r,n,a)=>(c._OrtCreateTensor=C.ha)(e,t,r,n,a),c._OrtGetTensorData=(e,t,r,n,a)=>(c._OrtGetTensorData=C.ia)(e,t,r,n,a),c._OrtReleaseTensor=e=>(c._OrtReleaseTensor=C.ja)(e),c._OrtCreateRunOptions=(e,t,r,n)=>(c._OrtCreateRunOptions=C.ka)(e,t,r,n),c._OrtAddRunConfigEntry=(e,t,r)=>(c._OrtAddRunConfigEntry=C.la)(e,t,r),c._OrtReleaseRunOptions=e=>(c._OrtReleaseRunOptions=C.ma)(e),c._OrtRun=(e,t,r,n,a,o,s,i)=>(c._OrtRun=C.na)(e,t,r,n,a,o,s,i),c._OrtEndProfiling=e=>(c._OrtEndProfiling=C.oa)(e);var dt=c._pthread_self=()=>(dt=c._pthread_self=C.pa)(),pt=c._malloc=e=>(pt=c._malloc=C.qa)(e);c._free=e=>(c._free=C.ra)(e),c.__emscripten_tls_init=()=>(c.__emscripten_tls_init=C.sa)();var gt=c.__emscripten_thread_init=(e,t,r,n,a,o)=>(gt=c.__emscripten_thread_init=C.ua)(e,t,r,n,a,o);c.__emscripten_thread_crashed=()=>(c.__emscripten_thread_crashed=C.va)();var ht,mt=(e,t,r,n)=>(mt=C.wa)(e,t,r,n),yt=e=>(yt=C.xa)(e),vt=c.__emscripten_thread_exit=e=>(vt=c.__emscripten_thread_exit=C.ya)(e),bt=c.__emscripten_check_mailbox=()=>(bt=c.__emscripten_check_mailbox=C.za)(),wt=e=>(wt=C.Aa)(e),_t=(e,t)=>(_t=C.Ba)(e,t),Ot=()=>(Ot=C.Ca)(),St=e=>(St=C.Da)(e),Et=e=>(Et=C.Ea)(e);function At(){function e(){if(!ht&&(ht=!0,c.calledRun=!0,!H)&&(b||he(N),i(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),!b)){if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var e=c.postRun.shift();B.unshift(e)}he(B)}}if(!(0<X))if(b)i(c),b||he(N),startWorker(c);else{if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)G.unshift(c.preRun.shift());he(G),0<X||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){c.setStatus(\"\")}),1),e()}),1)):e())}}if(c.keepRuntimeAlive=q,c.wasmMemory=k,c.stackAlloc=Et,c.stackSave=Ot,c.stackRestore=St,c.UTF8ToString=fe,c.stringToUTF8=Ae,c.lengthBytesUTF8=Se,c.ExitStatus=oe,c.PThread=ge,Z=function e(){ht||At(),ht||(Z=e)},c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();return At(),e.ready});e.exports=n},932:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,n,a=e;a.ready=new Promise(((e,r)=>{t=e,n=r}));var o,s,i,u=Object.assign({},a),c=\"./this.program\",l=(e,t)=>{throw t},f=\"object\"==typeof window,d=\"function\"==typeof importScripts,p=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,g=\"\";if(p){var h=r(147),m=r(17);g=d?m.dirname(g)+\"/\":__dirname+\"/\",o=(e,t)=>(e=e.startsWith(\"file://\")?new URL(e):m.normalize(e),h.readFileSync(e,t?void 0:\"utf8\")),i=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),s=(e,t,r,n=!0)=>{e=e.startsWith(\"file://\")?new URL(e):m.normalize(e),h.readFile(e,n?void 0:\"utf8\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!a.thisProgram&&1<process.argv.length&&(c=process.argv[1].replace(/\\\\\\\\/g,\"/\")),process.argv.slice(2),l=(e,t)=>{throw process.exitCode=e,t},a.inspect=()=>\"[Emscripten Module object]\"}else(f||d)&&(d?g=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(g=document.currentScript.src),_scriptDir&&(g=_scriptDir),g=0!==g.indexOf(\"blob:\")?g.substr(0,g.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",o=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},d&&(i=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),s=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)});var y,v=a.print||console.log.bind(console),b=a.printErr||console.error.bind(console);Object.assign(a,u),u=null,a.thisProgram&&(c=a.thisProgram),a.quit&&(l=a.quit),a.wasmBinary&&(y=a.wasmBinary);var w=a.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&W(\"no native wasm support detected\");var _,O,S,E,A,T,M=!1;function R(){var e=_.buffer;a.HEAP8=S=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=A=new Int32Array(e),a.HEAPU8=E=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=T=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}var F=[],k=[],C=[];function x(){var e=a.preRun.shift();F.unshift(e)}var P,D,I=0,U=null,L=null;function W(e){throw a.onAbort&&a.onAbort(e),b(e=\"Aborted(\"+e+\")\"),M=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),n(e),e}function H(e){return e.startsWith(\"data:application/octet-stream;base64,\")}if(!H(P=\"ort-wasm.wasm\")){var Y=P;P=a.locateFile?a.locateFile(Y,g):g+Y}function j(e){if(e==P&&y)return new Uint8Array(y);if(i)return i(e);throw\"both async and sync fetching of the wasm failed\"}function z(e,t,r){return function(e){if(!y&&(f||d)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((t=>{if(!t.ok)throw\"failed to load wasm binary file at \\'\"+e+\"\\'\";return t.arrayBuffer()})).catch((()=>j(e)));if(s)return new Promise(((t,r)=>{s(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>j(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{b(\"failed to asynchronously prepare wasm: \"+e),W(e)}))}function G(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}var N=e=>{for(;0<e.length;)e.shift()(a)};function B(e){this.qa=e-24,this.va=function(e){T[this.qa+4>>2>>>0]=e},this.ua=function(e){T[this.qa+8>>2>>>0]=e},this.sa=function(e,t){this.ta(),this.va(e),this.ua(t)},this.ta=function(){T[this.qa+16>>2>>>0]=0}}var $,q=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,V=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&q)return q.decode(e.subarray(t,r));for(n=\"\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var s=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|s:(7&a)<<18|o<<12|s<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},J=(e,t)=>(e>>>=0)?V(E,e,t):\"\",X=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},K=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var s=e.charCodeAt(o);if(55296<=s&&57343>=s&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++o)),127>=s){if(r>=n)break;t[r++>>>0]=s}else{if(2047>=s){if(r+1>=n)break;t[r++>>>0]=192|s>>6}else{if(65535>=s){if(r+2>=n)break;t[r++>>>0]=224|s>>12}else{if(r+3>=n)break;t[r++>>>0]=240|s>>18,t[r++>>>0]=128|s>>12&63}t[r++>>>0]=128|s>>6&63}t[r++>>>0]=128|63&s}}return t[r>>>0]=0,r-a},Z=e=>0==e%4&&(0!=e%100||0==e%400),Q=[0,31,60,91,121,152,182,213,244,274,305,335],ee=[0,31,59,90,120,151,181,212,243,273,304,334],te=e=>{var t=X(e)+1,r=le(t);return r&&K(e,E,r,t),r},re={},ne=()=>{if(!$){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:c||\"./this.program\"};for(e in re)void 0===re[e]?delete t[e]:t[e]=re[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);$=r}return $},ae=[null,[],[]],oe=e=>(oe=(()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return e=>crypto.getRandomValues(e);if(p)try{var e=r(113);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}W(\"initRandomDevice\")})())(e),se=[31,29,31,30,31,30,31,31,30,31,30,31],ie=[31,28,31,30,31,30,31,31,30,31,30,31];function ue(e,t,r,n){function a(e,t,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=r[0]+e;return e}function o(e,t){return a(e,t,\"0\")}function s(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function i(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.ma;for(e=new Date(new Date(e.na+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Z(e.getFullYear())?se:ie)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=i(new Date(e.getFullYear(),0,4)),r=i(r),0>=s(t,e)?0>=s(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0;var c=A[40+(n>>>=0)>>2>>>0];for(var l in n={ya:A[n>>2>>>0],xa:A[n+4>>2>>>0],oa:A[n+8>>2>>>0],ra:A[n+12>>2>>>0],pa:A[n+16>>2>>>0],na:A[n+20>>2>>>0],ha:A[n+24>>2>>>0],ma:A[n+28>>2>>>0],Aa:A[n+32>>2>>>0],wa:A[n+36>>2>>>0],za:c?J(c):\"\"},r=J(r),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(l,\"g\"),c[l]);var f=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(l in c={\"%a\":e=>f[e.ha].substring(0,3),\"%A\":e=>f[e.ha],\"%b\":e=>d[e.pa].substring(0,3),\"%B\":e=>d[e.pa],\"%C\":e=>o((e.na+1900)/100|0,2),\"%d\":e=>o(e.ra,2),\"%e\":e=>a(e.ra,2,\" \"),\"%g\":e=>u(e).toString().substring(2),\"%G\":e=>u(e),\"%H\":e=>o(e.oa,2),\"%I\":e=>(0==(e=e.oa)?e=12:12<e&&(e-=12),o(e,2)),\"%j\":e=>{for(var t=0,r=0;r<=e.pa-1;t+=(Z(e.na+1900)?se:ie)[r++]);return o(e.ra+t,3)},\"%m\":e=>o(e.pa+1,2),\"%M\":e=>o(e.xa,2),\"%n\":()=>\"\\\\n\",\"%p\":e=>0<=e.oa&&12>e.oa?\"AM\":\"PM\",\"%S\":e=>o(e.ya,2),\"%t\":()=>\"\\\\t\",\"%u\":e=>e.ha||7,\"%U\":e=>o(Math.floor((e.ma+7-e.ha)/7),2),\"%V\":e=>{var t=Math.floor((e.ma+7-(e.ha+6)%7)/7);if(2>=(e.ha+371-e.ma-2)%7&&t++,t)53==t&&(4==(r=(e.ha+371-e.ma)%7)||3==r&&Z(e.na)||(t=1));else{t=52;var r=(e.ha+7-e.ma-1)%7;(4==r||5==r&&Z(e.na%400-1))&&t++}return o(t,2)},\"%w\":e=>e.ha,\"%W\":e=>o(Math.floor((e.ma+7-(e.ha+6)%7)/7),2),\"%y\":e=>(e.na+1900).toString().substring(2),\"%Y\":e=>e.na+1900,\"%z\":e=>{var t=0<=(e=e.wa);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":e=>e.za,\"%%\":()=>\"%\"},r=r.replace(/%%/g,\"\\\\0\\\\0\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\"g\"),c[l](n)));return l=function(e){var t=Array(X(e)+1);return K(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\"%\")),l.length>t?0:(S.set(l,e>>>0),l.length-1)}var ce={a:function(e,t,r){throw new B(e>>>=0).sa(t>>>0,r>>>0),e},e:function(){return 0},I:function(){},y:function(){},A:function(){},K:function(){return 0},G:function(){},B:function(){},F:function(){},g:function(){},z:function(){},w:function(){},H:function(){},x:function(){},k:()=>!0,n:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),A[r>>2>>>0]=e.getUTCSeconds(),A[r+4>>2>>>0]=e.getUTCMinutes(),A[r+8>>2>>>0]=e.getUTCHours(),A[r+12>>2>>>0]=e.getUTCDate(),A[r+16>>2>>>0]=e.getUTCMonth(),A[r+20>>2>>>0]=e.getUTCFullYear()-1900,A[r+24>>2>>>0]=e.getUTCDay(),A[r+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},o:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),A[r>>2>>>0]=e.getSeconds(),A[r+4>>2>>>0]=e.getMinutes(),A[r+8>>2>>>0]=e.getHours(),A[r+12>>2>>>0]=e.getDate(),A[r+16>>2>>>0]=e.getMonth(),A[r+20>>2>>>0]=e.getFullYear()-1900,A[r+24>>2>>>0]=e.getDay(),A[r+28>>2>>>0]=(Z(e.getFullYear())?Q:ee)[e.getMonth()]+e.getDate()-1|0,A[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();A[r+32>>2>>>0]=0|(t!=n&&e.getTimezoneOffset()==Math.min(n,t))},p:function(e){e>>>=0;var t=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),r=A[e+32>>2>>>0],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(o,a);return 0>r?A[e+32>>2>>>0]=Number(a!=o&&s==n):0<r!=(s==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?s:a)-n))),A[e+24>>2>>>0]=t.getDay(),A[e+28>>2>>>0]=(Z(t.getFullYear())?Q:ee)[t.getMonth()]+t.getDate()-1|0,A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),A[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,de((D=e,1<=+Math.abs(D)?0<D?+Math.floor(D/4294967296)>>>0:~~+Math.ceil((D-+(~~D>>>0))/4294967296)>>>0:0)),e>>>0},l:function(){return-52},m:function(){},u:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\"GMT\"}r>>>=0;var a=(new Date).getFullYear(),o=new Date(a,0,1),s=new Date(a,6,1);a=o.getTimezoneOffset();var i=s.getTimezoneOffset();T[e>>>0>>2>>>0]=60*Math.max(a,i),A[t>>>0>>2>>>0]=Number(a!=i),e=n(o),t=n(s),e=te(e),t=te(t),i<a?(T[r>>2>>>0]=e,T[r+4>>2>>>0]=t):(T[r>>2>>>0]=t,T[r+4>>2>>>0]=e)},d:()=>{W(\"\")},h:function(){return Date.now()},v:function(){return 4294901760},b:()=>performance.now(),J:function(e,t,r){return t>>>=0,E.copyWithin(e>>>0>>>0,t>>>0,t+(r>>>0)>>>0)},t:function(e){e>>>=0;var t=E.length;if(4294901760<e)return!1;for(var r=1;4>=r;r*=2){var n=t*(1+.2/r);n=Math.min(n,e+100663296);var a=Math;n=Math.max(e,n);e:{a=a.min.call(a,4294901760,n+(65536-n%65536)%65536)-_.buffer.byteLength+65535>>>16;try{_.grow(a),R();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},D:function(e,t){e>>>=0,t>>>=0;var r=0;return ne().forEach((function(n,a){var o=t+r;for(a=T[e+4*a>>2>>>0]=o,o=0;o<n.length;++o)S[a++>>0>>>0]=n.charCodeAt(o);S[a>>0>>>0]=0,r+=n.length+1})),0},E:function(e,t){e>>>=0,t>>>=0;var r=ne();T[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),T[t>>2>>>0]=n,0},s:e=>{w||(a.onExit&&a.onExit(e),M=!0),l(e,new G(e))},f:()=>52,j:function(){return 52},q:function(){return 70},i:function(e,t,r,n){t>>>=0,r>>>=0,n>>>=0;for(var a=0,o=0;o<r;o++){var s=T[t>>2>>>0],i=T[t+4>>2>>>0];t+=8;for(var u=0;u<i;u++){var c=E[s+u>>>0],l=ae[e];0===c||10===c?((1===e?v:b)(V(l,0)),l.length=0):l.push(c)}a+=i}return T[n>>2>>>0]=a,0},r:function(e,t){return e>>>=0,oe(E.subarray(e>>>0,e+(t>>>0)>>>0)),0},C:ue,c:function(e,t,r,n){return ue(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e){if(e=e.exports,O=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),_=O.L,R(),k.unshift(O.M),I--,a.monitorRunDependencies&&a.monitorRunDependencies(I),0==I&&(null!==U&&(clearInterval(U),U=null),L)){var t=L;L=null,t()}return e}var t={a:ce};if(I++,a.monitorRunDependencies&&a.monitorRunDependencies(I),a.instantiateWasm)try{return a.instantiateWasm(t,e)}catch(e){b(\"Module.instantiateWasm callback failed with error: \"+e),n(e)}(function(e,t){var r=P;return y||\"function\"!=typeof WebAssembly.instantiateStreaming||H(r)||r.startsWith(\"file://\")||p||\"function\"!=typeof fetch?z(r,e,t):fetch(r,{credentials:\"same-origin\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return b(\"wasm streaming compile failed: \"+n),b(\"falling back to ArrayBuffer instantiation\"),z(r,e,t)}))))})(t,(function(t){e(t.instance)})).catch(n)}(),a._OrtInit=(e,t)=>(a._OrtInit=O.N)(e,t),a._OrtGetLastError=(e,t)=>(a._OrtGetLastError=O.O)(e,t),a._OrtCreateSessionOptions=(e,t,r,n,o,s,i,u,c,l)=>(a._OrtCreateSessionOptions=O.P)(e,t,r,n,o,s,i,u,c,l),a._OrtAppendExecutionProvider=(e,t)=>(a._OrtAppendExecutionProvider=O.Q)(e,t),a._OrtAddSessionConfigEntry=(e,t,r)=>(a._OrtAddSessionConfigEntry=O.R)(e,t,r),a._OrtReleaseSessionOptions=e=>(a._OrtReleaseSessionOptions=O.S)(e),a._OrtCreateSession=(e,t,r)=>(a._OrtCreateSession=O.T)(e,t,r),a._OrtReleaseSession=e=>(a._OrtReleaseSession=O.U)(e),a._OrtGetInputOutputCount=(e,t,r)=>(a._OrtGetInputOutputCount=O.V)(e,t,r),a._OrtGetInputName=(e,t)=>(a._OrtGetInputName=O.W)(e,t),a._OrtGetOutputName=(e,t)=>(a._OrtGetOutputName=O.X)(e,t),a._OrtFree=e=>(a._OrtFree=O.Y)(e),a._OrtCreateTensor=(e,t,r,n,o)=>(a._OrtCreateTensor=O.Z)(e,t,r,n,o),a._OrtGetTensorData=(e,t,r,n,o)=>(a._OrtGetTensorData=O._)(e,t,r,n,o),a._OrtReleaseTensor=e=>(a._OrtReleaseTensor=O.$)(e),a._OrtCreateRunOptions=(e,t,r,n)=>(a._OrtCreateRunOptions=O.aa)(e,t,r,n),a._OrtAddRunConfigEntry=(e,t,r)=>(a._OrtAddRunConfigEntry=O.ba)(e,t,r),a._OrtReleaseRunOptions=e=>(a._OrtReleaseRunOptions=O.ca)(e),a._OrtRun=(e,t,r,n,o,s,i,u)=>(a._OrtRun=O.da)(e,t,r,n,o,s,i,u),a._OrtEndProfiling=e=>(a._OrtEndProfiling=O.ea)(e);var le=a._malloc=e=>(le=a._malloc=O.fa)(e);a._free=e=>(a._free=O.ga)(e);var fe,de=e=>(de=O.ia)(e),pe=()=>(pe=O.ja)(),ge=e=>(ge=O.ka)(e),he=e=>(he=O.la)(e);function me(){function e(){if(!fe&&(fe=!0,a.calledRun=!0,!M)){if(N(k),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),a.postRun)for(\"function\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;){var e=a.postRun.shift();C.unshift(e)}N(C)}}if(!(0<I)){if(a.preRun)for(\"function\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)x();N(F),0<I||(a.setStatus?(a.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){a.setStatus(\"\")}),1),e()}),1)):e())}}if(a.stackAlloc=he,a.stackSave=pe,a.stackRestore=ge,a.UTF8ToString=J,a.stringToUTF8=(e,t,r)=>K(e,E,t,r),a.lengthBytesUTF8=X,L=function e(){fe||me(),fe||(L=e)},a.preInit)for(\"function\"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return me(),e.ready});e.exports=n},154:e=>{\"use strict\";e.exports=\\'\"use strict\";var e={},a=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;if(a){var r=require(\"worker_threads\"),t=r.parentPort;t.on(\"message\",(e=>onmessage({data:e})));var s=require(\"fs\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,\"utf8\")+\"//# sourceURL=\"+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(\" \");a?s.writeSync(2,e+\"\\\\\\\\n\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\"load\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\"loaded\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:\"callHandler\",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\"string\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\"run\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\"unwind\"!=e)throw e}}else\"cancel\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\"setimmediate\"===r.data.target||(\"checkMailbox\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d(\"worker.js received unknown command \"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n\\'},113:e=>{\"use strict\";e.exports=require(\"crypto\")},147:e=>{\"use strict\";e.exports=require(\"fs\")},37:e=>{\"use strict\";e.exports=require(\"os\")},17:e=>{\"use strict\";e.exports=require(\"path\")},74:e=>{\"use strict\";e.exports=require(\"perf_hooks\")},267:e=>{\"use strict\";e.exports=require(\"worker_threads\")}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(()=>{\"use strict\";const e=r(259),t=r(263);self.onmessage=r=>{switch(r.data.type){case\"init-wasm\":try{(0,t.initializeWebAssembly)(r.data.in).then((()=>postMessage({type:\"init-wasm\"})),(e=>postMessage({type:\"init-wasm\",err:e})))}catch(e){postMessage({type:\"init-wasm\",err:e})}break;case\"init-ort\":try{(0,e.initRuntime)(r.data.in).then((()=>postMessage({type:\"init-ort\"})),(e=>postMessage({type:\"init-ort\",err:e}))),postMessage({type:\"init-ort\"})}catch(e){postMessage({type:\"init-ort\",err:e})}break;case\"create_allocate\":try{const{model:t}=r.data.in,n=(0,e.createSessionAllocate)(t);postMessage({type:\"create_allocate\",out:n})}catch(e){postMessage({type:\"create_allocate\",err:e})}break;case\"create_finalize\":try{const{modeldata:t,options:n}=r.data.in,a=(0,e.createSessionFinalize)(t,n);postMessage({type:\"create_finalize\",out:a})}catch(e){postMessage({type:\"create_finalize\",err:e})}break;case\"create\":try{const{model:t,options:n}=r.data.in,a=(0,e.createSession)(t,n);postMessage({type:\"create\",out:a})}catch(e){postMessage({type:\"create\",err:e})}break;case\"release\":try{const t=r.data.in;(0,e.releaseSession)(t),postMessage({type:\"release\"})}catch(e){postMessage({type:\"release\",err:e})}break;case\"run\":try{const{sessionId:t,inputIndices:n,inputs:a,outputIndices:o,options:s}=r.data.in;(0,e.run)(t,n,a,o,s).then((t=>{postMessage({type:\"run\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\"run\",err:e})}))}catch(e){postMessage({type:\"run\",err:e})}break;case\"end-profiling\":try{const t=r.data.in;(0,e.endProfiling)(t),postMessage({type:\"end-profiling\"})}catch(e){postMessage({type:\"end-profiling\",err:e})}}}})()})();\\n', \"Worker\", void 0, void 0);\n            }\n        },\n        6614: (e1)=>{\n            \"use strict\";\n            e1.exports = function(e1, t1, n1, r1) {\n                var o1 = self || window;\n                try {\n                    try {\n                        var i1;\n                        try {\n                            i1 = new o1.Blob([\n                                e1\n                            ]);\n                        } catch (t1) {\n                            (i1 = new (o1.BlobBuilder || o1.WebKitBlobBuilder || o1.MozBlobBuilder || o1.MSBlobBuilder)).append(e1), i1 = i1.getBlob();\n                        }\n                        var s1 = o1.URL || o1.webkitURL, a1 = s1.createObjectURL(i1), u1 = new o1[t1](a1, n1);\n                        return s1.revokeObjectURL(a1), u1;\n                    } catch (r1) {\n                        return new o1[t1](\"data:application/javascript,\".concat(encodeURIComponent(e1)), n1);\n                    }\n                } catch (e1) {\n                    if (!r1) throw Error(\"Inline worker is not supported\");\n                    return new o1[t1](r1, n1);\n                }\n            };\n        },\n        2446: (e1, t1, n1)=>{\n            \"use strict\";\n            var r1, o1, i1, s1 = n1(2100), a1 = s1.Reader, u1 = s1.Writer, l1 = s1.util, c1 = s1.roots.default || (s1.roots.default = {});\n            c1.onnx = ((i1 = {}).Version = (r1 = {}, (o1 = Object.create(r1))[r1[0] = \"_START_VERSION\"] = 0, o1[r1[1] = \"IR_VERSION_2017_10_10\"] = 1, o1[r1[2] = \"IR_VERSION_2017_10_30\"] = 2, o1[r1[3] = \"IR_VERSION_2017_11_3\"] = 3, o1[r1[4] = \"IR_VERSION_2019_1_22\"] = 4, o1[r1[5] = \"IR_VERSION_2019_3_18\"] = 5, o1[r1[6] = \"IR_VERSION_2019_9_19\"] = 6, o1[r1[7] = \"IR_VERSION_2020_5_8\"] = 7, o1[r1[8] = \"IR_VERSION_2021_7_30\"] = 8, o1[r1[9] = \"IR_VERSION\"] = 9, o1), i1.AttributeProto = function() {\n                function e1(e1) {\n                    if (this.floats = [], this.ints = [], this.strings = [], this.tensors = [], this.graphs = [], this.sparseTensors = [], this.typeProtos = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.name = \"\", e1.prototype.refAttrName = \"\", e1.prototype.docString = \"\", e1.prototype.type = 0, e1.prototype.f = 0, e1.prototype.i = l1.Long ? l1.Long.fromBits(0, 0, !1) : 0, e1.prototype.s = l1.newBuffer([]), e1.prototype.t = null, e1.prototype.g = null, e1.prototype.sparseTensor = null, e1.prototype.tp = null, e1.prototype.floats = l1.emptyArray, e1.prototype.ints = l1.emptyArray, e1.prototype.strings = l1.emptyArray, e1.prototype.tensors = l1.emptyArray, e1.prototype.graphs = l1.emptyArray, e1.prototype.sparseTensors = l1.emptyArray, e1.prototype.typeProtos = l1.emptyArray, e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.name && Object.hasOwnProperty.call(e1, \"name\") && t1.uint32(10).string(e1.name), null != e1.f && Object.hasOwnProperty.call(e1, \"f\") && t1.uint32(21).float(e1.f), null != e1.i && Object.hasOwnProperty.call(e1, \"i\") && t1.uint32(24).int64(e1.i), null != e1.s && Object.hasOwnProperty.call(e1, \"s\") && t1.uint32(34).bytes(e1.s), null != e1.t && Object.hasOwnProperty.call(e1, \"t\") && c1.onnx.TensorProto.encode(e1.t, t1.uint32(42).fork()).ldelim(), null != e1.g && Object.hasOwnProperty.call(e1, \"g\") && c1.onnx.GraphProto.encode(e1.g, t1.uint32(50).fork()).ldelim(), null != e1.floats && e1.floats.length) {\n                        t1.uint32(58).fork();\n                        for(var n1 = 0; n1 < e1.floats.length; ++n1)t1.float(e1.floats[n1]);\n                        t1.ldelim();\n                    }\n                    if (null != e1.ints && e1.ints.length) {\n                        for(t1.uint32(66).fork(), n1 = 0; n1 < e1.ints.length; ++n1)t1.int64(e1.ints[n1]);\n                        t1.ldelim();\n                    }\n                    if (null != e1.strings && e1.strings.length) for(n1 = 0; n1 < e1.strings.length; ++n1)t1.uint32(74).bytes(e1.strings[n1]);\n                    if (null != e1.tensors && e1.tensors.length) for(n1 = 0; n1 < e1.tensors.length; ++n1)c1.onnx.TensorProto.encode(e1.tensors[n1], t1.uint32(82).fork()).ldelim();\n                    if (null != e1.graphs && e1.graphs.length) for(n1 = 0; n1 < e1.graphs.length; ++n1)c1.onnx.GraphProto.encode(e1.graphs[n1], t1.uint32(90).fork()).ldelim();\n                    if (null != e1.docString && Object.hasOwnProperty.call(e1, \"docString\") && t1.uint32(106).string(e1.docString), null != e1.tp && Object.hasOwnProperty.call(e1, \"tp\") && c1.onnx.TypeProto.encode(e1.tp, t1.uint32(114).fork()).ldelim(), null != e1.typeProtos && e1.typeProtos.length) for(n1 = 0; n1 < e1.typeProtos.length; ++n1)c1.onnx.TypeProto.encode(e1.typeProtos[n1], t1.uint32(122).fork()).ldelim();\n                    if (null != e1.type && Object.hasOwnProperty.call(e1, \"type\") && t1.uint32(160).int32(e1.type), null != e1.refAttrName && Object.hasOwnProperty.call(e1, \"refAttrName\") && t1.uint32(170).string(e1.refAttrName), null != e1.sparseTensor && Object.hasOwnProperty.call(e1, \"sparseTensor\") && c1.onnx.SparseTensorProto.encode(e1.sparseTensor, t1.uint32(178).fork()).ldelim(), null != e1.sparseTensors && e1.sparseTensors.length) for(n1 = 0; n1 < e1.sparseTensors.length; ++n1)c1.onnx.SparseTensorProto.encode(e1.sparseTensors[n1], t1.uint32(186).fork()).ldelim();\n                    return t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.AttributeProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.name = e1.string();\n                                break;\n                            case 21:\n                                r1.refAttrName = e1.string();\n                                break;\n                            case 13:\n                                r1.docString = e1.string();\n                                break;\n                            case 20:\n                                r1.type = e1.int32();\n                                break;\n                            case 2:\n                                r1.f = e1.float();\n                                break;\n                            case 3:\n                                r1.i = e1.int64();\n                                break;\n                            case 4:\n                                r1.s = e1.bytes();\n                                break;\n                            case 5:\n                                r1.t = c1.onnx.TensorProto.decode(e1, e1.uint32());\n                                break;\n                            case 6:\n                                r1.g = c1.onnx.GraphProto.decode(e1, e1.uint32());\n                                break;\n                            case 22:\n                                r1.sparseTensor = c1.onnx.SparseTensorProto.decode(e1, e1.uint32());\n                                break;\n                            case 14:\n                                r1.tp = c1.onnx.TypeProto.decode(e1, e1.uint32());\n                                break;\n                            case 7:\n                                if (r1.floats && r1.floats.length || (r1.floats = []), 2 == (7 & o1)) for(var i1 = e1.uint32() + e1.pos; e1.pos < i1;)r1.floats.push(e1.float());\n                                else r1.floats.push(e1.float());\n                                break;\n                            case 8:\n                                if (r1.ints && r1.ints.length || (r1.ints = []), 2 == (7 & o1)) for(i1 = e1.uint32() + e1.pos; e1.pos < i1;)r1.ints.push(e1.int64());\n                                else r1.ints.push(e1.int64());\n                                break;\n                            case 9:\n                                r1.strings && r1.strings.length || (r1.strings = []), r1.strings.push(e1.bytes());\n                                break;\n                            case 10:\n                                r1.tensors && r1.tensors.length || (r1.tensors = []), r1.tensors.push(c1.onnx.TensorProto.decode(e1, e1.uint32()));\n                                break;\n                            case 11:\n                                r1.graphs && r1.graphs.length || (r1.graphs = []), r1.graphs.push(c1.onnx.GraphProto.decode(e1, e1.uint32()));\n                                break;\n                            case 23:\n                                r1.sparseTensors && r1.sparseTensors.length || (r1.sparseTensors = []), r1.sparseTensors.push(c1.onnx.SparseTensorProto.decode(e1, e1.uint32()));\n                                break;\n                            case 15:\n                                r1.typeProtos && r1.typeProtos.length || (r1.typeProtos = []), r1.typeProtos.push(c1.onnx.TypeProto.decode(e1, e1.uint32()));\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && !l1.isString(e1.name)) return \"name: string expected\";\n                    if (null != e1.refAttrName && e1.hasOwnProperty(\"refAttrName\") && !l1.isString(e1.refAttrName)) return \"refAttrName: string expected\";\n                    if (null != e1.docString && e1.hasOwnProperty(\"docString\") && !l1.isString(e1.docString)) return \"docString: string expected\";\n                    if (null != e1.type && e1.hasOwnProperty(\"type\")) switch(e1.type){\n                        default:\n                            return \"type: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 11:\n                        case 13:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 12:\n                        case 14:\n                    }\n                    if (null != e1.f && e1.hasOwnProperty(\"f\") && \"number\" != typeof e1.f) return \"f: number expected\";\n                    if (null != e1.i && e1.hasOwnProperty(\"i\") && !(l1.isInteger(e1.i) || e1.i && l1.isInteger(e1.i.low) && l1.isInteger(e1.i.high))) return \"i: integer|Long expected\";\n                    if (null != e1.s && e1.hasOwnProperty(\"s\") && !(e1.s && \"number\" == typeof e1.s.length || l1.isString(e1.s))) return \"s: buffer expected\";\n                    if (null != e1.t && e1.hasOwnProperty(\"t\") && (n1 = c1.onnx.TensorProto.verify(e1.t))) return \"t.\" + n1;\n                    if (null != e1.g && e1.hasOwnProperty(\"g\") && (n1 = c1.onnx.GraphProto.verify(e1.g))) return \"g.\" + n1;\n                    if (null != e1.sparseTensor && e1.hasOwnProperty(\"sparseTensor\") && (n1 = c1.onnx.SparseTensorProto.verify(e1.sparseTensor))) return \"sparseTensor.\" + n1;\n                    if (null != e1.tp && e1.hasOwnProperty(\"tp\") && (n1 = c1.onnx.TypeProto.verify(e1.tp))) return \"tp.\" + n1;\n                    if (null != e1.floats && e1.hasOwnProperty(\"floats\")) {\n                        if (!Array.isArray(e1.floats)) return \"floats: array expected\";\n                        for(var t1 = 0; t1 < e1.floats.length; ++t1)if (\"number\" != typeof e1.floats[t1]) return \"floats: number[] expected\";\n                    }\n                    if (null != e1.ints && e1.hasOwnProperty(\"ints\")) {\n                        if (!Array.isArray(e1.ints)) return \"ints: array expected\";\n                        for(t1 = 0; t1 < e1.ints.length; ++t1)if (!(l1.isInteger(e1.ints[t1]) || e1.ints[t1] && l1.isInteger(e1.ints[t1].low) && l1.isInteger(e1.ints[t1].high))) return \"ints: integer|Long[] expected\";\n                    }\n                    if (null != e1.strings && e1.hasOwnProperty(\"strings\")) {\n                        if (!Array.isArray(e1.strings)) return \"strings: array expected\";\n                        for(t1 = 0; t1 < e1.strings.length; ++t1)if (!(e1.strings[t1] && \"number\" == typeof e1.strings[t1].length || l1.isString(e1.strings[t1]))) return \"strings: buffer[] expected\";\n                    }\n                    if (null != e1.tensors && e1.hasOwnProperty(\"tensors\")) {\n                        if (!Array.isArray(e1.tensors)) return \"tensors: array expected\";\n                        for(t1 = 0; t1 < e1.tensors.length; ++t1)if (n1 = c1.onnx.TensorProto.verify(e1.tensors[t1])) return \"tensors.\" + n1;\n                    }\n                    if (null != e1.graphs && e1.hasOwnProperty(\"graphs\")) {\n                        if (!Array.isArray(e1.graphs)) return \"graphs: array expected\";\n                        for(t1 = 0; t1 < e1.graphs.length; ++t1)if (n1 = c1.onnx.GraphProto.verify(e1.graphs[t1])) return \"graphs.\" + n1;\n                    }\n                    if (null != e1.sparseTensors && e1.hasOwnProperty(\"sparseTensors\")) {\n                        if (!Array.isArray(e1.sparseTensors)) return \"sparseTensors: array expected\";\n                        for(t1 = 0; t1 < e1.sparseTensors.length; ++t1)if (n1 = c1.onnx.SparseTensorProto.verify(e1.sparseTensors[t1])) return \"sparseTensors.\" + n1;\n                    }\n                    if (null != e1.typeProtos && e1.hasOwnProperty(\"typeProtos\")) {\n                        if (!Array.isArray(e1.typeProtos)) return \"typeProtos: array expected\";\n                        for(t1 = 0; t1 < e1.typeProtos.length; ++t1){\n                            var n1;\n                            if (n1 = c1.onnx.TypeProto.verify(e1.typeProtos[t1])) return \"typeProtos.\" + n1;\n                        }\n                    }\n                    return null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.AttributeProto) return e1;\n                    var t1 = new c1.onnx.AttributeProto;\n                    switch(null != e1.name && (t1.name = String(e1.name)), null != e1.refAttrName && (t1.refAttrName = String(e1.refAttrName)), null != e1.docString && (t1.docString = String(e1.docString)), e1.type){\n                        default:\n                            if (\"number\" == typeof e1.type) {\n                                t1.type = e1.type;\n                                break;\n                            }\n                            break;\n                        case \"UNDEFINED\":\n                        case 0:\n                            t1.type = 0;\n                            break;\n                        case \"FLOAT\":\n                        case 1:\n                            t1.type = 1;\n                            break;\n                        case \"INT\":\n                        case 2:\n                            t1.type = 2;\n                            break;\n                        case \"STRING\":\n                        case 3:\n                            t1.type = 3;\n                            break;\n                        case \"TENSOR\":\n                        case 4:\n                            t1.type = 4;\n                            break;\n                        case \"GRAPH\":\n                        case 5:\n                            t1.type = 5;\n                            break;\n                        case \"SPARSE_TENSOR\":\n                        case 11:\n                            t1.type = 11;\n                            break;\n                        case \"TYPE_PROTO\":\n                        case 13:\n                            t1.type = 13;\n                            break;\n                        case \"FLOATS\":\n                        case 6:\n                            t1.type = 6;\n                            break;\n                        case \"INTS\":\n                        case 7:\n                            t1.type = 7;\n                            break;\n                        case \"STRINGS\":\n                        case 8:\n                            t1.type = 8;\n                            break;\n                        case \"TENSORS\":\n                        case 9:\n                            t1.type = 9;\n                            break;\n                        case \"GRAPHS\":\n                        case 10:\n                            t1.type = 10;\n                            break;\n                        case \"SPARSE_TENSORS\":\n                        case 12:\n                            t1.type = 12;\n                            break;\n                        case \"TYPE_PROTOS\":\n                        case 14:\n                            t1.type = 14;\n                    }\n                    if (null != e1.f && (t1.f = Number(e1.f)), null != e1.i && (l1.Long ? (t1.i = l1.Long.fromValue(e1.i)).unsigned = !1 : \"string\" == typeof e1.i ? t1.i = parseInt(e1.i, 10) : \"number\" == typeof e1.i ? t1.i = e1.i : \"object\" == typeof e1.i && (t1.i = new l1.LongBits(e1.i.low >>> 0, e1.i.high >>> 0).toNumber())), null != e1.s && (\"string\" == typeof e1.s ? l1.base64.decode(e1.s, t1.s = l1.newBuffer(l1.base64.length(e1.s)), 0) : e1.s.length >= 0 && (t1.s = e1.s)), null != e1.t) {\n                        if (\"object\" != typeof e1.t) throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                        t1.t = c1.onnx.TensorProto.fromObject(e1.t);\n                    }\n                    if (null != e1.g) {\n                        if (\"object\" != typeof e1.g) throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                        t1.g = c1.onnx.GraphProto.fromObject(e1.g);\n                    }\n                    if (null != e1.sparseTensor) {\n                        if (\"object\" != typeof e1.sparseTensor) throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                        t1.sparseTensor = c1.onnx.SparseTensorProto.fromObject(e1.sparseTensor);\n                    }\n                    if (null != e1.tp) {\n                        if (\"object\" != typeof e1.tp) throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                        t1.tp = c1.onnx.TypeProto.fromObject(e1.tp);\n                    }\n                    if (e1.floats) {\n                        if (!Array.isArray(e1.floats)) throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                        t1.floats = [];\n                        for(var n1 = 0; n1 < e1.floats.length; ++n1)t1.floats[n1] = Number(e1.floats[n1]);\n                    }\n                    if (e1.ints) {\n                        if (!Array.isArray(e1.ints)) throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                        for(t1.ints = [], n1 = 0; n1 < e1.ints.length; ++n1)l1.Long ? (t1.ints[n1] = l1.Long.fromValue(e1.ints[n1])).unsigned = !1 : \"string\" == typeof e1.ints[n1] ? t1.ints[n1] = parseInt(e1.ints[n1], 10) : \"number\" == typeof e1.ints[n1] ? t1.ints[n1] = e1.ints[n1] : \"object\" == typeof e1.ints[n1] && (t1.ints[n1] = new l1.LongBits(e1.ints[n1].low >>> 0, e1.ints[n1].high >>> 0).toNumber());\n                    }\n                    if (e1.strings) {\n                        if (!Array.isArray(e1.strings)) throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                        for(t1.strings = [], n1 = 0; n1 < e1.strings.length; ++n1)\"string\" == typeof e1.strings[n1] ? l1.base64.decode(e1.strings[n1], t1.strings[n1] = l1.newBuffer(l1.base64.length(e1.strings[n1])), 0) : e1.strings[n1].length >= 0 && (t1.strings[n1] = e1.strings[n1]);\n                    }\n                    if (e1.tensors) {\n                        if (!Array.isArray(e1.tensors)) throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                        for(t1.tensors = [], n1 = 0; n1 < e1.tensors.length; ++n1){\n                            if (\"object\" != typeof e1.tensors[n1]) throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                            t1.tensors[n1] = c1.onnx.TensorProto.fromObject(e1.tensors[n1]);\n                        }\n                    }\n                    if (e1.graphs) {\n                        if (!Array.isArray(e1.graphs)) throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                        for(t1.graphs = [], n1 = 0; n1 < e1.graphs.length; ++n1){\n                            if (\"object\" != typeof e1.graphs[n1]) throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                            t1.graphs[n1] = c1.onnx.GraphProto.fromObject(e1.graphs[n1]);\n                        }\n                    }\n                    if (e1.sparseTensors) {\n                        if (!Array.isArray(e1.sparseTensors)) throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                        for(t1.sparseTensors = [], n1 = 0; n1 < e1.sparseTensors.length; ++n1){\n                            if (\"object\" != typeof e1.sparseTensors[n1]) throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                            t1.sparseTensors[n1] = c1.onnx.SparseTensorProto.fromObject(e1.sparseTensors[n1]);\n                        }\n                    }\n                    if (e1.typeProtos) {\n                        if (!Array.isArray(e1.typeProtos)) throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                        for(t1.typeProtos = [], n1 = 0; n1 < e1.typeProtos.length; ++n1){\n                            if (\"object\" != typeof e1.typeProtos[n1]) throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                            t1.typeProtos[n1] = c1.onnx.TypeProto.fromObject(e1.typeProtos[n1]);\n                        }\n                    }\n                    return t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.floats = [], n1.ints = [], n1.strings = [], n1.tensors = [], n1.graphs = [], n1.typeProtos = [], n1.sparseTensors = []), t1.defaults) {\n                        if (n1.name = \"\", n1.f = 0, l1.Long) {\n                            var r1 = new l1.Long(0, 0, !1);\n                            n1.i = t1.longs === String ? r1.toString() : t1.longs === Number ? r1.toNumber() : r1;\n                        } else n1.i = t1.longs === String ? \"0\" : 0;\n                        t1.bytes === String ? n1.s = \"\" : (n1.s = [], t1.bytes !== Array && (n1.s = l1.newBuffer(n1.s))), n1.t = null, n1.g = null, n1.docString = \"\", n1.tp = null, n1.type = t1.enums === String ? \"UNDEFINED\" : 0, n1.refAttrName = \"\", n1.sparseTensor = null;\n                    }\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && (n1.name = e1.name), null != e1.f && e1.hasOwnProperty(\"f\") && (n1.f = t1.json && !isFinite(e1.f) ? String(e1.f) : e1.f), null != e1.i && e1.hasOwnProperty(\"i\") && (\"number\" == typeof e1.i ? n1.i = t1.longs === String ? String(e1.i) : e1.i : n1.i = t1.longs === String ? l1.Long.prototype.toString.call(e1.i) : t1.longs === Number ? new l1.LongBits(e1.i.low >>> 0, e1.i.high >>> 0).toNumber() : e1.i), null != e1.s && e1.hasOwnProperty(\"s\") && (n1.s = t1.bytes === String ? l1.base64.encode(e1.s, 0, e1.s.length) : t1.bytes === Array ? Array.prototype.slice.call(e1.s) : e1.s), null != e1.t && e1.hasOwnProperty(\"t\") && (n1.t = c1.onnx.TensorProto.toObject(e1.t, t1)), null != e1.g && e1.hasOwnProperty(\"g\") && (n1.g = c1.onnx.GraphProto.toObject(e1.g, t1)), e1.floats && e1.floats.length) {\n                        n1.floats = [];\n                        for(var o1 = 0; o1 < e1.floats.length; ++o1)n1.floats[o1] = t1.json && !isFinite(e1.floats[o1]) ? String(e1.floats[o1]) : e1.floats[o1];\n                    }\n                    if (e1.ints && e1.ints.length) for(n1.ints = [], o1 = 0; o1 < e1.ints.length; ++o1)\"number\" == typeof e1.ints[o1] ? n1.ints[o1] = t1.longs === String ? String(e1.ints[o1]) : e1.ints[o1] : n1.ints[o1] = t1.longs === String ? l1.Long.prototype.toString.call(e1.ints[o1]) : t1.longs === Number ? new l1.LongBits(e1.ints[o1].low >>> 0, e1.ints[o1].high >>> 0).toNumber() : e1.ints[o1];\n                    if (e1.strings && e1.strings.length) for(n1.strings = [], o1 = 0; o1 < e1.strings.length; ++o1)n1.strings[o1] = t1.bytes === String ? l1.base64.encode(e1.strings[o1], 0, e1.strings[o1].length) : t1.bytes === Array ? Array.prototype.slice.call(e1.strings[o1]) : e1.strings[o1];\n                    if (e1.tensors && e1.tensors.length) for(n1.tensors = [], o1 = 0; o1 < e1.tensors.length; ++o1)n1.tensors[o1] = c1.onnx.TensorProto.toObject(e1.tensors[o1], t1);\n                    if (e1.graphs && e1.graphs.length) for(n1.graphs = [], o1 = 0; o1 < e1.graphs.length; ++o1)n1.graphs[o1] = c1.onnx.GraphProto.toObject(e1.graphs[o1], t1);\n                    if (null != e1.docString && e1.hasOwnProperty(\"docString\") && (n1.docString = e1.docString), null != e1.tp && e1.hasOwnProperty(\"tp\") && (n1.tp = c1.onnx.TypeProto.toObject(e1.tp, t1)), e1.typeProtos && e1.typeProtos.length) for(n1.typeProtos = [], o1 = 0; o1 < e1.typeProtos.length; ++o1)n1.typeProtos[o1] = c1.onnx.TypeProto.toObject(e1.typeProtos[o1], t1);\n                    if (null != e1.type && e1.hasOwnProperty(\"type\") && (n1.type = t1.enums === String ? void 0 === c1.onnx.AttributeProto.AttributeType[e1.type] ? e1.type : c1.onnx.AttributeProto.AttributeType[e1.type] : e1.type), null != e1.refAttrName && e1.hasOwnProperty(\"refAttrName\") && (n1.refAttrName = e1.refAttrName), null != e1.sparseTensor && e1.hasOwnProperty(\"sparseTensor\") && (n1.sparseTensor = c1.onnx.SparseTensorProto.toObject(e1.sparseTensor, t1)), e1.sparseTensors && e1.sparseTensors.length) for(n1.sparseTensors = [], o1 = 0; o1 < e1.sparseTensors.length; ++o1)n1.sparseTensors[o1] = c1.onnx.SparseTensorProto.toObject(e1.sparseTensors[o1], t1);\n                    return n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.AttributeProto\";\n                }, e1.AttributeType = function() {\n                    var e1 = {}, t1 = Object.create(e1);\n                    return t1[e1[0] = \"UNDEFINED\"] = 0, t1[e1[1] = \"FLOAT\"] = 1, t1[e1[2] = \"INT\"] = 2, t1[e1[3] = \"STRING\"] = 3, t1[e1[4] = \"TENSOR\"] = 4, t1[e1[5] = \"GRAPH\"] = 5, t1[e1[11] = \"SPARSE_TENSOR\"] = 11, t1[e1[13] = \"TYPE_PROTO\"] = 13, t1[e1[6] = \"FLOATS\"] = 6, t1[e1[7] = \"INTS\"] = 7, t1[e1[8] = \"STRINGS\"] = 8, t1[e1[9] = \"TENSORS\"] = 9, t1[e1[10] = \"GRAPHS\"] = 10, t1[e1[12] = \"SPARSE_TENSORS\"] = 12, t1[e1[14] = \"TYPE_PROTOS\"] = 14, t1;\n                }(), e1;\n            }(), i1.ValueInfoProto = function() {\n                function e1(e1) {\n                    if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.name = \"\", e1.prototype.type = null, e1.prototype.docString = \"\", e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    return t1 || (t1 = u1.create()), null != e1.name && Object.hasOwnProperty.call(e1, \"name\") && t1.uint32(10).string(e1.name), null != e1.type && Object.hasOwnProperty.call(e1, \"type\") && c1.onnx.TypeProto.encode(e1.type, t1.uint32(18).fork()).ldelim(), null != e1.docString && Object.hasOwnProperty.call(e1, \"docString\") && t1.uint32(26).string(e1.docString), t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.ValueInfoProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.name = e1.string();\n                                break;\n                            case 2:\n                                r1.type = c1.onnx.TypeProto.decode(e1, e1.uint32());\n                                break;\n                            case 3:\n                                r1.docString = e1.string();\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && !l1.isString(e1.name)) return \"name: string expected\";\n                    if (null != e1.type && e1.hasOwnProperty(\"type\")) {\n                        var t1 = c1.onnx.TypeProto.verify(e1.type);\n                        if (t1) return \"type.\" + t1;\n                    }\n                    return null != e1.docString && e1.hasOwnProperty(\"docString\") && !l1.isString(e1.docString) ? \"docString: string expected\" : null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.ValueInfoProto) return e1;\n                    var t1 = new c1.onnx.ValueInfoProto;\n                    if (null != e1.name && (t1.name = String(e1.name)), null != e1.type) {\n                        if (\"object\" != typeof e1.type) throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                        t1.type = c1.onnx.TypeProto.fromObject(e1.type);\n                    }\n                    return null != e1.docString && (t1.docString = String(e1.docString)), t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    return t1.defaults && (n1.name = \"\", n1.type = null, n1.docString = \"\"), null != e1.name && e1.hasOwnProperty(\"name\") && (n1.name = e1.name), null != e1.type && e1.hasOwnProperty(\"type\") && (n1.type = c1.onnx.TypeProto.toObject(e1.type, t1)), null != e1.docString && e1.hasOwnProperty(\"docString\") && (n1.docString = e1.docString), n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.ValueInfoProto\";\n                }, e1;\n            }(), i1.NodeProto = function() {\n                function e1(e1) {\n                    if (this.input = [], this.output = [], this.attribute = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.input = l1.emptyArray, e1.prototype.output = l1.emptyArray, e1.prototype.name = \"\", e1.prototype.opType = \"\", e1.prototype.domain = \"\", e1.prototype.attribute = l1.emptyArray, e1.prototype.docString = \"\", e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.input && e1.input.length) for(var n1 = 0; n1 < e1.input.length; ++n1)t1.uint32(10).string(e1.input[n1]);\n                    if (null != e1.output && e1.output.length) for(n1 = 0; n1 < e1.output.length; ++n1)t1.uint32(18).string(e1.output[n1]);\n                    if (null != e1.name && Object.hasOwnProperty.call(e1, \"name\") && t1.uint32(26).string(e1.name), null != e1.opType && Object.hasOwnProperty.call(e1, \"opType\") && t1.uint32(34).string(e1.opType), null != e1.attribute && e1.attribute.length) for(n1 = 0; n1 < e1.attribute.length; ++n1)c1.onnx.AttributeProto.encode(e1.attribute[n1], t1.uint32(42).fork()).ldelim();\n                    return null != e1.docString && Object.hasOwnProperty.call(e1, \"docString\") && t1.uint32(50).string(e1.docString), null != e1.domain && Object.hasOwnProperty.call(e1, \"domain\") && t1.uint32(58).string(e1.domain), t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.NodeProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.input && r1.input.length || (r1.input = []), r1.input.push(e1.string());\n                                break;\n                            case 2:\n                                r1.output && r1.output.length || (r1.output = []), r1.output.push(e1.string());\n                                break;\n                            case 3:\n                                r1.name = e1.string();\n                                break;\n                            case 4:\n                                r1.opType = e1.string();\n                                break;\n                            case 7:\n                                r1.domain = e1.string();\n                                break;\n                            case 5:\n                                r1.attribute && r1.attribute.length || (r1.attribute = []), r1.attribute.push(c1.onnx.AttributeProto.decode(e1, e1.uint32()));\n                                break;\n                            case 6:\n                                r1.docString = e1.string();\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.input && e1.hasOwnProperty(\"input\")) {\n                        if (!Array.isArray(e1.input)) return \"input: array expected\";\n                        for(var t1 = 0; t1 < e1.input.length; ++t1)if (!l1.isString(e1.input[t1])) return \"input: string[] expected\";\n                    }\n                    if (null != e1.output && e1.hasOwnProperty(\"output\")) {\n                        if (!Array.isArray(e1.output)) return \"output: array expected\";\n                        for(t1 = 0; t1 < e1.output.length; ++t1)if (!l1.isString(e1.output[t1])) return \"output: string[] expected\";\n                    }\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && !l1.isString(e1.name)) return \"name: string expected\";\n                    if (null != e1.opType && e1.hasOwnProperty(\"opType\") && !l1.isString(e1.opType)) return \"opType: string expected\";\n                    if (null != e1.domain && e1.hasOwnProperty(\"domain\") && !l1.isString(e1.domain)) return \"domain: string expected\";\n                    if (null != e1.attribute && e1.hasOwnProperty(\"attribute\")) {\n                        if (!Array.isArray(e1.attribute)) return \"attribute: array expected\";\n                        for(t1 = 0; t1 < e1.attribute.length; ++t1){\n                            var n1 = c1.onnx.AttributeProto.verify(e1.attribute[t1]);\n                            if (n1) return \"attribute.\" + n1;\n                        }\n                    }\n                    return null != e1.docString && e1.hasOwnProperty(\"docString\") && !l1.isString(e1.docString) ? \"docString: string expected\" : null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.NodeProto) return e1;\n                    var t1 = new c1.onnx.NodeProto;\n                    if (e1.input) {\n                        if (!Array.isArray(e1.input)) throw TypeError(\".onnx.NodeProto.input: array expected\");\n                        t1.input = [];\n                        for(var n1 = 0; n1 < e1.input.length; ++n1)t1.input[n1] = String(e1.input[n1]);\n                    }\n                    if (e1.output) {\n                        if (!Array.isArray(e1.output)) throw TypeError(\".onnx.NodeProto.output: array expected\");\n                        for(t1.output = [], n1 = 0; n1 < e1.output.length; ++n1)t1.output[n1] = String(e1.output[n1]);\n                    }\n                    if (null != e1.name && (t1.name = String(e1.name)), null != e1.opType && (t1.opType = String(e1.opType)), null != e1.domain && (t1.domain = String(e1.domain)), e1.attribute) {\n                        if (!Array.isArray(e1.attribute)) throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                        for(t1.attribute = [], n1 = 0; n1 < e1.attribute.length; ++n1){\n                            if (\"object\" != typeof e1.attribute[n1]) throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                            t1.attribute[n1] = c1.onnx.AttributeProto.fromObject(e1.attribute[n1]);\n                        }\n                    }\n                    return null != e1.docString && (t1.docString = String(e1.docString)), t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.input = [], n1.output = [], n1.attribute = []), t1.defaults && (n1.name = \"\", n1.opType = \"\", n1.docString = \"\", n1.domain = \"\"), e1.input && e1.input.length) {\n                        n1.input = [];\n                        for(var r1 = 0; r1 < e1.input.length; ++r1)n1.input[r1] = e1.input[r1];\n                    }\n                    if (e1.output && e1.output.length) for(n1.output = [], r1 = 0; r1 < e1.output.length; ++r1)n1.output[r1] = e1.output[r1];\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && (n1.name = e1.name), null != e1.opType && e1.hasOwnProperty(\"opType\") && (n1.opType = e1.opType), e1.attribute && e1.attribute.length) for(n1.attribute = [], r1 = 0; r1 < e1.attribute.length; ++r1)n1.attribute[r1] = c1.onnx.AttributeProto.toObject(e1.attribute[r1], t1);\n                    return null != e1.docString && e1.hasOwnProperty(\"docString\") && (n1.docString = e1.docString), null != e1.domain && e1.hasOwnProperty(\"domain\") && (n1.domain = e1.domain), n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.NodeProto\";\n                }, e1;\n            }(), i1.TrainingInfoProto = function() {\n                function e1(e1) {\n                    if (this.initializationBinding = [], this.updateBinding = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.initialization = null, e1.prototype.algorithm = null, e1.prototype.initializationBinding = l1.emptyArray, e1.prototype.updateBinding = l1.emptyArray, e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.initialization && Object.hasOwnProperty.call(e1, \"initialization\") && c1.onnx.GraphProto.encode(e1.initialization, t1.uint32(10).fork()).ldelim(), null != e1.algorithm && Object.hasOwnProperty.call(e1, \"algorithm\") && c1.onnx.GraphProto.encode(e1.algorithm, t1.uint32(18).fork()).ldelim(), null != e1.initializationBinding && e1.initializationBinding.length) for(var n1 = 0; n1 < e1.initializationBinding.length; ++n1)c1.onnx.StringStringEntryProto.encode(e1.initializationBinding[n1], t1.uint32(26).fork()).ldelim();\n                    if (null != e1.updateBinding && e1.updateBinding.length) for(n1 = 0; n1 < e1.updateBinding.length; ++n1)c1.onnx.StringStringEntryProto.encode(e1.updateBinding[n1], t1.uint32(34).fork()).ldelim();\n                    return t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TrainingInfoProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.initialization = c1.onnx.GraphProto.decode(e1, e1.uint32());\n                                break;\n                            case 2:\n                                r1.algorithm = c1.onnx.GraphProto.decode(e1, e1.uint32());\n                                break;\n                            case 3:\n                                r1.initializationBinding && r1.initializationBinding.length || (r1.initializationBinding = []), r1.initializationBinding.push(c1.onnx.StringStringEntryProto.decode(e1, e1.uint32()));\n                                break;\n                            case 4:\n                                r1.updateBinding && r1.updateBinding.length || (r1.updateBinding = []), r1.updateBinding.push(c1.onnx.StringStringEntryProto.decode(e1, e1.uint32()));\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.initialization && e1.hasOwnProperty(\"initialization\") && (n1 = c1.onnx.GraphProto.verify(e1.initialization))) return \"initialization.\" + n1;\n                    if (null != e1.algorithm && e1.hasOwnProperty(\"algorithm\") && (n1 = c1.onnx.GraphProto.verify(e1.algorithm))) return \"algorithm.\" + n1;\n                    if (null != e1.initializationBinding && e1.hasOwnProperty(\"initializationBinding\")) {\n                        if (!Array.isArray(e1.initializationBinding)) return \"initializationBinding: array expected\";\n                        for(var t1 = 0; t1 < e1.initializationBinding.length; ++t1)if (n1 = c1.onnx.StringStringEntryProto.verify(e1.initializationBinding[t1])) return \"initializationBinding.\" + n1;\n                    }\n                    if (null != e1.updateBinding && e1.hasOwnProperty(\"updateBinding\")) {\n                        if (!Array.isArray(e1.updateBinding)) return \"updateBinding: array expected\";\n                        for(t1 = 0; t1 < e1.updateBinding.length; ++t1){\n                            var n1;\n                            if (n1 = c1.onnx.StringStringEntryProto.verify(e1.updateBinding[t1])) return \"updateBinding.\" + n1;\n                        }\n                    }\n                    return null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.TrainingInfoProto) return e1;\n                    var t1 = new c1.onnx.TrainingInfoProto;\n                    if (null != e1.initialization) {\n                        if (\"object\" != typeof e1.initialization) throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                        t1.initialization = c1.onnx.GraphProto.fromObject(e1.initialization);\n                    }\n                    if (null != e1.algorithm) {\n                        if (\"object\" != typeof e1.algorithm) throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                        t1.algorithm = c1.onnx.GraphProto.fromObject(e1.algorithm);\n                    }\n                    if (e1.initializationBinding) {\n                        if (!Array.isArray(e1.initializationBinding)) throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                        t1.initializationBinding = [];\n                        for(var n1 = 0; n1 < e1.initializationBinding.length; ++n1){\n                            if (\"object\" != typeof e1.initializationBinding[n1]) throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                            t1.initializationBinding[n1] = c1.onnx.StringStringEntryProto.fromObject(e1.initializationBinding[n1]);\n                        }\n                    }\n                    if (e1.updateBinding) {\n                        if (!Array.isArray(e1.updateBinding)) throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                        for(t1.updateBinding = [], n1 = 0; n1 < e1.updateBinding.length; ++n1){\n                            if (\"object\" != typeof e1.updateBinding[n1]) throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                            t1.updateBinding[n1] = c1.onnx.StringStringEntryProto.fromObject(e1.updateBinding[n1]);\n                        }\n                    }\n                    return t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.initializationBinding = [], n1.updateBinding = []), t1.defaults && (n1.initialization = null, n1.algorithm = null), null != e1.initialization && e1.hasOwnProperty(\"initialization\") && (n1.initialization = c1.onnx.GraphProto.toObject(e1.initialization, t1)), null != e1.algorithm && e1.hasOwnProperty(\"algorithm\") && (n1.algorithm = c1.onnx.GraphProto.toObject(e1.algorithm, t1)), e1.initializationBinding && e1.initializationBinding.length) {\n                        n1.initializationBinding = [];\n                        for(var r1 = 0; r1 < e1.initializationBinding.length; ++r1)n1.initializationBinding[r1] = c1.onnx.StringStringEntryProto.toObject(e1.initializationBinding[r1], t1);\n                    }\n                    if (e1.updateBinding && e1.updateBinding.length) for(n1.updateBinding = [], r1 = 0; r1 < e1.updateBinding.length; ++r1)n1.updateBinding[r1] = c1.onnx.StringStringEntryProto.toObject(e1.updateBinding[r1], t1);\n                    return n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TrainingInfoProto\";\n                }, e1;\n            }(), i1.ModelProto = function() {\n                function e1(e1) {\n                    if (this.opsetImport = [], this.metadataProps = [], this.trainingInfo = [], this.functions = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.irVersion = l1.Long ? l1.Long.fromBits(0, 0, !1) : 0, e1.prototype.opsetImport = l1.emptyArray, e1.prototype.producerName = \"\", e1.prototype.producerVersion = \"\", e1.prototype.domain = \"\", e1.prototype.modelVersion = l1.Long ? l1.Long.fromBits(0, 0, !1) : 0, e1.prototype.docString = \"\", e1.prototype.graph = null, e1.prototype.metadataProps = l1.emptyArray, e1.prototype.trainingInfo = l1.emptyArray, e1.prototype.functions = l1.emptyArray, e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.irVersion && Object.hasOwnProperty.call(e1, \"irVersion\") && t1.uint32(8).int64(e1.irVersion), null != e1.producerName && Object.hasOwnProperty.call(e1, \"producerName\") && t1.uint32(18).string(e1.producerName), null != e1.producerVersion && Object.hasOwnProperty.call(e1, \"producerVersion\") && t1.uint32(26).string(e1.producerVersion), null != e1.domain && Object.hasOwnProperty.call(e1, \"domain\") && t1.uint32(34).string(e1.domain), null != e1.modelVersion && Object.hasOwnProperty.call(e1, \"modelVersion\") && t1.uint32(40).int64(e1.modelVersion), null != e1.docString && Object.hasOwnProperty.call(e1, \"docString\") && t1.uint32(50).string(e1.docString), null != e1.graph && Object.hasOwnProperty.call(e1, \"graph\") && c1.onnx.GraphProto.encode(e1.graph, t1.uint32(58).fork()).ldelim(), null != e1.opsetImport && e1.opsetImport.length) for(var n1 = 0; n1 < e1.opsetImport.length; ++n1)c1.onnx.OperatorSetIdProto.encode(e1.opsetImport[n1], t1.uint32(66).fork()).ldelim();\n                    if (null != e1.metadataProps && e1.metadataProps.length) for(n1 = 0; n1 < e1.metadataProps.length; ++n1)c1.onnx.StringStringEntryProto.encode(e1.metadataProps[n1], t1.uint32(114).fork()).ldelim();\n                    if (null != e1.trainingInfo && e1.trainingInfo.length) for(n1 = 0; n1 < e1.trainingInfo.length; ++n1)c1.onnx.TrainingInfoProto.encode(e1.trainingInfo[n1], t1.uint32(162).fork()).ldelim();\n                    if (null != e1.functions && e1.functions.length) for(n1 = 0; n1 < e1.functions.length; ++n1)c1.onnx.FunctionProto.encode(e1.functions[n1], t1.uint32(202).fork()).ldelim();\n                    return t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.ModelProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.irVersion = e1.int64();\n                                break;\n                            case 8:\n                                r1.opsetImport && r1.opsetImport.length || (r1.opsetImport = []), r1.opsetImport.push(c1.onnx.OperatorSetIdProto.decode(e1, e1.uint32()));\n                                break;\n                            case 2:\n                                r1.producerName = e1.string();\n                                break;\n                            case 3:\n                                r1.producerVersion = e1.string();\n                                break;\n                            case 4:\n                                r1.domain = e1.string();\n                                break;\n                            case 5:\n                                r1.modelVersion = e1.int64();\n                                break;\n                            case 6:\n                                r1.docString = e1.string();\n                                break;\n                            case 7:\n                                r1.graph = c1.onnx.GraphProto.decode(e1, e1.uint32());\n                                break;\n                            case 14:\n                                r1.metadataProps && r1.metadataProps.length || (r1.metadataProps = []), r1.metadataProps.push(c1.onnx.StringStringEntryProto.decode(e1, e1.uint32()));\n                                break;\n                            case 20:\n                                r1.trainingInfo && r1.trainingInfo.length || (r1.trainingInfo = []), r1.trainingInfo.push(c1.onnx.TrainingInfoProto.decode(e1, e1.uint32()));\n                                break;\n                            case 25:\n                                r1.functions && r1.functions.length || (r1.functions = []), r1.functions.push(c1.onnx.FunctionProto.decode(e1, e1.uint32()));\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.irVersion && e1.hasOwnProperty(\"irVersion\") && !(l1.isInteger(e1.irVersion) || e1.irVersion && l1.isInteger(e1.irVersion.low) && l1.isInteger(e1.irVersion.high))) return \"irVersion: integer|Long expected\";\n                    if (null != e1.opsetImport && e1.hasOwnProperty(\"opsetImport\")) {\n                        if (!Array.isArray(e1.opsetImport)) return \"opsetImport: array expected\";\n                        for(var t1 = 0; t1 < e1.opsetImport.length; ++t1)if (n1 = c1.onnx.OperatorSetIdProto.verify(e1.opsetImport[t1])) return \"opsetImport.\" + n1;\n                    }\n                    if (null != e1.producerName && e1.hasOwnProperty(\"producerName\") && !l1.isString(e1.producerName)) return \"producerName: string expected\";\n                    if (null != e1.producerVersion && e1.hasOwnProperty(\"producerVersion\") && !l1.isString(e1.producerVersion)) return \"producerVersion: string expected\";\n                    if (null != e1.domain && e1.hasOwnProperty(\"domain\") && !l1.isString(e1.domain)) return \"domain: string expected\";\n                    if (null != e1.modelVersion && e1.hasOwnProperty(\"modelVersion\") && !(l1.isInteger(e1.modelVersion) || e1.modelVersion && l1.isInteger(e1.modelVersion.low) && l1.isInteger(e1.modelVersion.high))) return \"modelVersion: integer|Long expected\";\n                    if (null != e1.docString && e1.hasOwnProperty(\"docString\") && !l1.isString(e1.docString)) return \"docString: string expected\";\n                    if (null != e1.graph && e1.hasOwnProperty(\"graph\") && (n1 = c1.onnx.GraphProto.verify(e1.graph))) return \"graph.\" + n1;\n                    if (null != e1.metadataProps && e1.hasOwnProperty(\"metadataProps\")) {\n                        if (!Array.isArray(e1.metadataProps)) return \"metadataProps: array expected\";\n                        for(t1 = 0; t1 < e1.metadataProps.length; ++t1)if (n1 = c1.onnx.StringStringEntryProto.verify(e1.metadataProps[t1])) return \"metadataProps.\" + n1;\n                    }\n                    if (null != e1.trainingInfo && e1.hasOwnProperty(\"trainingInfo\")) {\n                        if (!Array.isArray(e1.trainingInfo)) return \"trainingInfo: array expected\";\n                        for(t1 = 0; t1 < e1.trainingInfo.length; ++t1)if (n1 = c1.onnx.TrainingInfoProto.verify(e1.trainingInfo[t1])) return \"trainingInfo.\" + n1;\n                    }\n                    if (null != e1.functions && e1.hasOwnProperty(\"functions\")) {\n                        if (!Array.isArray(e1.functions)) return \"functions: array expected\";\n                        for(t1 = 0; t1 < e1.functions.length; ++t1){\n                            var n1;\n                            if (n1 = c1.onnx.FunctionProto.verify(e1.functions[t1])) return \"functions.\" + n1;\n                        }\n                    }\n                    return null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.ModelProto) return e1;\n                    var t1 = new c1.onnx.ModelProto;\n                    if (null != e1.irVersion && (l1.Long ? (t1.irVersion = l1.Long.fromValue(e1.irVersion)).unsigned = !1 : \"string\" == typeof e1.irVersion ? t1.irVersion = parseInt(e1.irVersion, 10) : \"number\" == typeof e1.irVersion ? t1.irVersion = e1.irVersion : \"object\" == typeof e1.irVersion && (t1.irVersion = new l1.LongBits(e1.irVersion.low >>> 0, e1.irVersion.high >>> 0).toNumber())), e1.opsetImport) {\n                        if (!Array.isArray(e1.opsetImport)) throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                        t1.opsetImport = [];\n                        for(var n1 = 0; n1 < e1.opsetImport.length; ++n1){\n                            if (\"object\" != typeof e1.opsetImport[n1]) throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                            t1.opsetImport[n1] = c1.onnx.OperatorSetIdProto.fromObject(e1.opsetImport[n1]);\n                        }\n                    }\n                    if (null != e1.producerName && (t1.producerName = String(e1.producerName)), null != e1.producerVersion && (t1.producerVersion = String(e1.producerVersion)), null != e1.domain && (t1.domain = String(e1.domain)), null != e1.modelVersion && (l1.Long ? (t1.modelVersion = l1.Long.fromValue(e1.modelVersion)).unsigned = !1 : \"string\" == typeof e1.modelVersion ? t1.modelVersion = parseInt(e1.modelVersion, 10) : \"number\" == typeof e1.modelVersion ? t1.modelVersion = e1.modelVersion : \"object\" == typeof e1.modelVersion && (t1.modelVersion = new l1.LongBits(e1.modelVersion.low >>> 0, e1.modelVersion.high >>> 0).toNumber())), null != e1.docString && (t1.docString = String(e1.docString)), null != e1.graph) {\n                        if (\"object\" != typeof e1.graph) throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                        t1.graph = c1.onnx.GraphProto.fromObject(e1.graph);\n                    }\n                    if (e1.metadataProps) {\n                        if (!Array.isArray(e1.metadataProps)) throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                        for(t1.metadataProps = [], n1 = 0; n1 < e1.metadataProps.length; ++n1){\n                            if (\"object\" != typeof e1.metadataProps[n1]) throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                            t1.metadataProps[n1] = c1.onnx.StringStringEntryProto.fromObject(e1.metadataProps[n1]);\n                        }\n                    }\n                    if (e1.trainingInfo) {\n                        if (!Array.isArray(e1.trainingInfo)) throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                        for(t1.trainingInfo = [], n1 = 0; n1 < e1.trainingInfo.length; ++n1){\n                            if (\"object\" != typeof e1.trainingInfo[n1]) throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                            t1.trainingInfo[n1] = c1.onnx.TrainingInfoProto.fromObject(e1.trainingInfo[n1]);\n                        }\n                    }\n                    if (e1.functions) {\n                        if (!Array.isArray(e1.functions)) throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                        for(t1.functions = [], n1 = 0; n1 < e1.functions.length; ++n1){\n                            if (\"object\" != typeof e1.functions[n1]) throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                            t1.functions[n1] = c1.onnx.FunctionProto.fromObject(e1.functions[n1]);\n                        }\n                    }\n                    return t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.opsetImport = [], n1.metadataProps = [], n1.trainingInfo = [], n1.functions = []), t1.defaults) {\n                        if (l1.Long) {\n                            var r1 = new l1.Long(0, 0, !1);\n                            n1.irVersion = t1.longs === String ? r1.toString() : t1.longs === Number ? r1.toNumber() : r1;\n                        } else n1.irVersion = t1.longs === String ? \"0\" : 0;\n                        n1.producerName = \"\", n1.producerVersion = \"\", n1.domain = \"\", l1.Long ? (r1 = new l1.Long(0, 0, !1), n1.modelVersion = t1.longs === String ? r1.toString() : t1.longs === Number ? r1.toNumber() : r1) : n1.modelVersion = t1.longs === String ? \"0\" : 0, n1.docString = \"\", n1.graph = null;\n                    }\n                    if (null != e1.irVersion && e1.hasOwnProperty(\"irVersion\") && (\"number\" == typeof e1.irVersion ? n1.irVersion = t1.longs === String ? String(e1.irVersion) : e1.irVersion : n1.irVersion = t1.longs === String ? l1.Long.prototype.toString.call(e1.irVersion) : t1.longs === Number ? new l1.LongBits(e1.irVersion.low >>> 0, e1.irVersion.high >>> 0).toNumber() : e1.irVersion), null != e1.producerName && e1.hasOwnProperty(\"producerName\") && (n1.producerName = e1.producerName), null != e1.producerVersion && e1.hasOwnProperty(\"producerVersion\") && (n1.producerVersion = e1.producerVersion), null != e1.domain && e1.hasOwnProperty(\"domain\") && (n1.domain = e1.domain), null != e1.modelVersion && e1.hasOwnProperty(\"modelVersion\") && (\"number\" == typeof e1.modelVersion ? n1.modelVersion = t1.longs === String ? String(e1.modelVersion) : e1.modelVersion : n1.modelVersion = t1.longs === String ? l1.Long.prototype.toString.call(e1.modelVersion) : t1.longs === Number ? new l1.LongBits(e1.modelVersion.low >>> 0, e1.modelVersion.high >>> 0).toNumber() : e1.modelVersion), null != e1.docString && e1.hasOwnProperty(\"docString\") && (n1.docString = e1.docString), null != e1.graph && e1.hasOwnProperty(\"graph\") && (n1.graph = c1.onnx.GraphProto.toObject(e1.graph, t1)), e1.opsetImport && e1.opsetImport.length) {\n                        n1.opsetImport = [];\n                        for(var o1 = 0; o1 < e1.opsetImport.length; ++o1)n1.opsetImport[o1] = c1.onnx.OperatorSetIdProto.toObject(e1.opsetImport[o1], t1);\n                    }\n                    if (e1.metadataProps && e1.metadataProps.length) for(n1.metadataProps = [], o1 = 0; o1 < e1.metadataProps.length; ++o1)n1.metadataProps[o1] = c1.onnx.StringStringEntryProto.toObject(e1.metadataProps[o1], t1);\n                    if (e1.trainingInfo && e1.trainingInfo.length) for(n1.trainingInfo = [], o1 = 0; o1 < e1.trainingInfo.length; ++o1)n1.trainingInfo[o1] = c1.onnx.TrainingInfoProto.toObject(e1.trainingInfo[o1], t1);\n                    if (e1.functions && e1.functions.length) for(n1.functions = [], o1 = 0; o1 < e1.functions.length; ++o1)n1.functions[o1] = c1.onnx.FunctionProto.toObject(e1.functions[o1], t1);\n                    return n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.ModelProto\";\n                }, e1;\n            }(), i1.StringStringEntryProto = function() {\n                function e1(e1) {\n                    if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.key = \"\", e1.prototype.value = \"\", e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    return t1 || (t1 = u1.create()), null != e1.key && Object.hasOwnProperty.call(e1, \"key\") && t1.uint32(10).string(e1.key), null != e1.value && Object.hasOwnProperty.call(e1, \"value\") && t1.uint32(18).string(e1.value), t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.StringStringEntryProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.key = e1.string();\n                                break;\n                            case 2:\n                                r1.value = e1.string();\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    return \"object\" != typeof e1 || null === e1 ? \"object expected\" : null != e1.key && e1.hasOwnProperty(\"key\") && !l1.isString(e1.key) ? \"key: string expected\" : null != e1.value && e1.hasOwnProperty(\"value\") && !l1.isString(e1.value) ? \"value: string expected\" : null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.StringStringEntryProto) return e1;\n                    var t1 = new c1.onnx.StringStringEntryProto;\n                    return null != e1.key && (t1.key = String(e1.key)), null != e1.value && (t1.value = String(e1.value)), t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    return t1.defaults && (n1.key = \"\", n1.value = \"\"), null != e1.key && e1.hasOwnProperty(\"key\") && (n1.key = e1.key), null != e1.value && e1.hasOwnProperty(\"value\") && (n1.value = e1.value), n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.StringStringEntryProto\";\n                }, e1;\n            }(), i1.TensorAnnotation = function() {\n                function e1(e1) {\n                    if (this.quantParameterTensorNames = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.tensorName = \"\", e1.prototype.quantParameterTensorNames = l1.emptyArray, e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.tensorName && Object.hasOwnProperty.call(e1, \"tensorName\") && t1.uint32(10).string(e1.tensorName), null != e1.quantParameterTensorNames && e1.quantParameterTensorNames.length) for(var n1 = 0; n1 < e1.quantParameterTensorNames.length; ++n1)c1.onnx.StringStringEntryProto.encode(e1.quantParameterTensorNames[n1], t1.uint32(18).fork()).ldelim();\n                    return t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TensorAnnotation; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.tensorName = e1.string();\n                                break;\n                            case 2:\n                                r1.quantParameterTensorNames && r1.quantParameterTensorNames.length || (r1.quantParameterTensorNames = []), r1.quantParameterTensorNames.push(c1.onnx.StringStringEntryProto.decode(e1, e1.uint32()));\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.tensorName && e1.hasOwnProperty(\"tensorName\") && !l1.isString(e1.tensorName)) return \"tensorName: string expected\";\n                    if (null != e1.quantParameterTensorNames && e1.hasOwnProperty(\"quantParameterTensorNames\")) {\n                        if (!Array.isArray(e1.quantParameterTensorNames)) return \"quantParameterTensorNames: array expected\";\n                        for(var t1 = 0; t1 < e1.quantParameterTensorNames.length; ++t1){\n                            var n1 = c1.onnx.StringStringEntryProto.verify(e1.quantParameterTensorNames[t1]);\n                            if (n1) return \"quantParameterTensorNames.\" + n1;\n                        }\n                    }\n                    return null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.TensorAnnotation) return e1;\n                    var t1 = new c1.onnx.TensorAnnotation;\n                    if (null != e1.tensorName && (t1.tensorName = String(e1.tensorName)), e1.quantParameterTensorNames) {\n                        if (!Array.isArray(e1.quantParameterTensorNames)) throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                        t1.quantParameterTensorNames = [];\n                        for(var n1 = 0; n1 < e1.quantParameterTensorNames.length; ++n1){\n                            if (\"object\" != typeof e1.quantParameterTensorNames[n1]) throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                            t1.quantParameterTensorNames[n1] = c1.onnx.StringStringEntryProto.fromObject(e1.quantParameterTensorNames[n1]);\n                        }\n                    }\n                    return t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.quantParameterTensorNames = []), t1.defaults && (n1.tensorName = \"\"), null != e1.tensorName && e1.hasOwnProperty(\"tensorName\") && (n1.tensorName = e1.tensorName), e1.quantParameterTensorNames && e1.quantParameterTensorNames.length) {\n                        n1.quantParameterTensorNames = [];\n                        for(var r1 = 0; r1 < e1.quantParameterTensorNames.length; ++r1)n1.quantParameterTensorNames[r1] = c1.onnx.StringStringEntryProto.toObject(e1.quantParameterTensorNames[r1], t1);\n                    }\n                    return n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TensorAnnotation\";\n                }, e1;\n            }(), i1.GraphProto = function() {\n                function e1(e1) {\n                    if (this.node = [], this.initializer = [], this.sparseInitializer = [], this.input = [], this.output = [], this.valueInfo = [], this.quantizationAnnotation = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.node = l1.emptyArray, e1.prototype.name = \"\", e1.prototype.initializer = l1.emptyArray, e1.prototype.sparseInitializer = l1.emptyArray, e1.prototype.docString = \"\", e1.prototype.input = l1.emptyArray, e1.prototype.output = l1.emptyArray, e1.prototype.valueInfo = l1.emptyArray, e1.prototype.quantizationAnnotation = l1.emptyArray, e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.node && e1.node.length) for(var n1 = 0; n1 < e1.node.length; ++n1)c1.onnx.NodeProto.encode(e1.node[n1], t1.uint32(10).fork()).ldelim();\n                    if (null != e1.name && Object.hasOwnProperty.call(e1, \"name\") && t1.uint32(18).string(e1.name), null != e1.initializer && e1.initializer.length) for(n1 = 0; n1 < e1.initializer.length; ++n1)c1.onnx.TensorProto.encode(e1.initializer[n1], t1.uint32(42).fork()).ldelim();\n                    if (null != e1.docString && Object.hasOwnProperty.call(e1, \"docString\") && t1.uint32(82).string(e1.docString), null != e1.input && e1.input.length) for(n1 = 0; n1 < e1.input.length; ++n1)c1.onnx.ValueInfoProto.encode(e1.input[n1], t1.uint32(90).fork()).ldelim();\n                    if (null != e1.output && e1.output.length) for(n1 = 0; n1 < e1.output.length; ++n1)c1.onnx.ValueInfoProto.encode(e1.output[n1], t1.uint32(98).fork()).ldelim();\n                    if (null != e1.valueInfo && e1.valueInfo.length) for(n1 = 0; n1 < e1.valueInfo.length; ++n1)c1.onnx.ValueInfoProto.encode(e1.valueInfo[n1], t1.uint32(106).fork()).ldelim();\n                    if (null != e1.quantizationAnnotation && e1.quantizationAnnotation.length) for(n1 = 0; n1 < e1.quantizationAnnotation.length; ++n1)c1.onnx.TensorAnnotation.encode(e1.quantizationAnnotation[n1], t1.uint32(114).fork()).ldelim();\n                    if (null != e1.sparseInitializer && e1.sparseInitializer.length) for(n1 = 0; n1 < e1.sparseInitializer.length; ++n1)c1.onnx.SparseTensorProto.encode(e1.sparseInitializer[n1], t1.uint32(122).fork()).ldelim();\n                    return t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.GraphProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.node && r1.node.length || (r1.node = []), r1.node.push(c1.onnx.NodeProto.decode(e1, e1.uint32()));\n                                break;\n                            case 2:\n                                r1.name = e1.string();\n                                break;\n                            case 5:\n                                r1.initializer && r1.initializer.length || (r1.initializer = []), r1.initializer.push(c1.onnx.TensorProto.decode(e1, e1.uint32()));\n                                break;\n                            case 15:\n                                r1.sparseInitializer && r1.sparseInitializer.length || (r1.sparseInitializer = []), r1.sparseInitializer.push(c1.onnx.SparseTensorProto.decode(e1, e1.uint32()));\n                                break;\n                            case 10:\n                                r1.docString = e1.string();\n                                break;\n                            case 11:\n                                r1.input && r1.input.length || (r1.input = []), r1.input.push(c1.onnx.ValueInfoProto.decode(e1, e1.uint32()));\n                                break;\n                            case 12:\n                                r1.output && r1.output.length || (r1.output = []), r1.output.push(c1.onnx.ValueInfoProto.decode(e1, e1.uint32()));\n                                break;\n                            case 13:\n                                r1.valueInfo && r1.valueInfo.length || (r1.valueInfo = []), r1.valueInfo.push(c1.onnx.ValueInfoProto.decode(e1, e1.uint32()));\n                                break;\n                            case 14:\n                                r1.quantizationAnnotation && r1.quantizationAnnotation.length || (r1.quantizationAnnotation = []), r1.quantizationAnnotation.push(c1.onnx.TensorAnnotation.decode(e1, e1.uint32()));\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.node && e1.hasOwnProperty(\"node\")) {\n                        if (!Array.isArray(e1.node)) return \"node: array expected\";\n                        for(var t1 = 0; t1 < e1.node.length; ++t1)if (n1 = c1.onnx.NodeProto.verify(e1.node[t1])) return \"node.\" + n1;\n                    }\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && !l1.isString(e1.name)) return \"name: string expected\";\n                    if (null != e1.initializer && e1.hasOwnProperty(\"initializer\")) {\n                        if (!Array.isArray(e1.initializer)) return \"initializer: array expected\";\n                        for(t1 = 0; t1 < e1.initializer.length; ++t1)if (n1 = c1.onnx.TensorProto.verify(e1.initializer[t1])) return \"initializer.\" + n1;\n                    }\n                    if (null != e1.sparseInitializer && e1.hasOwnProperty(\"sparseInitializer\")) {\n                        if (!Array.isArray(e1.sparseInitializer)) return \"sparseInitializer: array expected\";\n                        for(t1 = 0; t1 < e1.sparseInitializer.length; ++t1)if (n1 = c1.onnx.SparseTensorProto.verify(e1.sparseInitializer[t1])) return \"sparseInitializer.\" + n1;\n                    }\n                    if (null != e1.docString && e1.hasOwnProperty(\"docString\") && !l1.isString(e1.docString)) return \"docString: string expected\";\n                    if (null != e1.input && e1.hasOwnProperty(\"input\")) {\n                        if (!Array.isArray(e1.input)) return \"input: array expected\";\n                        for(t1 = 0; t1 < e1.input.length; ++t1)if (n1 = c1.onnx.ValueInfoProto.verify(e1.input[t1])) return \"input.\" + n1;\n                    }\n                    if (null != e1.output && e1.hasOwnProperty(\"output\")) {\n                        if (!Array.isArray(e1.output)) return \"output: array expected\";\n                        for(t1 = 0; t1 < e1.output.length; ++t1)if (n1 = c1.onnx.ValueInfoProto.verify(e1.output[t1])) return \"output.\" + n1;\n                    }\n                    if (null != e1.valueInfo && e1.hasOwnProperty(\"valueInfo\")) {\n                        if (!Array.isArray(e1.valueInfo)) return \"valueInfo: array expected\";\n                        for(t1 = 0; t1 < e1.valueInfo.length; ++t1)if (n1 = c1.onnx.ValueInfoProto.verify(e1.valueInfo[t1])) return \"valueInfo.\" + n1;\n                    }\n                    if (null != e1.quantizationAnnotation && e1.hasOwnProperty(\"quantizationAnnotation\")) {\n                        if (!Array.isArray(e1.quantizationAnnotation)) return \"quantizationAnnotation: array expected\";\n                        for(t1 = 0; t1 < e1.quantizationAnnotation.length; ++t1){\n                            var n1;\n                            if (n1 = c1.onnx.TensorAnnotation.verify(e1.quantizationAnnotation[t1])) return \"quantizationAnnotation.\" + n1;\n                        }\n                    }\n                    return null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.GraphProto) return e1;\n                    var t1 = new c1.onnx.GraphProto;\n                    if (e1.node) {\n                        if (!Array.isArray(e1.node)) throw TypeError(\".onnx.GraphProto.node: array expected\");\n                        t1.node = [];\n                        for(var n1 = 0; n1 < e1.node.length; ++n1){\n                            if (\"object\" != typeof e1.node[n1]) throw TypeError(\".onnx.GraphProto.node: object expected\");\n                            t1.node[n1] = c1.onnx.NodeProto.fromObject(e1.node[n1]);\n                        }\n                    }\n                    if (null != e1.name && (t1.name = String(e1.name)), e1.initializer) {\n                        if (!Array.isArray(e1.initializer)) throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                        for(t1.initializer = [], n1 = 0; n1 < e1.initializer.length; ++n1){\n                            if (\"object\" != typeof e1.initializer[n1]) throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                            t1.initializer[n1] = c1.onnx.TensorProto.fromObject(e1.initializer[n1]);\n                        }\n                    }\n                    if (e1.sparseInitializer) {\n                        if (!Array.isArray(e1.sparseInitializer)) throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                        for(t1.sparseInitializer = [], n1 = 0; n1 < e1.sparseInitializer.length; ++n1){\n                            if (\"object\" != typeof e1.sparseInitializer[n1]) throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                            t1.sparseInitializer[n1] = c1.onnx.SparseTensorProto.fromObject(e1.sparseInitializer[n1]);\n                        }\n                    }\n                    if (null != e1.docString && (t1.docString = String(e1.docString)), e1.input) {\n                        if (!Array.isArray(e1.input)) throw TypeError(\".onnx.GraphProto.input: array expected\");\n                        for(t1.input = [], n1 = 0; n1 < e1.input.length; ++n1){\n                            if (\"object\" != typeof e1.input[n1]) throw TypeError(\".onnx.GraphProto.input: object expected\");\n                            t1.input[n1] = c1.onnx.ValueInfoProto.fromObject(e1.input[n1]);\n                        }\n                    }\n                    if (e1.output) {\n                        if (!Array.isArray(e1.output)) throw TypeError(\".onnx.GraphProto.output: array expected\");\n                        for(t1.output = [], n1 = 0; n1 < e1.output.length; ++n1){\n                            if (\"object\" != typeof e1.output[n1]) throw TypeError(\".onnx.GraphProto.output: object expected\");\n                            t1.output[n1] = c1.onnx.ValueInfoProto.fromObject(e1.output[n1]);\n                        }\n                    }\n                    if (e1.valueInfo) {\n                        if (!Array.isArray(e1.valueInfo)) throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                        for(t1.valueInfo = [], n1 = 0; n1 < e1.valueInfo.length; ++n1){\n                            if (\"object\" != typeof e1.valueInfo[n1]) throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                            t1.valueInfo[n1] = c1.onnx.ValueInfoProto.fromObject(e1.valueInfo[n1]);\n                        }\n                    }\n                    if (e1.quantizationAnnotation) {\n                        if (!Array.isArray(e1.quantizationAnnotation)) throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                        for(t1.quantizationAnnotation = [], n1 = 0; n1 < e1.quantizationAnnotation.length; ++n1){\n                            if (\"object\" != typeof e1.quantizationAnnotation[n1]) throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                            t1.quantizationAnnotation[n1] = c1.onnx.TensorAnnotation.fromObject(e1.quantizationAnnotation[n1]);\n                        }\n                    }\n                    return t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.node = [], n1.initializer = [], n1.input = [], n1.output = [], n1.valueInfo = [], n1.quantizationAnnotation = [], n1.sparseInitializer = []), t1.defaults && (n1.name = \"\", n1.docString = \"\"), e1.node && e1.node.length) {\n                        n1.node = [];\n                        for(var r1 = 0; r1 < e1.node.length; ++r1)n1.node[r1] = c1.onnx.NodeProto.toObject(e1.node[r1], t1);\n                    }\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && (n1.name = e1.name), e1.initializer && e1.initializer.length) for(n1.initializer = [], r1 = 0; r1 < e1.initializer.length; ++r1)n1.initializer[r1] = c1.onnx.TensorProto.toObject(e1.initializer[r1], t1);\n                    if (null != e1.docString && e1.hasOwnProperty(\"docString\") && (n1.docString = e1.docString), e1.input && e1.input.length) for(n1.input = [], r1 = 0; r1 < e1.input.length; ++r1)n1.input[r1] = c1.onnx.ValueInfoProto.toObject(e1.input[r1], t1);\n                    if (e1.output && e1.output.length) for(n1.output = [], r1 = 0; r1 < e1.output.length; ++r1)n1.output[r1] = c1.onnx.ValueInfoProto.toObject(e1.output[r1], t1);\n                    if (e1.valueInfo && e1.valueInfo.length) for(n1.valueInfo = [], r1 = 0; r1 < e1.valueInfo.length; ++r1)n1.valueInfo[r1] = c1.onnx.ValueInfoProto.toObject(e1.valueInfo[r1], t1);\n                    if (e1.quantizationAnnotation && e1.quantizationAnnotation.length) for(n1.quantizationAnnotation = [], r1 = 0; r1 < e1.quantizationAnnotation.length; ++r1)n1.quantizationAnnotation[r1] = c1.onnx.TensorAnnotation.toObject(e1.quantizationAnnotation[r1], t1);\n                    if (e1.sparseInitializer && e1.sparseInitializer.length) for(n1.sparseInitializer = [], r1 = 0; r1 < e1.sparseInitializer.length; ++r1)n1.sparseInitializer[r1] = c1.onnx.SparseTensorProto.toObject(e1.sparseInitializer[r1], t1);\n                    return n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.GraphProto\";\n                }, e1;\n            }(), i1.TensorProto = function() {\n                function e1(e1) {\n                    if (this.dims = [], this.floatData = [], this.int32Data = [], this.stringData = [], this.int64Data = [], this.externalData = [], this.doubleData = [], this.uint64Data = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.dims = l1.emptyArray, e1.prototype.dataType = 0, e1.prototype.segment = null, e1.prototype.floatData = l1.emptyArray, e1.prototype.int32Data = l1.emptyArray, e1.prototype.stringData = l1.emptyArray, e1.prototype.int64Data = l1.emptyArray, e1.prototype.name = \"\", e1.prototype.docString = \"\", e1.prototype.rawData = l1.newBuffer([]), e1.prototype.externalData = l1.emptyArray, e1.prototype.dataLocation = 0, e1.prototype.doubleData = l1.emptyArray, e1.prototype.uint64Data = l1.emptyArray, e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.dims && e1.dims.length) {\n                        t1.uint32(10).fork();\n                        for(var n1 = 0; n1 < e1.dims.length; ++n1)t1.int64(e1.dims[n1]);\n                        t1.ldelim();\n                    }\n                    if (null != e1.dataType && Object.hasOwnProperty.call(e1, \"dataType\") && t1.uint32(16).int32(e1.dataType), null != e1.segment && Object.hasOwnProperty.call(e1, \"segment\") && c1.onnx.TensorProto.Segment.encode(e1.segment, t1.uint32(26).fork()).ldelim(), null != e1.floatData && e1.floatData.length) {\n                        for(t1.uint32(34).fork(), n1 = 0; n1 < e1.floatData.length; ++n1)t1.float(e1.floatData[n1]);\n                        t1.ldelim();\n                    }\n                    if (null != e1.int32Data && e1.int32Data.length) {\n                        for(t1.uint32(42).fork(), n1 = 0; n1 < e1.int32Data.length; ++n1)t1.int32(e1.int32Data[n1]);\n                        t1.ldelim();\n                    }\n                    if (null != e1.stringData && e1.stringData.length) for(n1 = 0; n1 < e1.stringData.length; ++n1)t1.uint32(50).bytes(e1.stringData[n1]);\n                    if (null != e1.int64Data && e1.int64Data.length) {\n                        for(t1.uint32(58).fork(), n1 = 0; n1 < e1.int64Data.length; ++n1)t1.int64(e1.int64Data[n1]);\n                        t1.ldelim();\n                    }\n                    if (null != e1.name && Object.hasOwnProperty.call(e1, \"name\") && t1.uint32(66).string(e1.name), null != e1.rawData && Object.hasOwnProperty.call(e1, \"rawData\") && t1.uint32(74).bytes(e1.rawData), null != e1.doubleData && e1.doubleData.length) {\n                        for(t1.uint32(82).fork(), n1 = 0; n1 < e1.doubleData.length; ++n1)t1.double(e1.doubleData[n1]);\n                        t1.ldelim();\n                    }\n                    if (null != e1.uint64Data && e1.uint64Data.length) {\n                        for(t1.uint32(90).fork(), n1 = 0; n1 < e1.uint64Data.length; ++n1)t1.uint64(e1.uint64Data[n1]);\n                        t1.ldelim();\n                    }\n                    if (null != e1.docString && Object.hasOwnProperty.call(e1, \"docString\") && t1.uint32(98).string(e1.docString), null != e1.externalData && e1.externalData.length) for(n1 = 0; n1 < e1.externalData.length; ++n1)c1.onnx.StringStringEntryProto.encode(e1.externalData[n1], t1.uint32(106).fork()).ldelim();\n                    return null != e1.dataLocation && Object.hasOwnProperty.call(e1, \"dataLocation\") && t1.uint32(112).int32(e1.dataLocation), t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TensorProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                if (r1.dims && r1.dims.length || (r1.dims = []), 2 == (7 & o1)) for(var i1 = e1.uint32() + e1.pos; e1.pos < i1;)r1.dims.push(e1.int64());\n                                else r1.dims.push(e1.int64());\n                                break;\n                            case 2:\n                                r1.dataType = e1.int32();\n                                break;\n                            case 3:\n                                r1.segment = c1.onnx.TensorProto.Segment.decode(e1, e1.uint32());\n                                break;\n                            case 4:\n                                if (r1.floatData && r1.floatData.length || (r1.floatData = []), 2 == (7 & o1)) for(i1 = e1.uint32() + e1.pos; e1.pos < i1;)r1.floatData.push(e1.float());\n                                else r1.floatData.push(e1.float());\n                                break;\n                            case 5:\n                                if (r1.int32Data && r1.int32Data.length || (r1.int32Data = []), 2 == (7 & o1)) for(i1 = e1.uint32() + e1.pos; e1.pos < i1;)r1.int32Data.push(e1.int32());\n                                else r1.int32Data.push(e1.int32());\n                                break;\n                            case 6:\n                                r1.stringData && r1.stringData.length || (r1.stringData = []), r1.stringData.push(e1.bytes());\n                                break;\n                            case 7:\n                                if (r1.int64Data && r1.int64Data.length || (r1.int64Data = []), 2 == (7 & o1)) for(i1 = e1.uint32() + e1.pos; e1.pos < i1;)r1.int64Data.push(e1.int64());\n                                else r1.int64Data.push(e1.int64());\n                                break;\n                            case 8:\n                                r1.name = e1.string();\n                                break;\n                            case 12:\n                                r1.docString = e1.string();\n                                break;\n                            case 9:\n                                r1.rawData = e1.bytes();\n                                break;\n                            case 13:\n                                r1.externalData && r1.externalData.length || (r1.externalData = []), r1.externalData.push(c1.onnx.StringStringEntryProto.decode(e1, e1.uint32()));\n                                break;\n                            case 14:\n                                r1.dataLocation = e1.int32();\n                                break;\n                            case 10:\n                                if (r1.doubleData && r1.doubleData.length || (r1.doubleData = []), 2 == (7 & o1)) for(i1 = e1.uint32() + e1.pos; e1.pos < i1;)r1.doubleData.push(e1.double());\n                                else r1.doubleData.push(e1.double());\n                                break;\n                            case 11:\n                                if (r1.uint64Data && r1.uint64Data.length || (r1.uint64Data = []), 2 == (7 & o1)) for(i1 = e1.uint32() + e1.pos; e1.pos < i1;)r1.uint64Data.push(e1.uint64());\n                                else r1.uint64Data.push(e1.uint64());\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.dims && e1.hasOwnProperty(\"dims\")) {\n                        if (!Array.isArray(e1.dims)) return \"dims: array expected\";\n                        for(var t1 = 0; t1 < e1.dims.length; ++t1)if (!(l1.isInteger(e1.dims[t1]) || e1.dims[t1] && l1.isInteger(e1.dims[t1].low) && l1.isInteger(e1.dims[t1].high))) return \"dims: integer|Long[] expected\";\n                    }\n                    if (null != e1.dataType && e1.hasOwnProperty(\"dataType\") && !l1.isInteger(e1.dataType)) return \"dataType: integer expected\";\n                    if (null != e1.segment && e1.hasOwnProperty(\"segment\") && (n1 = c1.onnx.TensorProto.Segment.verify(e1.segment))) return \"segment.\" + n1;\n                    if (null != e1.floatData && e1.hasOwnProperty(\"floatData\")) {\n                        if (!Array.isArray(e1.floatData)) return \"floatData: array expected\";\n                        for(t1 = 0; t1 < e1.floatData.length; ++t1)if (\"number\" != typeof e1.floatData[t1]) return \"floatData: number[] expected\";\n                    }\n                    if (null != e1.int32Data && e1.hasOwnProperty(\"int32Data\")) {\n                        if (!Array.isArray(e1.int32Data)) return \"int32Data: array expected\";\n                        for(t1 = 0; t1 < e1.int32Data.length; ++t1)if (!l1.isInteger(e1.int32Data[t1])) return \"int32Data: integer[] expected\";\n                    }\n                    if (null != e1.stringData && e1.hasOwnProperty(\"stringData\")) {\n                        if (!Array.isArray(e1.stringData)) return \"stringData: array expected\";\n                        for(t1 = 0; t1 < e1.stringData.length; ++t1)if (!(e1.stringData[t1] && \"number\" == typeof e1.stringData[t1].length || l1.isString(e1.stringData[t1]))) return \"stringData: buffer[] expected\";\n                    }\n                    if (null != e1.int64Data && e1.hasOwnProperty(\"int64Data\")) {\n                        if (!Array.isArray(e1.int64Data)) return \"int64Data: array expected\";\n                        for(t1 = 0; t1 < e1.int64Data.length; ++t1)if (!(l1.isInteger(e1.int64Data[t1]) || e1.int64Data[t1] && l1.isInteger(e1.int64Data[t1].low) && l1.isInteger(e1.int64Data[t1].high))) return \"int64Data: integer|Long[] expected\";\n                    }\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && !l1.isString(e1.name)) return \"name: string expected\";\n                    if (null != e1.docString && e1.hasOwnProperty(\"docString\") && !l1.isString(e1.docString)) return \"docString: string expected\";\n                    if (null != e1.rawData && e1.hasOwnProperty(\"rawData\") && !(e1.rawData && \"number\" == typeof e1.rawData.length || l1.isString(e1.rawData))) return \"rawData: buffer expected\";\n                    if (null != e1.externalData && e1.hasOwnProperty(\"externalData\")) {\n                        if (!Array.isArray(e1.externalData)) return \"externalData: array expected\";\n                        for(t1 = 0; t1 < e1.externalData.length; ++t1){\n                            var n1;\n                            if (n1 = c1.onnx.StringStringEntryProto.verify(e1.externalData[t1])) return \"externalData.\" + n1;\n                        }\n                    }\n                    if (null != e1.dataLocation && e1.hasOwnProperty(\"dataLocation\")) switch(e1.dataLocation){\n                        default:\n                            return \"dataLocation: enum value expected\";\n                        case 0:\n                        case 1:\n                    }\n                    if (null != e1.doubleData && e1.hasOwnProperty(\"doubleData\")) {\n                        if (!Array.isArray(e1.doubleData)) return \"doubleData: array expected\";\n                        for(t1 = 0; t1 < e1.doubleData.length; ++t1)if (\"number\" != typeof e1.doubleData[t1]) return \"doubleData: number[] expected\";\n                    }\n                    if (null != e1.uint64Data && e1.hasOwnProperty(\"uint64Data\")) {\n                        if (!Array.isArray(e1.uint64Data)) return \"uint64Data: array expected\";\n                        for(t1 = 0; t1 < e1.uint64Data.length; ++t1)if (!(l1.isInteger(e1.uint64Data[t1]) || e1.uint64Data[t1] && l1.isInteger(e1.uint64Data[t1].low) && l1.isInteger(e1.uint64Data[t1].high))) return \"uint64Data: integer|Long[] expected\";\n                    }\n                    return null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.TensorProto) return e1;\n                    var t1 = new c1.onnx.TensorProto;\n                    if (e1.dims) {\n                        if (!Array.isArray(e1.dims)) throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                        t1.dims = [];\n                        for(var n1 = 0; n1 < e1.dims.length; ++n1)l1.Long ? (t1.dims[n1] = l1.Long.fromValue(e1.dims[n1])).unsigned = !1 : \"string\" == typeof e1.dims[n1] ? t1.dims[n1] = parseInt(e1.dims[n1], 10) : \"number\" == typeof e1.dims[n1] ? t1.dims[n1] = e1.dims[n1] : \"object\" == typeof e1.dims[n1] && (t1.dims[n1] = new l1.LongBits(e1.dims[n1].low >>> 0, e1.dims[n1].high >>> 0).toNumber());\n                    }\n                    if (null != e1.dataType && (t1.dataType = 0 | e1.dataType), null != e1.segment) {\n                        if (\"object\" != typeof e1.segment) throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                        t1.segment = c1.onnx.TensorProto.Segment.fromObject(e1.segment);\n                    }\n                    if (e1.floatData) {\n                        if (!Array.isArray(e1.floatData)) throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                        for(t1.floatData = [], n1 = 0; n1 < e1.floatData.length; ++n1)t1.floatData[n1] = Number(e1.floatData[n1]);\n                    }\n                    if (e1.int32Data) {\n                        if (!Array.isArray(e1.int32Data)) throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                        for(t1.int32Data = [], n1 = 0; n1 < e1.int32Data.length; ++n1)t1.int32Data[n1] = 0 | e1.int32Data[n1];\n                    }\n                    if (e1.stringData) {\n                        if (!Array.isArray(e1.stringData)) throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                        for(t1.stringData = [], n1 = 0; n1 < e1.stringData.length; ++n1)\"string\" == typeof e1.stringData[n1] ? l1.base64.decode(e1.stringData[n1], t1.stringData[n1] = l1.newBuffer(l1.base64.length(e1.stringData[n1])), 0) : e1.stringData[n1].length >= 0 && (t1.stringData[n1] = e1.stringData[n1]);\n                    }\n                    if (e1.int64Data) {\n                        if (!Array.isArray(e1.int64Data)) throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                        for(t1.int64Data = [], n1 = 0; n1 < e1.int64Data.length; ++n1)l1.Long ? (t1.int64Data[n1] = l1.Long.fromValue(e1.int64Data[n1])).unsigned = !1 : \"string\" == typeof e1.int64Data[n1] ? t1.int64Data[n1] = parseInt(e1.int64Data[n1], 10) : \"number\" == typeof e1.int64Data[n1] ? t1.int64Data[n1] = e1.int64Data[n1] : \"object\" == typeof e1.int64Data[n1] && (t1.int64Data[n1] = new l1.LongBits(e1.int64Data[n1].low >>> 0, e1.int64Data[n1].high >>> 0).toNumber());\n                    }\n                    if (null != e1.name && (t1.name = String(e1.name)), null != e1.docString && (t1.docString = String(e1.docString)), null != e1.rawData && (\"string\" == typeof e1.rawData ? l1.base64.decode(e1.rawData, t1.rawData = l1.newBuffer(l1.base64.length(e1.rawData)), 0) : e1.rawData.length >= 0 && (t1.rawData = e1.rawData)), e1.externalData) {\n                        if (!Array.isArray(e1.externalData)) throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                        for(t1.externalData = [], n1 = 0; n1 < e1.externalData.length; ++n1){\n                            if (\"object\" != typeof e1.externalData[n1]) throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                            t1.externalData[n1] = c1.onnx.StringStringEntryProto.fromObject(e1.externalData[n1]);\n                        }\n                    }\n                    switch(e1.dataLocation){\n                        default:\n                            if (\"number\" == typeof e1.dataLocation) {\n                                t1.dataLocation = e1.dataLocation;\n                                break;\n                            }\n                            break;\n                        case \"DEFAULT\":\n                        case 0:\n                            t1.dataLocation = 0;\n                            break;\n                        case \"EXTERNAL\":\n                        case 1:\n                            t1.dataLocation = 1;\n                    }\n                    if (e1.doubleData) {\n                        if (!Array.isArray(e1.doubleData)) throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                        for(t1.doubleData = [], n1 = 0; n1 < e1.doubleData.length; ++n1)t1.doubleData[n1] = Number(e1.doubleData[n1]);\n                    }\n                    if (e1.uint64Data) {\n                        if (!Array.isArray(e1.uint64Data)) throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                        for(t1.uint64Data = [], n1 = 0; n1 < e1.uint64Data.length; ++n1)l1.Long ? (t1.uint64Data[n1] = l1.Long.fromValue(e1.uint64Data[n1])).unsigned = !0 : \"string\" == typeof e1.uint64Data[n1] ? t1.uint64Data[n1] = parseInt(e1.uint64Data[n1], 10) : \"number\" == typeof e1.uint64Data[n1] ? t1.uint64Data[n1] = e1.uint64Data[n1] : \"object\" == typeof e1.uint64Data[n1] && (t1.uint64Data[n1] = new l1.LongBits(e1.uint64Data[n1].low >>> 0, e1.uint64Data[n1].high >>> 0).toNumber(!0));\n                    }\n                    return t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.dims = [], n1.floatData = [], n1.int32Data = [], n1.stringData = [], n1.int64Data = [], n1.doubleData = [], n1.uint64Data = [], n1.externalData = []), t1.defaults && (n1.dataType = 0, n1.segment = null, n1.name = \"\", t1.bytes === String ? n1.rawData = \"\" : (n1.rawData = [], t1.bytes !== Array && (n1.rawData = l1.newBuffer(n1.rawData))), n1.docString = \"\", n1.dataLocation = t1.enums === String ? \"DEFAULT\" : 0), e1.dims && e1.dims.length) {\n                        n1.dims = [];\n                        for(var r1 = 0; r1 < e1.dims.length; ++r1)\"number\" == typeof e1.dims[r1] ? n1.dims[r1] = t1.longs === String ? String(e1.dims[r1]) : e1.dims[r1] : n1.dims[r1] = t1.longs === String ? l1.Long.prototype.toString.call(e1.dims[r1]) : t1.longs === Number ? new l1.LongBits(e1.dims[r1].low >>> 0, e1.dims[r1].high >>> 0).toNumber() : e1.dims[r1];\n                    }\n                    if (null != e1.dataType && e1.hasOwnProperty(\"dataType\") && (n1.dataType = e1.dataType), null != e1.segment && e1.hasOwnProperty(\"segment\") && (n1.segment = c1.onnx.TensorProto.Segment.toObject(e1.segment, t1)), e1.floatData && e1.floatData.length) for(n1.floatData = [], r1 = 0; r1 < e1.floatData.length; ++r1)n1.floatData[r1] = t1.json && !isFinite(e1.floatData[r1]) ? String(e1.floatData[r1]) : e1.floatData[r1];\n                    if (e1.int32Data && e1.int32Data.length) for(n1.int32Data = [], r1 = 0; r1 < e1.int32Data.length; ++r1)n1.int32Data[r1] = e1.int32Data[r1];\n                    if (e1.stringData && e1.stringData.length) for(n1.stringData = [], r1 = 0; r1 < e1.stringData.length; ++r1)n1.stringData[r1] = t1.bytes === String ? l1.base64.encode(e1.stringData[r1], 0, e1.stringData[r1].length) : t1.bytes === Array ? Array.prototype.slice.call(e1.stringData[r1]) : e1.stringData[r1];\n                    if (e1.int64Data && e1.int64Data.length) for(n1.int64Data = [], r1 = 0; r1 < e1.int64Data.length; ++r1)\"number\" == typeof e1.int64Data[r1] ? n1.int64Data[r1] = t1.longs === String ? String(e1.int64Data[r1]) : e1.int64Data[r1] : n1.int64Data[r1] = t1.longs === String ? l1.Long.prototype.toString.call(e1.int64Data[r1]) : t1.longs === Number ? new l1.LongBits(e1.int64Data[r1].low >>> 0, e1.int64Data[r1].high >>> 0).toNumber() : e1.int64Data[r1];\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && (n1.name = e1.name), null != e1.rawData && e1.hasOwnProperty(\"rawData\") && (n1.rawData = t1.bytes === String ? l1.base64.encode(e1.rawData, 0, e1.rawData.length) : t1.bytes === Array ? Array.prototype.slice.call(e1.rawData) : e1.rawData), e1.doubleData && e1.doubleData.length) for(n1.doubleData = [], r1 = 0; r1 < e1.doubleData.length; ++r1)n1.doubleData[r1] = t1.json && !isFinite(e1.doubleData[r1]) ? String(e1.doubleData[r1]) : e1.doubleData[r1];\n                    if (e1.uint64Data && e1.uint64Data.length) for(n1.uint64Data = [], r1 = 0; r1 < e1.uint64Data.length; ++r1)\"number\" == typeof e1.uint64Data[r1] ? n1.uint64Data[r1] = t1.longs === String ? String(e1.uint64Data[r1]) : e1.uint64Data[r1] : n1.uint64Data[r1] = t1.longs === String ? l1.Long.prototype.toString.call(e1.uint64Data[r1]) : t1.longs === Number ? new l1.LongBits(e1.uint64Data[r1].low >>> 0, e1.uint64Data[r1].high >>> 0).toNumber(!0) : e1.uint64Data[r1];\n                    if (null != e1.docString && e1.hasOwnProperty(\"docString\") && (n1.docString = e1.docString), e1.externalData && e1.externalData.length) for(n1.externalData = [], r1 = 0; r1 < e1.externalData.length; ++r1)n1.externalData[r1] = c1.onnx.StringStringEntryProto.toObject(e1.externalData[r1], t1);\n                    return null != e1.dataLocation && e1.hasOwnProperty(\"dataLocation\") && (n1.dataLocation = t1.enums === String ? void 0 === c1.onnx.TensorProto.DataLocation[e1.dataLocation] ? e1.dataLocation : c1.onnx.TensorProto.DataLocation[e1.dataLocation] : e1.dataLocation), n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TensorProto\";\n                }, e1.DataType = function() {\n                    var e1 = {}, t1 = Object.create(e1);\n                    return t1[e1[0] = \"UNDEFINED\"] = 0, t1[e1[1] = \"FLOAT\"] = 1, t1[e1[2] = \"UINT8\"] = 2, t1[e1[3] = \"INT8\"] = 3, t1[e1[4] = \"UINT16\"] = 4, t1[e1[5] = \"INT16\"] = 5, t1[e1[6] = \"INT32\"] = 6, t1[e1[7] = \"INT64\"] = 7, t1[e1[8] = \"STRING\"] = 8, t1[e1[9] = \"BOOL\"] = 9, t1[e1[10] = \"FLOAT16\"] = 10, t1[e1[11] = \"DOUBLE\"] = 11, t1[e1[12] = \"UINT32\"] = 12, t1[e1[13] = \"UINT64\"] = 13, t1[e1[14] = \"COMPLEX64\"] = 14, t1[e1[15] = \"COMPLEX128\"] = 15, t1[e1[16] = \"BFLOAT16\"] = 16, t1[e1[17] = \"FLOAT8E4M3FN\"] = 17, t1[e1[18] = \"FLOAT8E4M3FNUZ\"] = 18, t1[e1[19] = \"FLOAT8E5M2\"] = 19, t1[e1[20] = \"FLOAT8E5M2FNUZ\"] = 20, t1;\n                }(), e1.Segment = function() {\n                    function e1(e1) {\n                        if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                    }\n                    return e1.prototype.begin = l1.Long ? l1.Long.fromBits(0, 0, !1) : 0, e1.prototype.end = l1.Long ? l1.Long.fromBits(0, 0, !1) : 0, e1.create = function(t1) {\n                        return new e1(t1);\n                    }, e1.encode = function(e1, t1) {\n                        return t1 || (t1 = u1.create()), null != e1.begin && Object.hasOwnProperty.call(e1, \"begin\") && t1.uint32(8).int64(e1.begin), null != e1.end && Object.hasOwnProperty.call(e1, \"end\") && t1.uint32(16).int64(e1.end), t1;\n                    }, e1.encodeDelimited = function(e1, t1) {\n                        return this.encode(e1, t1).ldelim();\n                    }, e1.decode = function(e1, t1) {\n                        e1 instanceof a1 || (e1 = a1.create(e1));\n                        for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TensorProto.Segment; e1.pos < n1;){\n                            var o1 = e1.uint32();\n                            switch(o1 >>> 3){\n                                case 1:\n                                    r1.begin = e1.int64();\n                                    break;\n                                case 2:\n                                    r1.end = e1.int64();\n                                    break;\n                                default:\n                                    e1.skipType(7 & o1);\n                            }\n                        }\n                        return r1;\n                    }, e1.decodeDelimited = function(e1) {\n                        return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                    }, e1.verify = function(e1) {\n                        return \"object\" != typeof e1 || null === e1 ? \"object expected\" : null != e1.begin && e1.hasOwnProperty(\"begin\") && !(l1.isInteger(e1.begin) || e1.begin && l1.isInteger(e1.begin.low) && l1.isInteger(e1.begin.high)) ? \"begin: integer|Long expected\" : null != e1.end && e1.hasOwnProperty(\"end\") && !(l1.isInteger(e1.end) || e1.end && l1.isInteger(e1.end.low) && l1.isInteger(e1.end.high)) ? \"end: integer|Long expected\" : null;\n                    }, e1.fromObject = function(e1) {\n                        if (e1 instanceof c1.onnx.TensorProto.Segment) return e1;\n                        var t1 = new c1.onnx.TensorProto.Segment;\n                        return null != e1.begin && (l1.Long ? (t1.begin = l1.Long.fromValue(e1.begin)).unsigned = !1 : \"string\" == typeof e1.begin ? t1.begin = parseInt(e1.begin, 10) : \"number\" == typeof e1.begin ? t1.begin = e1.begin : \"object\" == typeof e1.begin && (t1.begin = new l1.LongBits(e1.begin.low >>> 0, e1.begin.high >>> 0).toNumber())), null != e1.end && (l1.Long ? (t1.end = l1.Long.fromValue(e1.end)).unsigned = !1 : \"string\" == typeof e1.end ? t1.end = parseInt(e1.end, 10) : \"number\" == typeof e1.end ? t1.end = e1.end : \"object\" == typeof e1.end && (t1.end = new l1.LongBits(e1.end.low >>> 0, e1.end.high >>> 0).toNumber())), t1;\n                    }, e1.toObject = function(e1, t1) {\n                        t1 || (t1 = {});\n                        var n1 = {};\n                        if (t1.defaults) {\n                            if (l1.Long) {\n                                var r1 = new l1.Long(0, 0, !1);\n                                n1.begin = t1.longs === String ? r1.toString() : t1.longs === Number ? r1.toNumber() : r1;\n                            } else n1.begin = t1.longs === String ? \"0\" : 0;\n                            l1.Long ? (r1 = new l1.Long(0, 0, !1), n1.end = t1.longs === String ? r1.toString() : t1.longs === Number ? r1.toNumber() : r1) : n1.end = t1.longs === String ? \"0\" : 0;\n                        }\n                        return null != e1.begin && e1.hasOwnProperty(\"begin\") && (\"number\" == typeof e1.begin ? n1.begin = t1.longs === String ? String(e1.begin) : e1.begin : n1.begin = t1.longs === String ? l1.Long.prototype.toString.call(e1.begin) : t1.longs === Number ? new l1.LongBits(e1.begin.low >>> 0, e1.begin.high >>> 0).toNumber() : e1.begin), null != e1.end && e1.hasOwnProperty(\"end\") && (\"number\" == typeof e1.end ? n1.end = t1.longs === String ? String(e1.end) : e1.end : n1.end = t1.longs === String ? l1.Long.prototype.toString.call(e1.end) : t1.longs === Number ? new l1.LongBits(e1.end.low >>> 0, e1.end.high >>> 0).toNumber() : e1.end), n1;\n                    }, e1.prototype.toJSON = function() {\n                        return this.constructor.toObject(this, s1.util.toJSONOptions);\n                    }, e1.getTypeUrl = function(e1) {\n                        return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TensorProto.Segment\";\n                    }, e1;\n                }(), e1.DataLocation = function() {\n                    var e1 = {}, t1 = Object.create(e1);\n                    return t1[e1[0] = \"DEFAULT\"] = 0, t1[e1[1] = \"EXTERNAL\"] = 1, t1;\n                }(), e1;\n            }(), i1.SparseTensorProto = function() {\n                function e1(e1) {\n                    if (this.dims = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.values = null, e1.prototype.indices = null, e1.prototype.dims = l1.emptyArray, e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.values && Object.hasOwnProperty.call(e1, \"values\") && c1.onnx.TensorProto.encode(e1.values, t1.uint32(10).fork()).ldelim(), null != e1.indices && Object.hasOwnProperty.call(e1, \"indices\") && c1.onnx.TensorProto.encode(e1.indices, t1.uint32(18).fork()).ldelim(), null != e1.dims && e1.dims.length) {\n                        t1.uint32(26).fork();\n                        for(var n1 = 0; n1 < e1.dims.length; ++n1)t1.int64(e1.dims[n1]);\n                        t1.ldelim();\n                    }\n                    return t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.SparseTensorProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.values = c1.onnx.TensorProto.decode(e1, e1.uint32());\n                                break;\n                            case 2:\n                                r1.indices = c1.onnx.TensorProto.decode(e1, e1.uint32());\n                                break;\n                            case 3:\n                                if (r1.dims && r1.dims.length || (r1.dims = []), 2 == (7 & o1)) for(var i1 = e1.uint32() + e1.pos; e1.pos < i1;)r1.dims.push(e1.int64());\n                                else r1.dims.push(e1.int64());\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    var t1;\n                    if (null != e1.values && e1.hasOwnProperty(\"values\") && (t1 = c1.onnx.TensorProto.verify(e1.values))) return \"values.\" + t1;\n                    if (null != e1.indices && e1.hasOwnProperty(\"indices\") && (t1 = c1.onnx.TensorProto.verify(e1.indices))) return \"indices.\" + t1;\n                    if (null != e1.dims && e1.hasOwnProperty(\"dims\")) {\n                        if (!Array.isArray(e1.dims)) return \"dims: array expected\";\n                        for(var n1 = 0; n1 < e1.dims.length; ++n1)if (!(l1.isInteger(e1.dims[n1]) || e1.dims[n1] && l1.isInteger(e1.dims[n1].low) && l1.isInteger(e1.dims[n1].high))) return \"dims: integer|Long[] expected\";\n                    }\n                    return null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.SparseTensorProto) return e1;\n                    var t1 = new c1.onnx.SparseTensorProto;\n                    if (null != e1.values) {\n                        if (\"object\" != typeof e1.values) throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                        t1.values = c1.onnx.TensorProto.fromObject(e1.values);\n                    }\n                    if (null != e1.indices) {\n                        if (\"object\" != typeof e1.indices) throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                        t1.indices = c1.onnx.TensorProto.fromObject(e1.indices);\n                    }\n                    if (e1.dims) {\n                        if (!Array.isArray(e1.dims)) throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                        t1.dims = [];\n                        for(var n1 = 0; n1 < e1.dims.length; ++n1)l1.Long ? (t1.dims[n1] = l1.Long.fromValue(e1.dims[n1])).unsigned = !1 : \"string\" == typeof e1.dims[n1] ? t1.dims[n1] = parseInt(e1.dims[n1], 10) : \"number\" == typeof e1.dims[n1] ? t1.dims[n1] = e1.dims[n1] : \"object\" == typeof e1.dims[n1] && (t1.dims[n1] = new l1.LongBits(e1.dims[n1].low >>> 0, e1.dims[n1].high >>> 0).toNumber());\n                    }\n                    return t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.dims = []), t1.defaults && (n1.values = null, n1.indices = null), null != e1.values && e1.hasOwnProperty(\"values\") && (n1.values = c1.onnx.TensorProto.toObject(e1.values, t1)), null != e1.indices && e1.hasOwnProperty(\"indices\") && (n1.indices = c1.onnx.TensorProto.toObject(e1.indices, t1)), e1.dims && e1.dims.length) {\n                        n1.dims = [];\n                        for(var r1 = 0; r1 < e1.dims.length; ++r1)\"number\" == typeof e1.dims[r1] ? n1.dims[r1] = t1.longs === String ? String(e1.dims[r1]) : e1.dims[r1] : n1.dims[r1] = t1.longs === String ? l1.Long.prototype.toString.call(e1.dims[r1]) : t1.longs === Number ? new l1.LongBits(e1.dims[r1].low >>> 0, e1.dims[r1].high >>> 0).toNumber() : e1.dims[r1];\n                    }\n                    return n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.SparseTensorProto\";\n                }, e1;\n            }(), i1.TensorShapeProto = function() {\n                function e1(e1) {\n                    if (this.dim = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.dim = l1.emptyArray, e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.dim && e1.dim.length) for(var n1 = 0; n1 < e1.dim.length; ++n1)c1.onnx.TensorShapeProto.Dimension.encode(e1.dim[n1], t1.uint32(10).fork()).ldelim();\n                    return t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TensorShapeProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        o1 >>> 3 == 1 ? (r1.dim && r1.dim.length || (r1.dim = []), r1.dim.push(c1.onnx.TensorShapeProto.Dimension.decode(e1, e1.uint32()))) : e1.skipType(7 & o1);\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.dim && e1.hasOwnProperty(\"dim\")) {\n                        if (!Array.isArray(e1.dim)) return \"dim: array expected\";\n                        for(var t1 = 0; t1 < e1.dim.length; ++t1){\n                            var n1 = c1.onnx.TensorShapeProto.Dimension.verify(e1.dim[t1]);\n                            if (n1) return \"dim.\" + n1;\n                        }\n                    }\n                    return null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.TensorShapeProto) return e1;\n                    var t1 = new c1.onnx.TensorShapeProto;\n                    if (e1.dim) {\n                        if (!Array.isArray(e1.dim)) throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                        t1.dim = [];\n                        for(var n1 = 0; n1 < e1.dim.length; ++n1){\n                            if (\"object\" != typeof e1.dim[n1]) throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                            t1.dim[n1] = c1.onnx.TensorShapeProto.Dimension.fromObject(e1.dim[n1]);\n                        }\n                    }\n                    return t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.dim = []), e1.dim && e1.dim.length) {\n                        n1.dim = [];\n                        for(var r1 = 0; r1 < e1.dim.length; ++r1)n1.dim[r1] = c1.onnx.TensorShapeProto.Dimension.toObject(e1.dim[r1], t1);\n                    }\n                    return n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TensorShapeProto\";\n                }, e1.Dimension = function() {\n                    function e1(e1) {\n                        if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                    }\n                    var t1;\n                    return e1.prototype.dimValue = null, e1.prototype.dimParam = null, e1.prototype.denotation = \"\", Object.defineProperty(e1.prototype, \"value\", {\n                        get: l1.oneOfGetter(t1 = [\n                            \"dimValue\",\n                            \"dimParam\"\n                        ]),\n                        set: l1.oneOfSetter(t1)\n                    }), e1.create = function(t1) {\n                        return new e1(t1);\n                    }, e1.encode = function(e1, t1) {\n                        return t1 || (t1 = u1.create()), null != e1.dimValue && Object.hasOwnProperty.call(e1, \"dimValue\") && t1.uint32(8).int64(e1.dimValue), null != e1.dimParam && Object.hasOwnProperty.call(e1, \"dimParam\") && t1.uint32(18).string(e1.dimParam), null != e1.denotation && Object.hasOwnProperty.call(e1, \"denotation\") && t1.uint32(26).string(e1.denotation), t1;\n                    }, e1.encodeDelimited = function(e1, t1) {\n                        return this.encode(e1, t1).ldelim();\n                    }, e1.decode = function(e1, t1) {\n                        e1 instanceof a1 || (e1 = a1.create(e1));\n                        for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TensorShapeProto.Dimension; e1.pos < n1;){\n                            var o1 = e1.uint32();\n                            switch(o1 >>> 3){\n                                case 1:\n                                    r1.dimValue = e1.int64();\n                                    break;\n                                case 2:\n                                    r1.dimParam = e1.string();\n                                    break;\n                                case 3:\n                                    r1.denotation = e1.string();\n                                    break;\n                                default:\n                                    e1.skipType(7 & o1);\n                            }\n                        }\n                        return r1;\n                    }, e1.decodeDelimited = function(e1) {\n                        return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                    }, e1.verify = function(e1) {\n                        if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                        var t1 = {};\n                        if (null != e1.dimValue && e1.hasOwnProperty(\"dimValue\") && (t1.value = 1, !(l1.isInteger(e1.dimValue) || e1.dimValue && l1.isInteger(e1.dimValue.low) && l1.isInteger(e1.dimValue.high)))) return \"dimValue: integer|Long expected\";\n                        if (null != e1.dimParam && e1.hasOwnProperty(\"dimParam\")) {\n                            if (1 === t1.value) return \"value: multiple values\";\n                            if (t1.value = 1, !l1.isString(e1.dimParam)) return \"dimParam: string expected\";\n                        }\n                        return null != e1.denotation && e1.hasOwnProperty(\"denotation\") && !l1.isString(e1.denotation) ? \"denotation: string expected\" : null;\n                    }, e1.fromObject = function(e1) {\n                        if (e1 instanceof c1.onnx.TensorShapeProto.Dimension) return e1;\n                        var t1 = new c1.onnx.TensorShapeProto.Dimension;\n                        return null != e1.dimValue && (l1.Long ? (t1.dimValue = l1.Long.fromValue(e1.dimValue)).unsigned = !1 : \"string\" == typeof e1.dimValue ? t1.dimValue = parseInt(e1.dimValue, 10) : \"number\" == typeof e1.dimValue ? t1.dimValue = e1.dimValue : \"object\" == typeof e1.dimValue && (t1.dimValue = new l1.LongBits(e1.dimValue.low >>> 0, e1.dimValue.high >>> 0).toNumber())), null != e1.dimParam && (t1.dimParam = String(e1.dimParam)), null != e1.denotation && (t1.denotation = String(e1.denotation)), t1;\n                    }, e1.toObject = function(e1, t1) {\n                        t1 || (t1 = {});\n                        var n1 = {};\n                        return t1.defaults && (n1.denotation = \"\"), null != e1.dimValue && e1.hasOwnProperty(\"dimValue\") && (\"number\" == typeof e1.dimValue ? n1.dimValue = t1.longs === String ? String(e1.dimValue) : e1.dimValue : n1.dimValue = t1.longs === String ? l1.Long.prototype.toString.call(e1.dimValue) : t1.longs === Number ? new l1.LongBits(e1.dimValue.low >>> 0, e1.dimValue.high >>> 0).toNumber() : e1.dimValue, t1.oneofs && (n1.value = \"dimValue\")), null != e1.dimParam && e1.hasOwnProperty(\"dimParam\") && (n1.dimParam = e1.dimParam, t1.oneofs && (n1.value = \"dimParam\")), null != e1.denotation && e1.hasOwnProperty(\"denotation\") && (n1.denotation = e1.denotation), n1;\n                    }, e1.prototype.toJSON = function() {\n                        return this.constructor.toObject(this, s1.util.toJSONOptions);\n                    }, e1.getTypeUrl = function(e1) {\n                        return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TensorShapeProto.Dimension\";\n                    }, e1;\n                }(), e1;\n            }(), i1.TypeProto = function() {\n                function e1(e1) {\n                    if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                var t1;\n                return e1.prototype.tensorType = null, e1.prototype.sequenceType = null, e1.prototype.mapType = null, e1.prototype.optionalType = null, e1.prototype.sparseTensorType = null, e1.prototype.denotation = \"\", Object.defineProperty(e1.prototype, \"value\", {\n                    get: l1.oneOfGetter(t1 = [\n                        \"tensorType\",\n                        \"sequenceType\",\n                        \"mapType\",\n                        \"optionalType\",\n                        \"sparseTensorType\"\n                    ]),\n                    set: l1.oneOfSetter(t1)\n                }), e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    return t1 || (t1 = u1.create()), null != e1.tensorType && Object.hasOwnProperty.call(e1, \"tensorType\") && c1.onnx.TypeProto.Tensor.encode(e1.tensorType, t1.uint32(10).fork()).ldelim(), null != e1.sequenceType && Object.hasOwnProperty.call(e1, \"sequenceType\") && c1.onnx.TypeProto.Sequence.encode(e1.sequenceType, t1.uint32(34).fork()).ldelim(), null != e1.mapType && Object.hasOwnProperty.call(e1, \"mapType\") && c1.onnx.TypeProto.Map.encode(e1.mapType, t1.uint32(42).fork()).ldelim(), null != e1.denotation && Object.hasOwnProperty.call(e1, \"denotation\") && t1.uint32(50).string(e1.denotation), null != e1.sparseTensorType && Object.hasOwnProperty.call(e1, \"sparseTensorType\") && c1.onnx.TypeProto.SparseTensor.encode(e1.sparseTensorType, t1.uint32(66).fork()).ldelim(), null != e1.optionalType && Object.hasOwnProperty.call(e1, \"optionalType\") && c1.onnx.TypeProto.Optional.encode(e1.optionalType, t1.uint32(74).fork()).ldelim(), t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TypeProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.tensorType = c1.onnx.TypeProto.Tensor.decode(e1, e1.uint32());\n                                break;\n                            case 4:\n                                r1.sequenceType = c1.onnx.TypeProto.Sequence.decode(e1, e1.uint32());\n                                break;\n                            case 5:\n                                r1.mapType = c1.onnx.TypeProto.Map.decode(e1, e1.uint32());\n                                break;\n                            case 9:\n                                r1.optionalType = c1.onnx.TypeProto.Optional.decode(e1, e1.uint32());\n                                break;\n                            case 8:\n                                r1.sparseTensorType = c1.onnx.TypeProto.SparseTensor.decode(e1, e1.uint32());\n                                break;\n                            case 6:\n                                r1.denotation = e1.string();\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    var t1 = {};\n                    if (null != e1.tensorType && e1.hasOwnProperty(\"tensorType\") && (t1.value = 1, n1 = c1.onnx.TypeProto.Tensor.verify(e1.tensorType))) return \"tensorType.\" + n1;\n                    if (null != e1.sequenceType && e1.hasOwnProperty(\"sequenceType\")) {\n                        if (1 === t1.value) return \"value: multiple values\";\n                        if (t1.value = 1, n1 = c1.onnx.TypeProto.Sequence.verify(e1.sequenceType)) return \"sequenceType.\" + n1;\n                    }\n                    if (null != e1.mapType && e1.hasOwnProperty(\"mapType\")) {\n                        if (1 === t1.value) return \"value: multiple values\";\n                        if (t1.value = 1, n1 = c1.onnx.TypeProto.Map.verify(e1.mapType)) return \"mapType.\" + n1;\n                    }\n                    if (null != e1.optionalType && e1.hasOwnProperty(\"optionalType\")) {\n                        if (1 === t1.value) return \"value: multiple values\";\n                        if (t1.value = 1, n1 = c1.onnx.TypeProto.Optional.verify(e1.optionalType)) return \"optionalType.\" + n1;\n                    }\n                    if (null != e1.sparseTensorType && e1.hasOwnProperty(\"sparseTensorType\")) {\n                        if (1 === t1.value) return \"value: multiple values\";\n                        var n1;\n                        if (t1.value = 1, n1 = c1.onnx.TypeProto.SparseTensor.verify(e1.sparseTensorType)) return \"sparseTensorType.\" + n1;\n                    }\n                    return null != e1.denotation && e1.hasOwnProperty(\"denotation\") && !l1.isString(e1.denotation) ? \"denotation: string expected\" : null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.TypeProto) return e1;\n                    var t1 = new c1.onnx.TypeProto;\n                    if (null != e1.tensorType) {\n                        if (\"object\" != typeof e1.tensorType) throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                        t1.tensorType = c1.onnx.TypeProto.Tensor.fromObject(e1.tensorType);\n                    }\n                    if (null != e1.sequenceType) {\n                        if (\"object\" != typeof e1.sequenceType) throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                        t1.sequenceType = c1.onnx.TypeProto.Sequence.fromObject(e1.sequenceType);\n                    }\n                    if (null != e1.mapType) {\n                        if (\"object\" != typeof e1.mapType) throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                        t1.mapType = c1.onnx.TypeProto.Map.fromObject(e1.mapType);\n                    }\n                    if (null != e1.optionalType) {\n                        if (\"object\" != typeof e1.optionalType) throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                        t1.optionalType = c1.onnx.TypeProto.Optional.fromObject(e1.optionalType);\n                    }\n                    if (null != e1.sparseTensorType) {\n                        if (\"object\" != typeof e1.sparseTensorType) throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                        t1.sparseTensorType = c1.onnx.TypeProto.SparseTensor.fromObject(e1.sparseTensorType);\n                    }\n                    return null != e1.denotation && (t1.denotation = String(e1.denotation)), t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    return t1.defaults && (n1.denotation = \"\"), null != e1.tensorType && e1.hasOwnProperty(\"tensorType\") && (n1.tensorType = c1.onnx.TypeProto.Tensor.toObject(e1.tensorType, t1), t1.oneofs && (n1.value = \"tensorType\")), null != e1.sequenceType && e1.hasOwnProperty(\"sequenceType\") && (n1.sequenceType = c1.onnx.TypeProto.Sequence.toObject(e1.sequenceType, t1), t1.oneofs && (n1.value = \"sequenceType\")), null != e1.mapType && e1.hasOwnProperty(\"mapType\") && (n1.mapType = c1.onnx.TypeProto.Map.toObject(e1.mapType, t1), t1.oneofs && (n1.value = \"mapType\")), null != e1.denotation && e1.hasOwnProperty(\"denotation\") && (n1.denotation = e1.denotation), null != e1.sparseTensorType && e1.hasOwnProperty(\"sparseTensorType\") && (n1.sparseTensorType = c1.onnx.TypeProto.SparseTensor.toObject(e1.sparseTensorType, t1), t1.oneofs && (n1.value = \"sparseTensorType\")), null != e1.optionalType && e1.hasOwnProperty(\"optionalType\") && (n1.optionalType = c1.onnx.TypeProto.Optional.toObject(e1.optionalType, t1), t1.oneofs && (n1.value = \"optionalType\")), n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TypeProto\";\n                }, e1.Tensor = function() {\n                    function e1(e1) {\n                        if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                    }\n                    return e1.prototype.elemType = 0, e1.prototype.shape = null, e1.create = function(t1) {\n                        return new e1(t1);\n                    }, e1.encode = function(e1, t1) {\n                        return t1 || (t1 = u1.create()), null != e1.elemType && Object.hasOwnProperty.call(e1, \"elemType\") && t1.uint32(8).int32(e1.elemType), null != e1.shape && Object.hasOwnProperty.call(e1, \"shape\") && c1.onnx.TensorShapeProto.encode(e1.shape, t1.uint32(18).fork()).ldelim(), t1;\n                    }, e1.encodeDelimited = function(e1, t1) {\n                        return this.encode(e1, t1).ldelim();\n                    }, e1.decode = function(e1, t1) {\n                        e1 instanceof a1 || (e1 = a1.create(e1));\n                        for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TypeProto.Tensor; e1.pos < n1;){\n                            var o1 = e1.uint32();\n                            switch(o1 >>> 3){\n                                case 1:\n                                    r1.elemType = e1.int32();\n                                    break;\n                                case 2:\n                                    r1.shape = c1.onnx.TensorShapeProto.decode(e1, e1.uint32());\n                                    break;\n                                default:\n                                    e1.skipType(7 & o1);\n                            }\n                        }\n                        return r1;\n                    }, e1.decodeDelimited = function(e1) {\n                        return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                    }, e1.verify = function(e1) {\n                        if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                        if (null != e1.elemType && e1.hasOwnProperty(\"elemType\") && !l1.isInteger(e1.elemType)) return \"elemType: integer expected\";\n                        if (null != e1.shape && e1.hasOwnProperty(\"shape\")) {\n                            var t1 = c1.onnx.TensorShapeProto.verify(e1.shape);\n                            if (t1) return \"shape.\" + t1;\n                        }\n                        return null;\n                    }, e1.fromObject = function(e1) {\n                        if (e1 instanceof c1.onnx.TypeProto.Tensor) return e1;\n                        var t1 = new c1.onnx.TypeProto.Tensor;\n                        if (null != e1.elemType && (t1.elemType = 0 | e1.elemType), null != e1.shape) {\n                            if (\"object\" != typeof e1.shape) throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                            t1.shape = c1.onnx.TensorShapeProto.fromObject(e1.shape);\n                        }\n                        return t1;\n                    }, e1.toObject = function(e1, t1) {\n                        t1 || (t1 = {});\n                        var n1 = {};\n                        return t1.defaults && (n1.elemType = 0, n1.shape = null), null != e1.elemType && e1.hasOwnProperty(\"elemType\") && (n1.elemType = e1.elemType), null != e1.shape && e1.hasOwnProperty(\"shape\") && (n1.shape = c1.onnx.TensorShapeProto.toObject(e1.shape, t1)), n1;\n                    }, e1.prototype.toJSON = function() {\n                        return this.constructor.toObject(this, s1.util.toJSONOptions);\n                    }, e1.getTypeUrl = function(e1) {\n                        return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TypeProto.Tensor\";\n                    }, e1;\n                }(), e1.Sequence = function() {\n                    function e1(e1) {\n                        if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                    }\n                    return e1.prototype.elemType = null, e1.create = function(t1) {\n                        return new e1(t1);\n                    }, e1.encode = function(e1, t1) {\n                        return t1 || (t1 = u1.create()), null != e1.elemType && Object.hasOwnProperty.call(e1, \"elemType\") && c1.onnx.TypeProto.encode(e1.elemType, t1.uint32(10).fork()).ldelim(), t1;\n                    }, e1.encodeDelimited = function(e1, t1) {\n                        return this.encode(e1, t1).ldelim();\n                    }, e1.decode = function(e1, t1) {\n                        e1 instanceof a1 || (e1 = a1.create(e1));\n                        for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TypeProto.Sequence; e1.pos < n1;){\n                            var o1 = e1.uint32();\n                            o1 >>> 3 == 1 ? r1.elemType = c1.onnx.TypeProto.decode(e1, e1.uint32()) : e1.skipType(7 & o1);\n                        }\n                        return r1;\n                    }, e1.decodeDelimited = function(e1) {\n                        return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                    }, e1.verify = function(e1) {\n                        if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                        if (null != e1.elemType && e1.hasOwnProperty(\"elemType\")) {\n                            var t1 = c1.onnx.TypeProto.verify(e1.elemType);\n                            if (t1) return \"elemType.\" + t1;\n                        }\n                        return null;\n                    }, e1.fromObject = function(e1) {\n                        if (e1 instanceof c1.onnx.TypeProto.Sequence) return e1;\n                        var t1 = new c1.onnx.TypeProto.Sequence;\n                        if (null != e1.elemType) {\n                            if (\"object\" != typeof e1.elemType) throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                            t1.elemType = c1.onnx.TypeProto.fromObject(e1.elemType);\n                        }\n                        return t1;\n                    }, e1.toObject = function(e1, t1) {\n                        t1 || (t1 = {});\n                        var n1 = {};\n                        return t1.defaults && (n1.elemType = null), null != e1.elemType && e1.hasOwnProperty(\"elemType\") && (n1.elemType = c1.onnx.TypeProto.toObject(e1.elemType, t1)), n1;\n                    }, e1.prototype.toJSON = function() {\n                        return this.constructor.toObject(this, s1.util.toJSONOptions);\n                    }, e1.getTypeUrl = function(e1) {\n                        return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TypeProto.Sequence\";\n                    }, e1;\n                }(), e1.Map = function() {\n                    function e1(e1) {\n                        if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                    }\n                    return e1.prototype.keyType = 0, e1.prototype.valueType = null, e1.create = function(t1) {\n                        return new e1(t1);\n                    }, e1.encode = function(e1, t1) {\n                        return t1 || (t1 = u1.create()), null != e1.keyType && Object.hasOwnProperty.call(e1, \"keyType\") && t1.uint32(8).int32(e1.keyType), null != e1.valueType && Object.hasOwnProperty.call(e1, \"valueType\") && c1.onnx.TypeProto.encode(e1.valueType, t1.uint32(18).fork()).ldelim(), t1;\n                    }, e1.encodeDelimited = function(e1, t1) {\n                        return this.encode(e1, t1).ldelim();\n                    }, e1.decode = function(e1, t1) {\n                        e1 instanceof a1 || (e1 = a1.create(e1));\n                        for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TypeProto.Map; e1.pos < n1;){\n                            var o1 = e1.uint32();\n                            switch(o1 >>> 3){\n                                case 1:\n                                    r1.keyType = e1.int32();\n                                    break;\n                                case 2:\n                                    r1.valueType = c1.onnx.TypeProto.decode(e1, e1.uint32());\n                                    break;\n                                default:\n                                    e1.skipType(7 & o1);\n                            }\n                        }\n                        return r1;\n                    }, e1.decodeDelimited = function(e1) {\n                        return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                    }, e1.verify = function(e1) {\n                        if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                        if (null != e1.keyType && e1.hasOwnProperty(\"keyType\") && !l1.isInteger(e1.keyType)) return \"keyType: integer expected\";\n                        if (null != e1.valueType && e1.hasOwnProperty(\"valueType\")) {\n                            var t1 = c1.onnx.TypeProto.verify(e1.valueType);\n                            if (t1) return \"valueType.\" + t1;\n                        }\n                        return null;\n                    }, e1.fromObject = function(e1) {\n                        if (e1 instanceof c1.onnx.TypeProto.Map) return e1;\n                        var t1 = new c1.onnx.TypeProto.Map;\n                        if (null != e1.keyType && (t1.keyType = 0 | e1.keyType), null != e1.valueType) {\n                            if (\"object\" != typeof e1.valueType) throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                            t1.valueType = c1.onnx.TypeProto.fromObject(e1.valueType);\n                        }\n                        return t1;\n                    }, e1.toObject = function(e1, t1) {\n                        t1 || (t1 = {});\n                        var n1 = {};\n                        return t1.defaults && (n1.keyType = 0, n1.valueType = null), null != e1.keyType && e1.hasOwnProperty(\"keyType\") && (n1.keyType = e1.keyType), null != e1.valueType && e1.hasOwnProperty(\"valueType\") && (n1.valueType = c1.onnx.TypeProto.toObject(e1.valueType, t1)), n1;\n                    }, e1.prototype.toJSON = function() {\n                        return this.constructor.toObject(this, s1.util.toJSONOptions);\n                    }, e1.getTypeUrl = function(e1) {\n                        return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TypeProto.Map\";\n                    }, e1;\n                }(), e1.Optional = function() {\n                    function e1(e1) {\n                        if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                    }\n                    return e1.prototype.elemType = null, e1.create = function(t1) {\n                        return new e1(t1);\n                    }, e1.encode = function(e1, t1) {\n                        return t1 || (t1 = u1.create()), null != e1.elemType && Object.hasOwnProperty.call(e1, \"elemType\") && c1.onnx.TypeProto.encode(e1.elemType, t1.uint32(10).fork()).ldelim(), t1;\n                    }, e1.encodeDelimited = function(e1, t1) {\n                        return this.encode(e1, t1).ldelim();\n                    }, e1.decode = function(e1, t1) {\n                        e1 instanceof a1 || (e1 = a1.create(e1));\n                        for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TypeProto.Optional; e1.pos < n1;){\n                            var o1 = e1.uint32();\n                            o1 >>> 3 == 1 ? r1.elemType = c1.onnx.TypeProto.decode(e1, e1.uint32()) : e1.skipType(7 & o1);\n                        }\n                        return r1;\n                    }, e1.decodeDelimited = function(e1) {\n                        return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                    }, e1.verify = function(e1) {\n                        if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                        if (null != e1.elemType && e1.hasOwnProperty(\"elemType\")) {\n                            var t1 = c1.onnx.TypeProto.verify(e1.elemType);\n                            if (t1) return \"elemType.\" + t1;\n                        }\n                        return null;\n                    }, e1.fromObject = function(e1) {\n                        if (e1 instanceof c1.onnx.TypeProto.Optional) return e1;\n                        var t1 = new c1.onnx.TypeProto.Optional;\n                        if (null != e1.elemType) {\n                            if (\"object\" != typeof e1.elemType) throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                            t1.elemType = c1.onnx.TypeProto.fromObject(e1.elemType);\n                        }\n                        return t1;\n                    }, e1.toObject = function(e1, t1) {\n                        t1 || (t1 = {});\n                        var n1 = {};\n                        return t1.defaults && (n1.elemType = null), null != e1.elemType && e1.hasOwnProperty(\"elemType\") && (n1.elemType = c1.onnx.TypeProto.toObject(e1.elemType, t1)), n1;\n                    }, e1.prototype.toJSON = function() {\n                        return this.constructor.toObject(this, s1.util.toJSONOptions);\n                    }, e1.getTypeUrl = function(e1) {\n                        return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TypeProto.Optional\";\n                    }, e1;\n                }(), e1.SparseTensor = function() {\n                    function e1(e1) {\n                        if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                    }\n                    return e1.prototype.elemType = 0, e1.prototype.shape = null, e1.create = function(t1) {\n                        return new e1(t1);\n                    }, e1.encode = function(e1, t1) {\n                        return t1 || (t1 = u1.create()), null != e1.elemType && Object.hasOwnProperty.call(e1, \"elemType\") && t1.uint32(8).int32(e1.elemType), null != e1.shape && Object.hasOwnProperty.call(e1, \"shape\") && c1.onnx.TensorShapeProto.encode(e1.shape, t1.uint32(18).fork()).ldelim(), t1;\n                    }, e1.encodeDelimited = function(e1, t1) {\n                        return this.encode(e1, t1).ldelim();\n                    }, e1.decode = function(e1, t1) {\n                        e1 instanceof a1 || (e1 = a1.create(e1));\n                        for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.TypeProto.SparseTensor; e1.pos < n1;){\n                            var o1 = e1.uint32();\n                            switch(o1 >>> 3){\n                                case 1:\n                                    r1.elemType = e1.int32();\n                                    break;\n                                case 2:\n                                    r1.shape = c1.onnx.TensorShapeProto.decode(e1, e1.uint32());\n                                    break;\n                                default:\n                                    e1.skipType(7 & o1);\n                            }\n                        }\n                        return r1;\n                    }, e1.decodeDelimited = function(e1) {\n                        return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                    }, e1.verify = function(e1) {\n                        if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                        if (null != e1.elemType && e1.hasOwnProperty(\"elemType\") && !l1.isInteger(e1.elemType)) return \"elemType: integer expected\";\n                        if (null != e1.shape && e1.hasOwnProperty(\"shape\")) {\n                            var t1 = c1.onnx.TensorShapeProto.verify(e1.shape);\n                            if (t1) return \"shape.\" + t1;\n                        }\n                        return null;\n                    }, e1.fromObject = function(e1) {\n                        if (e1 instanceof c1.onnx.TypeProto.SparseTensor) return e1;\n                        var t1 = new c1.onnx.TypeProto.SparseTensor;\n                        if (null != e1.elemType && (t1.elemType = 0 | e1.elemType), null != e1.shape) {\n                            if (\"object\" != typeof e1.shape) throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                            t1.shape = c1.onnx.TensorShapeProto.fromObject(e1.shape);\n                        }\n                        return t1;\n                    }, e1.toObject = function(e1, t1) {\n                        t1 || (t1 = {});\n                        var n1 = {};\n                        return t1.defaults && (n1.elemType = 0, n1.shape = null), null != e1.elemType && e1.hasOwnProperty(\"elemType\") && (n1.elemType = e1.elemType), null != e1.shape && e1.hasOwnProperty(\"shape\") && (n1.shape = c1.onnx.TensorShapeProto.toObject(e1.shape, t1)), n1;\n                    }, e1.prototype.toJSON = function() {\n                        return this.constructor.toObject(this, s1.util.toJSONOptions);\n                    }, e1.getTypeUrl = function(e1) {\n                        return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.TypeProto.SparseTensor\";\n                    }, e1;\n                }(), e1;\n            }(), i1.OperatorSetIdProto = function() {\n                function e1(e1) {\n                    if (e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.domain = \"\", e1.prototype.version = l1.Long ? l1.Long.fromBits(0, 0, !1) : 0, e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    return t1 || (t1 = u1.create()), null != e1.domain && Object.hasOwnProperty.call(e1, \"domain\") && t1.uint32(10).string(e1.domain), null != e1.version && Object.hasOwnProperty.call(e1, \"version\") && t1.uint32(16).int64(e1.version), t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.OperatorSetIdProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.domain = e1.string();\n                                break;\n                            case 2:\n                                r1.version = e1.int64();\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    return \"object\" != typeof e1 || null === e1 ? \"object expected\" : null != e1.domain && e1.hasOwnProperty(\"domain\") && !l1.isString(e1.domain) ? \"domain: string expected\" : null != e1.version && e1.hasOwnProperty(\"version\") && !(l1.isInteger(e1.version) || e1.version && l1.isInteger(e1.version.low) && l1.isInteger(e1.version.high)) ? \"version: integer|Long expected\" : null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.OperatorSetIdProto) return e1;\n                    var t1 = new c1.onnx.OperatorSetIdProto;\n                    return null != e1.domain && (t1.domain = String(e1.domain)), null != e1.version && (l1.Long ? (t1.version = l1.Long.fromValue(e1.version)).unsigned = !1 : \"string\" == typeof e1.version ? t1.version = parseInt(e1.version, 10) : \"number\" == typeof e1.version ? t1.version = e1.version : \"object\" == typeof e1.version && (t1.version = new l1.LongBits(e1.version.low >>> 0, e1.version.high >>> 0).toNumber())), t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if (t1.defaults) if (n1.domain = \"\", l1.Long) {\n                        var r1 = new l1.Long(0, 0, !1);\n                        n1.version = t1.longs === String ? r1.toString() : t1.longs === Number ? r1.toNumber() : r1;\n                    } else n1.version = t1.longs === String ? \"0\" : 0;\n                    return null != e1.domain && e1.hasOwnProperty(\"domain\") && (n1.domain = e1.domain), null != e1.version && e1.hasOwnProperty(\"version\") && (\"number\" == typeof e1.version ? n1.version = t1.longs === String ? String(e1.version) : e1.version : n1.version = t1.longs === String ? l1.Long.prototype.toString.call(e1.version) : t1.longs === Number ? new l1.LongBits(e1.version.low >>> 0, e1.version.high >>> 0).toNumber() : e1.version), n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.OperatorSetIdProto\";\n                }, e1;\n            }(), i1.OperatorStatus = function() {\n                var e1 = {}, t1 = Object.create(e1);\n                return t1[e1[0] = \"EXPERIMENTAL\"] = 0, t1[e1[1] = \"STABLE\"] = 1, t1;\n            }(), i1.FunctionProto = function() {\n                function e1(e1) {\n                    if (this.input = [], this.output = [], this.attribute = [], this.attributeProto = [], this.node = [], this.opsetImport = [], e1) for(var t1 = Object.keys(e1), n1 = 0; n1 < t1.length; ++n1)null != e1[t1[n1]] && (this[t1[n1]] = e1[t1[n1]]);\n                }\n                return e1.prototype.name = \"\", e1.prototype.input = l1.emptyArray, e1.prototype.output = l1.emptyArray, e1.prototype.attribute = l1.emptyArray, e1.prototype.attributeProto = l1.emptyArray, e1.prototype.node = l1.emptyArray, e1.prototype.docString = \"\", e1.prototype.opsetImport = l1.emptyArray, e1.prototype.domain = \"\", e1.create = function(t1) {\n                    return new e1(t1);\n                }, e1.encode = function(e1, t1) {\n                    if (t1 || (t1 = u1.create()), null != e1.name && Object.hasOwnProperty.call(e1, \"name\") && t1.uint32(10).string(e1.name), null != e1.input && e1.input.length) for(var n1 = 0; n1 < e1.input.length; ++n1)t1.uint32(34).string(e1.input[n1]);\n                    if (null != e1.output && e1.output.length) for(n1 = 0; n1 < e1.output.length; ++n1)t1.uint32(42).string(e1.output[n1]);\n                    if (null != e1.attribute && e1.attribute.length) for(n1 = 0; n1 < e1.attribute.length; ++n1)t1.uint32(50).string(e1.attribute[n1]);\n                    if (null != e1.node && e1.node.length) for(n1 = 0; n1 < e1.node.length; ++n1)c1.onnx.NodeProto.encode(e1.node[n1], t1.uint32(58).fork()).ldelim();\n                    if (null != e1.docString && Object.hasOwnProperty.call(e1, \"docString\") && t1.uint32(66).string(e1.docString), null != e1.opsetImport && e1.opsetImport.length) for(n1 = 0; n1 < e1.opsetImport.length; ++n1)c1.onnx.OperatorSetIdProto.encode(e1.opsetImport[n1], t1.uint32(74).fork()).ldelim();\n                    if (null != e1.domain && Object.hasOwnProperty.call(e1, \"domain\") && t1.uint32(82).string(e1.domain), null != e1.attributeProto && e1.attributeProto.length) for(n1 = 0; n1 < e1.attributeProto.length; ++n1)c1.onnx.AttributeProto.encode(e1.attributeProto[n1], t1.uint32(90).fork()).ldelim();\n                    return t1;\n                }, e1.encodeDelimited = function(e1, t1) {\n                    return this.encode(e1, t1).ldelim();\n                }, e1.decode = function(e1, t1) {\n                    e1 instanceof a1 || (e1 = a1.create(e1));\n                    for(var n1 = void 0 === t1 ? e1.len : e1.pos + t1, r1 = new c1.onnx.FunctionProto; e1.pos < n1;){\n                        var o1 = e1.uint32();\n                        switch(o1 >>> 3){\n                            case 1:\n                                r1.name = e1.string();\n                                break;\n                            case 4:\n                                r1.input && r1.input.length || (r1.input = []), r1.input.push(e1.string());\n                                break;\n                            case 5:\n                                r1.output && r1.output.length || (r1.output = []), r1.output.push(e1.string());\n                                break;\n                            case 6:\n                                r1.attribute && r1.attribute.length || (r1.attribute = []), r1.attribute.push(e1.string());\n                                break;\n                            case 11:\n                                r1.attributeProto && r1.attributeProto.length || (r1.attributeProto = []), r1.attributeProto.push(c1.onnx.AttributeProto.decode(e1, e1.uint32()));\n                                break;\n                            case 7:\n                                r1.node && r1.node.length || (r1.node = []), r1.node.push(c1.onnx.NodeProto.decode(e1, e1.uint32()));\n                                break;\n                            case 8:\n                                r1.docString = e1.string();\n                                break;\n                            case 9:\n                                r1.opsetImport && r1.opsetImport.length || (r1.opsetImport = []), r1.opsetImport.push(c1.onnx.OperatorSetIdProto.decode(e1, e1.uint32()));\n                                break;\n                            case 10:\n                                r1.domain = e1.string();\n                                break;\n                            default:\n                                e1.skipType(7 & o1);\n                        }\n                    }\n                    return r1;\n                }, e1.decodeDelimited = function(e1) {\n                    return e1 instanceof a1 || (e1 = new a1(e1)), this.decode(e1, e1.uint32());\n                }, e1.verify = function(e1) {\n                    if (\"object\" != typeof e1 || null === e1) return \"object expected\";\n                    if (null != e1.name && e1.hasOwnProperty(\"name\") && !l1.isString(e1.name)) return \"name: string expected\";\n                    if (null != e1.input && e1.hasOwnProperty(\"input\")) {\n                        if (!Array.isArray(e1.input)) return \"input: array expected\";\n                        for(var t1 = 0; t1 < e1.input.length; ++t1)if (!l1.isString(e1.input[t1])) return \"input: string[] expected\";\n                    }\n                    if (null != e1.output && e1.hasOwnProperty(\"output\")) {\n                        if (!Array.isArray(e1.output)) return \"output: array expected\";\n                        for(t1 = 0; t1 < e1.output.length; ++t1)if (!l1.isString(e1.output[t1])) return \"output: string[] expected\";\n                    }\n                    if (null != e1.attribute && e1.hasOwnProperty(\"attribute\")) {\n                        if (!Array.isArray(e1.attribute)) return \"attribute: array expected\";\n                        for(t1 = 0; t1 < e1.attribute.length; ++t1)if (!l1.isString(e1.attribute[t1])) return \"attribute: string[] expected\";\n                    }\n                    if (null != e1.attributeProto && e1.hasOwnProperty(\"attributeProto\")) {\n                        if (!Array.isArray(e1.attributeProto)) return \"attributeProto: array expected\";\n                        for(t1 = 0; t1 < e1.attributeProto.length; ++t1)if (n1 = c1.onnx.AttributeProto.verify(e1.attributeProto[t1])) return \"attributeProto.\" + n1;\n                    }\n                    if (null != e1.node && e1.hasOwnProperty(\"node\")) {\n                        if (!Array.isArray(e1.node)) return \"node: array expected\";\n                        for(t1 = 0; t1 < e1.node.length; ++t1)if (n1 = c1.onnx.NodeProto.verify(e1.node[t1])) return \"node.\" + n1;\n                    }\n                    if (null != e1.docString && e1.hasOwnProperty(\"docString\") && !l1.isString(e1.docString)) return \"docString: string expected\";\n                    if (null != e1.opsetImport && e1.hasOwnProperty(\"opsetImport\")) {\n                        if (!Array.isArray(e1.opsetImport)) return \"opsetImport: array expected\";\n                        for(t1 = 0; t1 < e1.opsetImport.length; ++t1){\n                            var n1;\n                            if (n1 = c1.onnx.OperatorSetIdProto.verify(e1.opsetImport[t1])) return \"opsetImport.\" + n1;\n                        }\n                    }\n                    return null != e1.domain && e1.hasOwnProperty(\"domain\") && !l1.isString(e1.domain) ? \"domain: string expected\" : null;\n                }, e1.fromObject = function(e1) {\n                    if (e1 instanceof c1.onnx.FunctionProto) return e1;\n                    var t1 = new c1.onnx.FunctionProto;\n                    if (null != e1.name && (t1.name = String(e1.name)), e1.input) {\n                        if (!Array.isArray(e1.input)) throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                        t1.input = [];\n                        for(var n1 = 0; n1 < e1.input.length; ++n1)t1.input[n1] = String(e1.input[n1]);\n                    }\n                    if (e1.output) {\n                        if (!Array.isArray(e1.output)) throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                        for(t1.output = [], n1 = 0; n1 < e1.output.length; ++n1)t1.output[n1] = String(e1.output[n1]);\n                    }\n                    if (e1.attribute) {\n                        if (!Array.isArray(e1.attribute)) throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                        for(t1.attribute = [], n1 = 0; n1 < e1.attribute.length; ++n1)t1.attribute[n1] = String(e1.attribute[n1]);\n                    }\n                    if (e1.attributeProto) {\n                        if (!Array.isArray(e1.attributeProto)) throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                        for(t1.attributeProto = [], n1 = 0; n1 < e1.attributeProto.length; ++n1){\n                            if (\"object\" != typeof e1.attributeProto[n1]) throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                            t1.attributeProto[n1] = c1.onnx.AttributeProto.fromObject(e1.attributeProto[n1]);\n                        }\n                    }\n                    if (e1.node) {\n                        if (!Array.isArray(e1.node)) throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                        for(t1.node = [], n1 = 0; n1 < e1.node.length; ++n1){\n                            if (\"object\" != typeof e1.node[n1]) throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                            t1.node[n1] = c1.onnx.NodeProto.fromObject(e1.node[n1]);\n                        }\n                    }\n                    if (null != e1.docString && (t1.docString = String(e1.docString)), e1.opsetImport) {\n                        if (!Array.isArray(e1.opsetImport)) throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                        for(t1.opsetImport = [], n1 = 0; n1 < e1.opsetImport.length; ++n1){\n                            if (\"object\" != typeof e1.opsetImport[n1]) throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                            t1.opsetImport[n1] = c1.onnx.OperatorSetIdProto.fromObject(e1.opsetImport[n1]);\n                        }\n                    }\n                    return null != e1.domain && (t1.domain = String(e1.domain)), t1;\n                }, e1.toObject = function(e1, t1) {\n                    t1 || (t1 = {});\n                    var n1 = {};\n                    if ((t1.arrays || t1.defaults) && (n1.input = [], n1.output = [], n1.attribute = [], n1.node = [], n1.opsetImport = [], n1.attributeProto = []), t1.defaults && (n1.name = \"\", n1.docString = \"\", n1.domain = \"\"), null != e1.name && e1.hasOwnProperty(\"name\") && (n1.name = e1.name), e1.input && e1.input.length) {\n                        n1.input = [];\n                        for(var r1 = 0; r1 < e1.input.length; ++r1)n1.input[r1] = e1.input[r1];\n                    }\n                    if (e1.output && e1.output.length) for(n1.output = [], r1 = 0; r1 < e1.output.length; ++r1)n1.output[r1] = e1.output[r1];\n                    if (e1.attribute && e1.attribute.length) for(n1.attribute = [], r1 = 0; r1 < e1.attribute.length; ++r1)n1.attribute[r1] = e1.attribute[r1];\n                    if (e1.node && e1.node.length) for(n1.node = [], r1 = 0; r1 < e1.node.length; ++r1)n1.node[r1] = c1.onnx.NodeProto.toObject(e1.node[r1], t1);\n                    if (null != e1.docString && e1.hasOwnProperty(\"docString\") && (n1.docString = e1.docString), e1.opsetImport && e1.opsetImport.length) for(n1.opsetImport = [], r1 = 0; r1 < e1.opsetImport.length; ++r1)n1.opsetImport[r1] = c1.onnx.OperatorSetIdProto.toObject(e1.opsetImport[r1], t1);\n                    if (null != e1.domain && e1.hasOwnProperty(\"domain\") && (n1.domain = e1.domain), e1.attributeProto && e1.attributeProto.length) for(n1.attributeProto = [], r1 = 0; r1 < e1.attributeProto.length; ++r1)n1.attributeProto[r1] = c1.onnx.AttributeProto.toObject(e1.attributeProto[r1], t1);\n                    return n1;\n                }, e1.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, s1.util.toJSONOptions);\n                }, e1.getTypeUrl = function(e1) {\n                    return void 0 === e1 && (e1 = \"type.googleapis.com\"), e1 + \"/onnx.FunctionProto\";\n                }, e1;\n            }(), i1), e1.exports = c1;\n        },\n        3474: (e1, t1, n1)=>{\n            var _scriptDir1, r1 = (_scriptDir1 = \"undefined\" != typeof document && document.currentScript ? document.currentScript.src : void 0,  true && (_scriptDir1 = _scriptDir1 || __filename), function(e1 = {}) {\n                function t1() {\n                    return D1.buffer != N1.buffer && U1(), N1;\n                }\n                function r1() {\n                    return D1.buffer != N1.buffer && U1(), L1;\n                }\n                function o1() {\n                    return D1.buffer != N1.buffer && U1(), C1;\n                }\n                function i1() {\n                    return D1.buffer != N1.buffer && U1(), R1;\n                }\n                function s1() {\n                    return D1.buffer != N1.buffer && U1(), j1;\n                }\n                var a1, u1, l1 = e1;\n                l1.ready = new Promise((e1, t1)=>{\n                    a1 = e1, u1 = t1;\n                });\n                var c1, p1, d1, f1 = Object.assign({}, l1), h1 = \"./this.program\", g1 = (e1, t1)=>{\n                    throw t1;\n                }, b1 = \"object\" == \"undefined\", m1 = \"function\" == typeof importScripts, y1 = \"object\" == typeof process && \"object\" == typeof process.versions && \"string\" == typeof process.versions.node, _1 = l1.ENVIRONMENT_IS_PTHREAD || !1, v1 = \"\";\n                function T1(e1) {\n                    return l1.locateFile ? l1.locateFile(e1, v1) : v1 + e1;\n                }\n                if (y1) {\n                    var x1 = n1(6231), w1 = n1(1423);\n                    let t1;\n                    v1 = m1 ? w1.dirname(v1) + \"/\" : __dirname + \"/\", c1 = (e1, t1)=>(e1 = e1.startsWith(\"file://\") ? new URL(e1) : w1.normalize(e1), x1.readFileSync(e1, t1 ? void 0 : \"utf8\")), d1 = (e1)=>((e1 = c1(e1, !0)).buffer || (e1 = new Uint8Array(e1)), e1), p1 = (e1, t1, n1, r1 = !0)=>{\n                        e1 = e1.startsWith(\"file://\") ? new URL(e1) : w1.normalize(e1), x1.readFile(e1, r1 ? void 0 : \"utf8\", (e1, o1)=>{\n                            e1 ? n1(e1) : t1(r1 ? o1.buffer : o1);\n                        });\n                    }, !l1.thisProgram && 1 < process.argv.length && (h1 = process.argv[1].replace(/\\\\/g, \"/\")), process.argv.slice(2), g1 = (e1, t1)=>{\n                        throw process.exitCode = e1, t1;\n                    }, l1.inspect = ()=>\"[Emscripten Module object]\";\n                    try {\n                        t1 = n1(4564);\n                    } catch (e1) {\n                        throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'), e1;\n                    }\n                    global.Worker = t1.Worker;\n                } else (b1 || m1) && (m1 ? v1 = self.location.href : \"undefined\" != typeof document && document.currentScript && (v1 = document.currentScript.src), _scriptDir1 && (v1 = _scriptDir1), v1 = 0 !== v1.indexOf(\"blob:\") ? v1.substr(0, v1.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1) : \"\", y1 || (c1 = (e1)=>{\n                    var t1 = new XMLHttpRequest;\n                    return t1.open(\"GET\", e1, !1), t1.send(null), t1.responseText;\n                }, m1 && (d1 = (e1)=>{\n                    var t1 = new XMLHttpRequest;\n                    return t1.open(\"GET\", e1, !1), t1.responseType = \"arraybuffer\", t1.send(null), new Uint8Array(t1.response);\n                }), p1 = (e1, t1, n1)=>{\n                    var r1 = new XMLHttpRequest;\n                    r1.open(\"GET\", e1, !0), r1.responseType = \"arraybuffer\", r1.onload = ()=>{\n                        200 == r1.status || 0 == r1.status && r1.response ? t1(r1.response) : n1();\n                    }, r1.onerror = n1, r1.send(null);\n                }));\n                y1 && \"undefined\" == typeof performance && (global.performance = n1(498).performance);\n                var O1 = console.log.bind(console), S1 = console.error.bind(console);\n                y1 && (O1 = (...e1)=>x1.writeSync(1, e1.join(\" \") + \"\\n\"), S1 = (...e1)=>x1.writeSync(2, e1.join(\" \") + \"\\n\"));\n                var A1, P1 = l1.print || O1, I1 = l1.printErr || S1;\n                Object.assign(l1, f1), f1 = null, l1.thisProgram && (h1 = l1.thisProgram), l1.quit && (g1 = l1.quit), l1.wasmBinary && (A1 = l1.wasmBinary);\n                var E1 = l1.noExitRuntime || !0;\n                \"object\" != typeof WebAssembly && te1(\"no native wasm support detected\");\n                var D1, $1, k1, F1, N1, L1, C1, R1, j1, M1 = !1;\n                function U1() {\n                    var e1 = D1.buffer;\n                    l1.HEAP8 = N1 = new Int8Array(e1), l1.HEAP16 = new Int16Array(e1), l1.HEAP32 = C1 = new Int32Array(e1), l1.HEAPU8 = L1 = new Uint8Array(e1), l1.HEAPU16 = new Uint16Array(e1), l1.HEAPU32 = R1 = new Uint32Array(e1), l1.HEAPF32 = new Float32Array(e1), l1.HEAPF64 = j1 = new Float64Array(e1);\n                }\n                var B1 = l1.INITIAL_MEMORY || 16777216;\n                if (5242880 <= B1 || te1(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \" + B1 + \"! (STACK_SIZE=5242880)\"), _1) D1 = l1.wasmMemory;\n                else if (l1.wasmMemory) D1 = l1.wasmMemory;\n                else if (!((D1 = new WebAssembly.Memory({\n                    initial: B1 / 65536,\n                    maximum: 65536,\n                    shared: !0\n                })).buffer instanceof SharedArrayBuffer)) throw I1(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"), y1 && I1(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"), Error(\"bad memory\");\n                U1(), B1 = D1.buffer.byteLength;\n                var V1, z1 = [], G1 = [], H1 = [], q1 = 0;\n                function W1() {\n                    return E1 || 0 < q1;\n                }\n                var X1, Y1, K1 = 0, J1 = null, Z1 = null;\n                function Q1() {\n                    K1++, l1.monitorRunDependencies && l1.monitorRunDependencies(K1);\n                }\n                function ee1() {\n                    if (K1--, l1.monitorRunDependencies && l1.monitorRunDependencies(K1), 0 == K1 && (null !== J1 && (clearInterval(J1), J1 = null), Z1)) {\n                        var e1 = Z1;\n                        Z1 = null, e1();\n                    }\n                }\n                function te1(e1) {\n                    throw l1.onAbort && l1.onAbort(e1), I1(e1 = \"Aborted(\" + e1 + \")\"), M1 = !0, F1 = 1, e1 = new WebAssembly.RuntimeError(e1 + \". Build with -sASSERTIONS for more info.\"), u1(e1), e1;\n                }\n                function ne1(e1) {\n                    return e1.startsWith(\"data:application/octet-stream;base64,\");\n                }\n                function re1(e1) {\n                    if (e1 == X1 && A1) return new Uint8Array(A1);\n                    if (d1) return d1(e1);\n                    throw \"both async and sync fetching of the wasm failed\";\n                }\n                function oe1(e1, t1, n1) {\n                    return (function(e1) {\n                        if (!A1 && (b1 || m1)) {\n                            if (\"function\" == typeof fetch && !e1.startsWith(\"file://\")) return fetch(e1, {\n                                credentials: \"same-origin\"\n                            }).then((t1)=>{\n                                if (!t1.ok) throw \"failed to load wasm binary file at '\" + e1 + \"'\";\n                                return t1.arrayBuffer();\n                            }).catch(()=>re1(e1));\n                            if (p1) return new Promise((t1, n1)=>{\n                                p1(e1, (e1)=>t1(new Uint8Array(e1)), n1);\n                            });\n                        }\n                        return Promise.resolve().then(()=>re1(e1));\n                    })(e1).then((e1)=>WebAssembly.instantiate(e1, t1)).then((e1)=>e1).then(n1, (e1)=>{\n                        I1(\"failed to asynchronously prepare wasm: \" + e1), te1(e1);\n                    });\n                }\n                function ie1(e1) {\n                    this.name = \"ExitStatus\", this.message = `Program terminated with exit(${e1})`, this.status = e1;\n                }\n                function se1(e1) {\n                    e1.terminate(), e1.onmessage = ()=>{};\n                }\n                function ae1(e1) {\n                    (e1 = he1.Fa[e1]) || te1(), he1.fb(e1);\n                }\n                function ue1(e1) {\n                    var t1 = he1.Za();\n                    if (!t1) return 6;\n                    he1.Ia.push(t1), he1.Fa[e1.Ha] = t1, t1.Ha = e1.Ha;\n                    var n1 = {\n                        cmd: \"run\",\n                        start_routine: e1.gb,\n                        arg: e1.Ya,\n                        pthread_ptr: e1.Ha\n                    };\n                    return y1 && t1.unref(), t1.postMessage(n1, e1.mb), 0;\n                }\n                ne1(X1 = \"ort-wasm-threaded.wasm\") || (X1 = T1(X1));\n                var le1 = \"undefined\" != typeof TextDecoder ? new TextDecoder(\"utf8\") : void 0, ce1 = (e1, t1, n1)=>{\n                    var r1 = (t1 >>>= 0) + n1;\n                    for(n1 = t1; e1[n1] && !(n1 >= r1);)++n1;\n                    if (16 < n1 - t1 && e1.buffer && le1) return le1.decode(e1.buffer instanceof SharedArrayBuffer ? e1.slice(t1, n1) : e1.subarray(t1, n1));\n                    for(r1 = \"\"; t1 < n1;){\n                        var o1 = e1[t1++];\n                        if (128 & o1) {\n                            var i1 = 63 & e1[t1++];\n                            if (192 == (224 & o1)) r1 += String.fromCharCode((31 & o1) << 6 | i1);\n                            else {\n                                var s1 = 63 & e1[t1++];\n                                65536 > (o1 = 224 == (240 & o1) ? (15 & o1) << 12 | i1 << 6 | s1 : (7 & o1) << 18 | i1 << 12 | s1 << 6 | 63 & e1[t1++]) ? r1 += String.fromCharCode(o1) : (o1 -= 65536, r1 += String.fromCharCode(55296 | o1 >> 10, 56320 | 1023 & o1));\n                            }\n                        } else r1 += String.fromCharCode(o1);\n                    }\n                    return r1;\n                }, pe1 = (e1, t1)=>(e1 >>>= 0) ? ce1(r1(), e1, t1) : \"\";\n                function de1(e1) {\n                    if (_1) return We1(1, 1, e1);\n                    F1 = e1, W1() || (he1.hb(), l1.onExit && l1.onExit(e1), M1 = !0), g1(e1, new ie1(e1));\n                }\n                var fe1 = (e1)=>{\n                    if (F1 = e1, _1) throw be1(e1), \"unwind\";\n                    de1(e1);\n                }, he1 = {\n                    La: [],\n                    Ia: [],\n                    Ta: [],\n                    Fa: {},\n                    Pa: function() {\n                        _1 ? he1.ab() : he1.$a();\n                    },\n                    $a: function() {\n                        z1.unshift(()=>{\n                            Q1(), he1.bb(()=>ee1());\n                        });\n                    },\n                    ab: function() {\n                        he1.receiveObjectTransfer = he1.eb, he1.threadInitTLS = he1.Sa, he1.setExitStatus = he1.Ra, E1 = !1;\n                    },\n                    Ra: function(e1) {\n                        F1 = e1;\n                    },\n                    rb: [\n                        \"$terminateWorker\"\n                    ],\n                    hb: function() {\n                        for (var e1 of he1.Ia)se1(e1);\n                        for (e1 of he1.La)se1(e1);\n                        he1.La = [], he1.Ia = [], he1.Fa = [];\n                    },\n                    fb: function(e1) {\n                        var t1 = e1.Ha;\n                        delete he1.Fa[t1], he1.La.push(e1), he1.Ia.splice(he1.Ia.indexOf(e1), 1), e1.Ha = 0, mt1(t1);\n                    },\n                    eb: function() {},\n                    Sa: function() {\n                        he1.Ta.forEach((e1)=>e1());\n                    },\n                    cb: (e1)=>new Promise((t1)=>{\n                            e1.onmessage = (n1)=>{\n                                var r1 = (n1 = n1.data).cmd;\n                                if (n1.targetThread && n1.targetThread != dt1()) {\n                                    var o1 = he1.Fa[n1.qb];\n                                    o1 ? o1.postMessage(n1, n1.transferList) : I1('Internal error! Worker sent a message \"' + r1 + '\" to target pthread ' + n1.targetThread + \", but that thread no longer exists!\");\n                                } else \"checkMailbox\" === r1 ? Me1() : \"spawnThread\" === r1 ? ue1(n1) : \"cleanupThread\" === r1 ? ae1(n1.thread) : \"killThread\" === r1 ? (n1 = n1.thread, r1 = he1.Fa[n1], delete he1.Fa[n1], se1(r1), mt1(n1), he1.Ia.splice(he1.Ia.indexOf(r1), 1), r1.Ha = 0) : \"cancelThread\" === r1 ? he1.Fa[n1.thread].postMessage({\n                                    cmd: \"cancel\"\n                                }) : \"loaded\" === r1 ? (e1.loaded = !0, t1(e1)) : \"alert\" === r1 ? alert(\"Thread \" + n1.threadId + \": \" + n1.text) : \"setimmediate\" === n1.target ? e1.postMessage(n1) : \"callHandler\" === r1 ? l1[n1.handler](...n1.args) : r1 && I1(\"worker sent an unknown command \" + r1);\n                            }, e1.onerror = (e1)=>{\n                                throw I1(\"worker sent an error! \" + e1.filename + \":\" + e1.lineno + \": \" + e1.message), e1;\n                            }, y1 && (e1.on(\"message\", function(t1) {\n                                e1.onmessage({\n                                    data: t1\n                                });\n                            }), e1.on(\"error\", function(t1) {\n                                e1.onerror(t1);\n                            }));\n                            var n1, r1 = [];\n                            for (n1 of [\n                                \"onExit\",\n                                \"onAbort\",\n                                \"print\",\n                                \"printErr\"\n                            ])l1.hasOwnProperty(n1) && r1.push(n1);\n                            e1.postMessage({\n                                cmd: \"load\",\n                                handlers: r1,\n                                urlOrBlob: l1.mainScriptUrlOrBlob || _scriptDir1,\n                                wasmMemory: D1,\n                                wasmModule: k1\n                            });\n                        }),\n                    bb: function(e1) {\n                        e1();\n                    },\n                    Xa: function() {\n                        var e1 = T1(\"ort-wasm-threaded.worker.js\");\n                        e1 = new Worker(e1), he1.La.push(e1);\n                    },\n                    Za: function() {\n                        return 0 == he1.La.length && (he1.Xa(), he1.cb(he1.La[0])), he1.La.pop();\n                    }\n                };\n                l1.PThread = he1;\n                var ge1 = (e1)=>{\n                    for(; 0 < e1.length;)e1.shift()(l1);\n                };\n                function be1(e1) {\n                    if (_1) return We1(2, 0, e1);\n                    fe1(e1);\n                }\n                l1.establishStackSpace = function() {\n                    var e1 = dt1(), t1 = o1()[e1 + 52 >> 2 >>> 0];\n                    e1 = o1()[e1 + 56 >> 2 >>> 0], Tt1(t1, t1 - e1), wt1(t1);\n                };\n                var me1 = [];\n                function ye1(e1) {\n                    this.Oa = e1 - 24, this.Wa = function(e1) {\n                        i1()[this.Oa + 4 >> 2 >>> 0] = e1;\n                    }, this.Va = function(e1) {\n                        i1()[this.Oa + 8 >> 2 >>> 0] = e1;\n                    }, this.Pa = function(e1, t1) {\n                        this.Ua(), this.Wa(e1), this.Va(t1);\n                    }, this.Ua = function() {\n                        i1()[this.Oa + 16 >> 2 >>> 0] = 0;\n                    };\n                }\n                function _e1(e1, t1, n1, r1) {\n                    return _1 ? We1(3, 1, e1, t1, n1, r1) : ve1(e1, t1, n1, r1);\n                }\n                function ve1(e1, t1, n1, r1) {\n                    if (e1 >>>= 0, t1 >>>= 0, n1 >>>= 0, r1 >>>= 0, \"undefined\" == typeof SharedArrayBuffer) return I1(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"), 6;\n                    var o1 = [];\n                    return _1 && 0 === o1.length ? _e1(e1, t1, n1, r1) : (e1 = {\n                        gb: n1,\n                        Ha: e1,\n                        Ya: r1,\n                        mb: o1\n                    }, _1 ? (e1.ob = \"spawnThread\", postMessage(e1, o1), 0) : ue1(e1));\n                }\n                function Te1(e1, t1, n1) {\n                    return _1 ? We1(4, 1, e1, t1, n1) : 0;\n                }\n                function xe1(e1, t1) {\n                    if (_1) return We1(5, 1, e1, t1);\n                }\n                l1.invokeEntryPoint = function(e1, t1) {\n                    var n1 = me1[e1];\n                    n1 || (e1 >= me1.length && (me1.length = e1 + 1), me1[e1] = n1 = V1.get(e1)), e1 = n1(t1), W1() ? he1.Ra(e1) : yt1(e1);\n                };\n                var we1 = (e1)=>{\n                    for(var t1 = 0, n1 = 0; n1 < e1.length; ++n1){\n                        var r1 = e1.charCodeAt(n1);\n                        127 >= r1 ? t1++ : 2047 >= r1 ? t1 += 2 : 55296 <= r1 && 57343 >= r1 ? (t1 += 4, ++n1) : t1 += 3;\n                    }\n                    return t1;\n                }, Oe1 = (e1, t1, n1, r1)=>{\n                    if (!(0 < r1)) return 0;\n                    var o1 = n1 >>>= 0;\n                    r1 = n1 + r1 - 1;\n                    for(var i1 = 0; i1 < e1.length; ++i1){\n                        var s1 = e1.charCodeAt(i1);\n                        if (55296 <= s1 && 57343 >= s1 && (s1 = 65536 + ((1023 & s1) << 10) | 1023 & e1.charCodeAt(++i1)), 127 >= s1) {\n                            if (n1 >= r1) break;\n                            t1[n1++ >>> 0] = s1;\n                        } else {\n                            if (2047 >= s1) {\n                                if (n1 + 1 >= r1) break;\n                                t1[n1++ >>> 0] = 192 | s1 >> 6;\n                            } else {\n                                if (65535 >= s1) {\n                                    if (n1 + 2 >= r1) break;\n                                    t1[n1++ >>> 0] = 224 | s1 >> 12;\n                                } else {\n                                    if (n1 + 3 >= r1) break;\n                                    t1[n1++ >>> 0] = 240 | s1 >> 18, t1[n1++ >>> 0] = 128 | s1 >> 12 & 63;\n                                }\n                                t1[n1++ >>> 0] = 128 | s1 >> 6 & 63;\n                            }\n                            t1[n1++ >>> 0] = 128 | 63 & s1;\n                        }\n                    }\n                    return t1[n1 >>> 0] = 0, n1 - o1;\n                }, Se1 = (e1, t1, n1)=>Oe1(e1, r1(), t1, n1);\n                function Ae1(e1, t1) {\n                    if (_1) return We1(6, 1, e1, t1);\n                }\n                function Pe1(e1, t1, n1) {\n                    if (_1) return We1(7, 1, e1, t1, n1);\n                }\n                function Ie1(e1, t1, n1) {\n                    return _1 ? We1(8, 1, e1, t1, n1) : 0;\n                }\n                function Ee1(e1, t1) {\n                    if (_1) return We1(9, 1, e1, t1);\n                }\n                function De1(e1, t1, n1) {\n                    if (_1) return We1(10, 1, e1, t1, n1);\n                }\n                function $e1(e1, t1, n1, r1) {\n                    if (_1) return We1(11, 1, e1, t1, n1, r1);\n                }\n                function ke1(e1, t1, n1, r1) {\n                    if (_1) return We1(12, 1, e1, t1, n1, r1);\n                }\n                function Fe1(e1, t1, n1, r1) {\n                    if (_1) return We1(13, 1, e1, t1, n1, r1);\n                }\n                function Ne1(e1) {\n                    if (_1) return We1(14, 1, e1);\n                }\n                function Le1(e1, t1) {\n                    if (_1) return We1(15, 1, e1, t1);\n                }\n                function Ce1(e1, t1, n1) {\n                    if (_1) return We1(16, 1, e1, t1, n1);\n                }\n                var Re1 = (e1)=>{\n                    if (!M1) try {\n                        if (e1(), !W1()) try {\n                            _1 ? yt1(F1) : fe1(F1);\n                        } catch (e1) {\n                            e1 instanceof ie1 || \"unwind\" == e1 || g1(1, e1);\n                        }\n                    } catch (e1) {\n                        e1 instanceof ie1 || \"unwind\" == e1 || g1(1, e1);\n                    }\n                };\n                function je1(e1) {\n                    e1 >>>= 0, \"function\" == typeof Atomics.nb && (Atomics.nb(o1(), e1 >> 2, e1).value.then(Me1), e1 += 128, Atomics.store(o1(), e1 >> 2, 1));\n                }\n                function Me1() {\n                    var e1 = dt1();\n                    e1 && (je1(e1), Re1(()=>_t1()));\n                }\n                l1.__emscripten_thread_mailbox_await = je1, l1.checkMailbox = Me1;\n                var Ue1 = (e1)=>0 == e1 % 4 && (0 != e1 % 100 || 0 == e1 % 400), Be1 = [\n                    0,\n                    31,\n                    60,\n                    91,\n                    121,\n                    152,\n                    182,\n                    213,\n                    244,\n                    274,\n                    305,\n                    335\n                ], Ve1 = [\n                    0,\n                    31,\n                    59,\n                    90,\n                    120,\n                    151,\n                    181,\n                    212,\n                    243,\n                    273,\n                    304,\n                    334\n                ];\n                function ze1(e1, t1, n1, r1, o1, i1, s1, a1) {\n                    return _1 ? We1(17, 1, e1, t1, n1, r1, o1, i1, s1, a1) : -52;\n                }\n                function Ge1(e1, t1, n1, r1, o1, i1, s1) {\n                    if (_1) return We1(18, 1, e1, t1, n1, r1, o1, i1, s1);\n                }\n                var He1 = (e1)=>{\n                    var t1 = we1(e1) + 1, n1 = ft1(t1);\n                    return n1 && Se1(e1, n1, t1), n1;\n                }, qe1 = (e1)=>{\n                    var t1 = xt1();\n                    return e1 = e1(), wt1(t1), e1;\n                };\n                function We1(e1, t1) {\n                    var n1 = arguments.length - 2, r1 = arguments;\n                    return qe1(()=>{\n                        for(var o1 = Ot1(8 * n1), i1 = o1 >> 3, a1 = 0; a1 < n1; a1++){\n                            var u1 = r1[2 + a1];\n                            s1()[i1 + a1 >>> 0] = u1;\n                        }\n                        return bt1(e1, n1, o1, t1);\n                    });\n                }\n                var Xe1, Ye1 = [], Ke1 = {}, Je1 = ()=>{\n                    if (!Xe1) {\n                        var e1, t1 = {\n                            USER: \"web_user\",\n                            LOGNAME: \"web_user\",\n                            PATH: \"/\",\n                            PWD: \"/\",\n                            HOME: \"/home/web_user\",\n                            LANG: (\"object\" == typeof navigator && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\",\n                            _: h1 || \"./this.program\"\n                        };\n                        for(e1 in Ke1)void 0 === Ke1[e1] ? delete t1[e1] : t1[e1] = Ke1[e1];\n                        var n1 = [];\n                        for(e1 in t1)n1.push(`${e1}=${t1[e1]}`);\n                        Xe1 = n1;\n                    }\n                    return Xe1;\n                };\n                function Ze1(e1, n1) {\n                    if (_1) return We1(19, 1, e1, n1);\n                    e1 >>>= 0, n1 >>>= 0;\n                    var r1 = 0;\n                    return Je1().forEach(function(o1, s1) {\n                        var a1 = n1 + r1;\n                        for(s1 = i1()[e1 + 4 * s1 >> 2 >>> 0] = a1, a1 = 0; a1 < o1.length; ++a1)t1()[s1++ >> 0 >>> 0] = o1.charCodeAt(a1);\n                        t1()[s1 >> 0 >>> 0] = 0, r1 += o1.length + 1;\n                    }), 0;\n                }\n                function Qe1(e1, t1) {\n                    if (_1) return We1(20, 1, e1, t1);\n                    e1 >>>= 0, t1 >>>= 0;\n                    var n1 = Je1();\n                    i1()[e1 >> 2 >>> 0] = n1.length;\n                    var r1 = 0;\n                    return n1.forEach(function(e1) {\n                        r1 += e1.length + 1;\n                    }), i1()[t1 >> 2 >>> 0] = r1, 0;\n                }\n                function et1(e1) {\n                    return _1 ? We1(21, 1, e1) : 52;\n                }\n                function tt1(e1, t1, n1, r1) {\n                    return _1 ? We1(22, 1, e1, t1, n1, r1) : 52;\n                }\n                function nt1(e1, t1, n1, r1, o1) {\n                    return _1 ? We1(23, 1, e1, t1, n1, r1, o1) : 70;\n                }\n                var rt1 = [\n                    null,\n                    [],\n                    []\n                ];\n                function ot1(e1, t1, n1, o1) {\n                    if (_1) return We1(24, 1, e1, t1, n1, o1);\n                    t1 >>>= 0, n1 >>>= 0, o1 >>>= 0;\n                    for(var s1 = 0, a1 = 0; a1 < n1; a1++){\n                        var u1 = i1()[t1 >> 2 >>> 0], l1 = i1()[t1 + 4 >> 2 >>> 0];\n                        t1 += 8;\n                        for(var c1 = 0; c1 < l1; c1++){\n                            var p1 = r1()[u1 + c1 >>> 0], d1 = rt1[e1];\n                            0 === p1 || 10 === p1 ? ((1 === e1 ? P1 : I1)(ce1(d1, 0)), d1.length = 0) : d1.push(p1);\n                        }\n                        s1 += l1;\n                    }\n                    return i1()[o1 >> 2 >>> 0] = s1, 0;\n                }\n                var it1 = (e1)=>(it1 = (()=>{\n                        if (\"object\" == typeof crypto && \"function\" == typeof crypto.getRandomValues) return (e1)=>(e1.set(crypto.getRandomValues(new Uint8Array(e1.byteLength))), e1);\n                        if (y1) try {\n                            var e1 = n1(6113);\n                            if (e1.randomFillSync) return (t1)=>e1.randomFillSync(t1);\n                            var t1 = e1.randomBytes;\n                            return (e1)=>(e1.set(t1(e1.byteLength)), e1);\n                        } catch (e1) {}\n                        te1(\"initRandomDevice\");\n                    })())(e1), st1 = [\n                    31,\n                    29,\n                    31,\n                    30,\n                    31,\n                    30,\n                    31,\n                    31,\n                    30,\n                    31,\n                    30,\n                    31\n                ], at1 = [\n                    31,\n                    28,\n                    31,\n                    30,\n                    31,\n                    30,\n                    31,\n                    31,\n                    30,\n                    31,\n                    30,\n                    31\n                ], ut1 = (e1, n1)=>{\n                    t1().set(e1, n1 >>> 0);\n                };\n                function lt1(e1, t1, n1, r1) {\n                    function i1(e1, t1, n1) {\n                        for(e1 = \"number\" == typeof e1 ? e1.toString() : e1 || \"\"; e1.length < t1;)e1 = n1[0] + e1;\n                        return e1;\n                    }\n                    function s1(e1, t1) {\n                        return i1(e1, t1, \"0\");\n                    }\n                    function a1(e1, t1) {\n                        function n1(e1) {\n                            return 0 > e1 ? -1 : 0 < e1 ? 1 : 0;\n                        }\n                        var r1;\n                        return 0 === (r1 = n1(e1.getFullYear() - t1.getFullYear())) && 0 === (r1 = n1(e1.getMonth() - t1.getMonth())) && (r1 = n1(e1.getDate() - t1.getDate())), r1;\n                    }\n                    function u1(e1) {\n                        switch(e1.getDay()){\n                            case 0:\n                                return new Date(e1.getFullYear() - 1, 11, 29);\n                            case 1:\n                                return e1;\n                            case 2:\n                                return new Date(e1.getFullYear(), 0, 3);\n                            case 3:\n                                return new Date(e1.getFullYear(), 0, 2);\n                            case 4:\n                                return new Date(e1.getFullYear(), 0, 1);\n                            case 5:\n                                return new Date(e1.getFullYear() - 1, 11, 31);\n                            case 6:\n                                return new Date(e1.getFullYear() - 1, 11, 30);\n                        }\n                    }\n                    function l1(e1) {\n                        var t1 = e1.Ja;\n                        for(e1 = new Date(new Date(e1.Ka + 1900, 0, 1).getTime()); 0 < t1;){\n                            var n1 = e1.getMonth(), r1 = (Ue1(e1.getFullYear()) ? st1 : at1)[n1];\n                            if (!(t1 > r1 - e1.getDate())) {\n                                e1.setDate(e1.getDate() + t1);\n                                break;\n                            }\n                            t1 -= r1 - e1.getDate() + 1, e1.setDate(1), 11 > n1 ? e1.setMonth(n1 + 1) : (e1.setMonth(0), e1.setFullYear(e1.getFullYear() + 1));\n                        }\n                        return n1 = new Date(e1.getFullYear() + 1, 0, 4), t1 = u1(new Date(e1.getFullYear(), 0, 4)), n1 = u1(n1), 0 >= a1(t1, e1) ? 0 >= a1(n1, e1) ? e1.getFullYear() + 1 : e1.getFullYear() : e1.getFullYear() - 1;\n                    }\n                    e1 >>>= 0, t1 >>>= 0, n1 >>>= 0, r1 >>>= 0;\n                    var c1 = o1()[r1 + 40 >> 2 >>> 0];\n                    for(var p1 in r1 = {\n                        kb: o1()[r1 >> 2 >>> 0],\n                        jb: o1()[r1 + 4 >> 2 >>> 0],\n                        Ma: o1()[r1 + 8 >> 2 >>> 0],\n                        Qa: o1()[r1 + 12 >> 2 >>> 0],\n                        Na: o1()[r1 + 16 >> 2 >>> 0],\n                        Ka: o1()[r1 + 20 >> 2 >>> 0],\n                        Ga: o1()[r1 + 24 >> 2 >>> 0],\n                        Ja: o1()[r1 + 28 >> 2 >>> 0],\n                        sb: o1()[r1 + 32 >> 2 >>> 0],\n                        ib: o1()[r1 + 36 >> 2 >>> 0],\n                        lb: c1 ? pe1(c1) : \"\"\n                    }, n1 = pe1(n1), c1 = {\n                        \"%c\": \"%a %b %d %H:%M:%S %Y\",\n                        \"%D\": \"%m/%d/%y\",\n                        \"%F\": \"%Y-%m-%d\",\n                        \"%h\": \"%b\",\n                        \"%r\": \"%I:%M:%S %p\",\n                        \"%R\": \"%H:%M\",\n                        \"%T\": \"%H:%M:%S\",\n                        \"%x\": \"%m/%d/%y\",\n                        \"%X\": \"%H:%M:%S\",\n                        \"%Ec\": \"%c\",\n                        \"%EC\": \"%C\",\n                        \"%Ex\": \"%m/%d/%y\",\n                        \"%EX\": \"%H:%M:%S\",\n                        \"%Ey\": \"%y\",\n                        \"%EY\": \"%Y\",\n                        \"%Od\": \"%d\",\n                        \"%Oe\": \"%e\",\n                        \"%OH\": \"%H\",\n                        \"%OI\": \"%I\",\n                        \"%Om\": \"%m\",\n                        \"%OM\": \"%M\",\n                        \"%OS\": \"%S\",\n                        \"%Ou\": \"%u\",\n                        \"%OU\": \"%U\",\n                        \"%OV\": \"%V\",\n                        \"%Ow\": \"%w\",\n                        \"%OW\": \"%W\",\n                        \"%Oy\": \"%y\"\n                    })n1 = n1.replace(new RegExp(p1, \"g\"), c1[p1]);\n                    var d1 = \"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"), f1 = \"January February March April May June July August September October November December\".split(\" \");\n                    for(p1 in c1 = {\n                        \"%a\": (e1)=>d1[e1.Ga].substring(0, 3),\n                        \"%A\": (e1)=>d1[e1.Ga],\n                        \"%b\": (e1)=>f1[e1.Na].substring(0, 3),\n                        \"%B\": (e1)=>f1[e1.Na],\n                        \"%C\": (e1)=>s1((e1.Ka + 1900) / 100 | 0, 2),\n                        \"%d\": (e1)=>s1(e1.Qa, 2),\n                        \"%e\": (e1)=>i1(e1.Qa, 2, \" \"),\n                        \"%g\": (e1)=>l1(e1).toString().substring(2),\n                        \"%G\": (e1)=>l1(e1),\n                        \"%H\": (e1)=>s1(e1.Ma, 2),\n                        \"%I\": (e1)=>(0 == (e1 = e1.Ma) ? e1 = 12 : 12 < e1 && (e1 -= 12), s1(e1, 2)),\n                        \"%j\": (e1)=>{\n                            for(var t1 = 0, n1 = 0; n1 <= e1.Na - 1; t1 += (Ue1(e1.Ka + 1900) ? st1 : at1)[n1++]);\n                            return s1(e1.Qa + t1, 3);\n                        },\n                        \"%m\": (e1)=>s1(e1.Na + 1, 2),\n                        \"%M\": (e1)=>s1(e1.jb, 2),\n                        \"%n\": ()=>\"\\n\",\n                        \"%p\": (e1)=>0 <= e1.Ma && 12 > e1.Ma ? \"AM\" : \"PM\",\n                        \"%S\": (e1)=>s1(e1.kb, 2),\n                        \"%t\": ()=>\"\t\",\n                        \"%u\": (e1)=>e1.Ga || 7,\n                        \"%U\": (e1)=>s1(Math.floor((e1.Ja + 7 - e1.Ga) / 7), 2),\n                        \"%V\": (e1)=>{\n                            var t1 = Math.floor((e1.Ja + 7 - (e1.Ga + 6) % 7) / 7);\n                            if (2 >= (e1.Ga + 371 - e1.Ja - 2) % 7 && t1++, t1) 53 == t1 && (4 == (n1 = (e1.Ga + 371 - e1.Ja) % 7) || 3 == n1 && Ue1(e1.Ka) || (t1 = 1));\n                            else {\n                                t1 = 52;\n                                var n1 = (e1.Ga + 7 - e1.Ja - 1) % 7;\n                                (4 == n1 || 5 == n1 && Ue1(e1.Ka % 400 - 1)) && t1++;\n                            }\n                            return s1(t1, 2);\n                        },\n                        \"%w\": (e1)=>e1.Ga,\n                        \"%W\": (e1)=>s1(Math.floor((e1.Ja + 7 - (e1.Ga + 6) % 7) / 7), 2),\n                        \"%y\": (e1)=>(e1.Ka + 1900).toString().substring(2),\n                        \"%Y\": (e1)=>e1.Ka + 1900,\n                        \"%z\": (e1)=>{\n                            var t1 = 0 <= (e1 = e1.ib);\n                            return e1 = Math.abs(e1) / 60, (t1 ? \"+\" : \"-\") + String(\"0000\" + (e1 / 60 * 100 + e1 % 60)).slice(-4);\n                        },\n                        \"%Z\": (e1)=>e1.lb,\n                        \"%%\": ()=>\"%\"\n                    }, n1 = n1.replace(/%%/g, \"\\x00\\x00\"), c1)n1.includes(p1) && (n1 = n1.replace(new RegExp(p1, \"g\"), c1[p1](r1)));\n                    return p1 = function(e1) {\n                        var t1 = Array(we1(e1) + 1);\n                        return Oe1(e1, t1, 0, t1.length), t1;\n                    }(n1 = n1.replace(/\\0\\0/g, \"%\")), p1.length > t1 ? 0 : (ut1(p1, e1), p1.length - 1);\n                }\n                he1.Pa();\n                var ct1 = [\n                    null,\n                    de1,\n                    be1,\n                    _e1,\n                    Te1,\n                    xe1,\n                    Ae1,\n                    Pe1,\n                    Ie1,\n                    Ee1,\n                    De1,\n                    $e1,\n                    ke1,\n                    Fe1,\n                    Ne1,\n                    Le1,\n                    Ce1,\n                    ze1,\n                    Ge1,\n                    Ze1,\n                    Qe1,\n                    et1,\n                    tt1,\n                    nt1,\n                    ot1\n                ], pt1 = {\n                    b: function(e1, t1, n1) {\n                        throw new ye1(e1 >>>= 0).Pa(t1 >>> 0, n1 >>> 0), e1;\n                    },\n                    N: function(e1) {\n                        ht1(e1 >>> 0, !m1, 1, !b1, 131072, !1), he1.Sa();\n                    },\n                    k: function(e1) {\n                        e1 >>>= 0, _1 ? postMessage({\n                            cmd: \"cleanupThread\",\n                            thread: e1\n                        }) : ae1(e1);\n                    },\n                    I: ve1,\n                    h: Te1,\n                    T: xe1,\n                    E: Ae1,\n                    G: Pe1,\n                    U: Ie1,\n                    R: Ee1,\n                    J: De1,\n                    Q: $e1,\n                    o: ke1,\n                    F: Fe1,\n                    C: Ne1,\n                    S: Le1,\n                    D: Ce1,\n                    q: ()=>!0,\n                    A: function(e1, t1) {\n                        (e1 >>>= 0) == t1 >>> 0 ? setTimeout(()=>Me1()) : _1 ? postMessage({\n                            targetThread: e1,\n                            cmd: \"checkMailbox\"\n                        }) : (e1 = he1.Fa[e1]) && e1.postMessage({\n                            cmd: \"checkMailbox\"\n                        });\n                    },\n                    L: function() {\n                        return -1;\n                    },\n                    M: je1,\n                    p: function(e1) {\n                        y1 && he1.Fa[e1 >>> 0].ref();\n                    },\n                    t: function(e1, t1, n1) {\n                        e1 = t1 + 2097152 >>> 0 < 4194305 - !!e1 ? (e1 >>> 0) + 4294967296 * t1 : NaN, n1 >>>= 0, e1 = new Date(1e3 * e1), o1()[n1 >> 2 >>> 0] = e1.getUTCSeconds(), o1()[n1 + 4 >> 2 >>> 0] = e1.getUTCMinutes(), o1()[n1 + 8 >> 2 >>> 0] = e1.getUTCHours(), o1()[n1 + 12 >> 2 >>> 0] = e1.getUTCDate(), o1()[n1 + 16 >> 2 >>> 0] = e1.getUTCMonth(), o1()[n1 + 20 >> 2 >>> 0] = e1.getUTCFullYear() - 1900, o1()[n1 + 24 >> 2 >>> 0] = e1.getUTCDay(), e1 = (e1.getTime() - Date.UTC(e1.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0, o1()[n1 + 28 >> 2 >>> 0] = e1;\n                    },\n                    u: function(e1, t1, n1) {\n                        e1 = t1 + 2097152 >>> 0 < 4194305 - !!e1 ? (e1 >>> 0) + 4294967296 * t1 : NaN, n1 >>>= 0, e1 = new Date(1e3 * e1), o1()[n1 >> 2 >>> 0] = e1.getSeconds(), o1()[n1 + 4 >> 2 >>> 0] = e1.getMinutes(), o1()[n1 + 8 >> 2 >>> 0] = e1.getHours(), o1()[n1 + 12 >> 2 >>> 0] = e1.getDate(), o1()[n1 + 16 >> 2 >>> 0] = e1.getMonth(), o1()[n1 + 20 >> 2 >>> 0] = e1.getFullYear() - 1900, o1()[n1 + 24 >> 2 >>> 0] = e1.getDay(), t1 = (Ue1(e1.getFullYear()) ? Be1 : Ve1)[e1.getMonth()] + e1.getDate() - 1 | 0, o1()[n1 + 28 >> 2 >>> 0] = t1, o1()[n1 + 36 >> 2 >>> 0] = -60 * e1.getTimezoneOffset(), t1 = new Date(e1.getFullYear(), 6, 1).getTimezoneOffset();\n                        var r1 = new Date(e1.getFullYear(), 0, 1).getTimezoneOffset();\n                        e1 = 0 | (t1 != r1 && e1.getTimezoneOffset() == Math.min(r1, t1)), o1()[n1 + 32 >> 2 >>> 0] = e1;\n                    },\n                    v: function(e1) {\n                        e1 >>>= 0;\n                        var t1 = new Date(o1()[e1 + 20 >> 2 >>> 0] + 1900, o1()[e1 + 16 >> 2 >>> 0], o1()[e1 + 12 >> 2 >>> 0], o1()[e1 + 8 >> 2 >>> 0], o1()[e1 + 4 >> 2 >>> 0], o1()[e1 >> 2 >>> 0], 0), n1 = o1()[e1 + 32 >> 2 >>> 0], r1 = t1.getTimezoneOffset(), i1 = new Date(t1.getFullYear(), 6, 1).getTimezoneOffset(), s1 = new Date(t1.getFullYear(), 0, 1).getTimezoneOffset(), a1 = Math.min(s1, i1);\n                        return 0 > n1 ? o1()[e1 + 32 >> 2 >>> 0] = Number(i1 != s1 && a1 == r1) : 0 < n1 != (a1 == r1) && (i1 = Math.max(s1, i1), t1.setTime(t1.getTime() + 6e4 * ((0 < n1 ? a1 : i1) - r1))), o1()[e1 + 24 >> 2 >>> 0] = t1.getDay(), n1 = (Ue1(t1.getFullYear()) ? Be1 : Ve1)[t1.getMonth()] + t1.getDate() - 1 | 0, o1()[e1 + 28 >> 2 >>> 0] = n1, o1()[e1 >> 2 >>> 0] = t1.getSeconds(), o1()[e1 + 4 >> 2 >>> 0] = t1.getMinutes(), o1()[e1 + 8 >> 2 >>> 0] = t1.getHours(), o1()[e1 + 12 >> 2 >>> 0] = t1.getDate(), o1()[e1 + 16 >> 2 >>> 0] = t1.getMonth(), o1()[e1 + 20 >> 2 >>> 0] = t1.getYear(), e1 = t1.getTime() / 1e3, vt1((Y1 = e1, 1 <= +Math.abs(Y1) ? 0 < Y1 ? +Math.floor(Y1 / 4294967296) >>> 0 : ~~+Math.ceil((Y1 - +(~~Y1 >>> 0)) / 4294967296) >>> 0 : 0)), e1 >>> 0;\n                    },\n                    r: ze1,\n                    s: Ge1,\n                    z: function(e1, t1, n1) {\n                        function r1(e1) {\n                            return (e1 = e1.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? e1[1] : \"GMT\";\n                        }\n                        e1 >>>= 0, t1 >>>= 0, n1 >>>= 0;\n                        var s1 = (new Date).getFullYear(), a1 = new Date(s1, 0, 1), u1 = new Date(s1, 6, 1);\n                        s1 = a1.getTimezoneOffset();\n                        var l1 = u1.getTimezoneOffset(), c1 = Math.max(s1, l1);\n                        i1()[e1 >> 2 >>> 0] = 60 * c1, o1()[t1 >> 2 >>> 0] = Number(s1 != l1), e1 = r1(a1), t1 = r1(u1), e1 = He1(e1), t1 = He1(t1), l1 < s1 ? (i1()[n1 >> 2 >>> 0] = e1, i1()[n1 + 4 >> 2 >>> 0] = t1) : (i1()[n1 >> 2 >>> 0] = t1, i1()[n1 + 4 >> 2 >>> 0] = e1);\n                    },\n                    c: ()=>{\n                        te1(\"\");\n                    },\n                    l: function() {},\n                    i: function() {\n                        return Date.now();\n                    },\n                    V: ()=>{\n                        throw q1 += 1, \"unwind\";\n                    },\n                    B: function() {\n                        return 4294901760;\n                    },\n                    e: ()=>performance.timeOrigin + performance.now(),\n                    f: function() {\n                        return y1 ? n1(9719).cpus().length : navigator.hardwareConcurrency;\n                    },\n                    K: function(e1, t1, n1, r1) {\n                        for(he1.pb = t1 >>> 0, Ye1.length = n1, t1 = r1 >>> 0 >> 3, r1 = 0; r1 < n1; r1++)Ye1[r1] = s1()[t1 + r1 >>> 0];\n                        return ct1[e1].apply(null, Ye1);\n                    },\n                    y: function(e1) {\n                        e1 >>>= 0;\n                        var t1 = r1().length;\n                        if (e1 <= t1 || 4294901760 < e1) return !1;\n                        for(var n1 = 1; 4 >= n1; n1 *= 2){\n                            var o1 = t1 * (1 + .2 / n1);\n                            o1 = Math.min(o1, e1 + 100663296);\n                            var i1 = Math;\n                            o1 = Math.max(e1, o1);\n                            e: {\n                                i1 = i1.min.call(i1, 4294901760, o1 + (65536 - o1 % 65536) % 65536) - D1.buffer.byteLength + 65535 >>> 16;\n                                try {\n                                    D1.grow(i1), U1();\n                                    var s1 = 1;\n                                    break e;\n                                } catch (e1) {}\n                                s1 = void 0;\n                            }\n                            if (s1) return !0;\n                        }\n                        return !1;\n                    },\n                    O: Ze1,\n                    P: Qe1,\n                    j: fe1,\n                    g: et1,\n                    n: tt1,\n                    w: nt1,\n                    m: ot1,\n                    x: function(e1, t1) {\n                        return e1 >>>= 0, t1 >>>= 0, it1(r1().subarray(e1 >>> 0, e1 + t1 >>> 0)), 0;\n                    },\n                    a: D1 || l1.wasmMemory,\n                    H: lt1,\n                    d: function(e1, t1, n1, r1) {\n                        return lt1(e1 >>> 0, t1 >>> 0, n1 >>> 0, r1 >>> 0);\n                    }\n                };\n                !function() {\n                    function e1(e1, t1) {\n                        return e1 = e1.exports, $1 = e1 = function(e1) {\n                            var t1 = (e1)=>()=>e1() >>> 0, n1 = (e1)=>(t1)=>e1(t1) >>> 0;\n                            return (e1 = Object.assign({}, e1)).__errno_location = t1(e1.__errno_location), e1.pthread_self = t1(e1.pthread_self), e1.malloc = n1(e1.malloc), e1.stackSave = t1(e1.stackSave), e1.stackAlloc = n1(e1.stackAlloc), e1;\n                        }(e1), he1.Ta.push($1.sa), V1 = $1.ta, G1.unshift($1.W), k1 = t1, ee1(), e1;\n                    }\n                    var t1 = {\n                        a: pt1\n                    };\n                    if (Q1(), l1.instantiateWasm) try {\n                        return l1.instantiateWasm(t1, e1);\n                    } catch (e1) {\n                        I1(\"Module.instantiateWasm callback failed with error: \" + e1), u1(e1);\n                    }\n                    (function(e1, t1) {\n                        var n1 = X1;\n                        return A1 || \"function\" != typeof WebAssembly.instantiateStreaming || ne1(n1) || n1.startsWith(\"file://\") || y1 || \"function\" != typeof fetch ? oe1(n1, e1, t1) : fetch(n1, {\n                            credentials: \"same-origin\"\n                        }).then((r1)=>WebAssembly.instantiateStreaming(r1, e1).then(t1, function(r1) {\n                                return I1(\"wasm streaming compile failed: \" + r1), I1(\"falling back to ArrayBuffer instantiation\"), oe1(n1, e1, t1);\n                            }));\n                    })(t1, function(t1) {\n                        e1(t1.instance, t1.module);\n                    }).catch(u1);\n                }(), l1._OrtInit = (e1, t1)=>(l1._OrtInit = $1.X)(e1, t1), l1._OrtGetLastError = (e1, t1)=>(l1._OrtGetLastError = $1.Y)(e1, t1), l1._OrtCreateSessionOptions = (e1, t1, n1, r1, o1, i1, s1, a1, u1, c1)=>(l1._OrtCreateSessionOptions = $1.Z)(e1, t1, n1, r1, o1, i1, s1, a1, u1, c1), l1._OrtAppendExecutionProvider = (e1, t1)=>(l1._OrtAppendExecutionProvider = $1._)(e1, t1), l1._OrtAddSessionConfigEntry = (e1, t1, n1)=>(l1._OrtAddSessionConfigEntry = $1.$)(e1, t1, n1), l1._OrtReleaseSessionOptions = (e1)=>(l1._OrtReleaseSessionOptions = $1.aa)(e1), l1._OrtCreateSession = (e1, t1, n1)=>(l1._OrtCreateSession = $1.ba)(e1, t1, n1), l1._OrtReleaseSession = (e1)=>(l1._OrtReleaseSession = $1.ca)(e1), l1._OrtGetInputOutputCount = (e1, t1, n1)=>(l1._OrtGetInputOutputCount = $1.da)(e1, t1, n1), l1._OrtGetInputName = (e1, t1)=>(l1._OrtGetInputName = $1.ea)(e1, t1), l1._OrtGetOutputName = (e1, t1)=>(l1._OrtGetOutputName = $1.fa)(e1, t1), l1._OrtFree = (e1)=>(l1._OrtFree = $1.ga)(e1), l1._OrtCreateTensor = (e1, t1, n1, r1, o1)=>(l1._OrtCreateTensor = $1.ha)(e1, t1, n1, r1, o1), l1._OrtGetTensorData = (e1, t1, n1, r1, o1)=>(l1._OrtGetTensorData = $1.ia)(e1, t1, n1, r1, o1), l1._OrtReleaseTensor = (e1)=>(l1._OrtReleaseTensor = $1.ja)(e1), l1._OrtCreateRunOptions = (e1, t1, n1, r1)=>(l1._OrtCreateRunOptions = $1.ka)(e1, t1, n1, r1), l1._OrtAddRunConfigEntry = (e1, t1, n1)=>(l1._OrtAddRunConfigEntry = $1.la)(e1, t1, n1), l1._OrtReleaseRunOptions = (e1)=>(l1._OrtReleaseRunOptions = $1.ma)(e1), l1._OrtRun = (e1, t1, n1, r1, o1, i1, s1, a1)=>(l1._OrtRun = $1.na)(e1, t1, n1, r1, o1, i1, s1, a1), l1._OrtEndProfiling = (e1)=>(l1._OrtEndProfiling = $1.oa)(e1);\n                var dt1 = l1._pthread_self = ()=>(dt1 = l1._pthread_self = $1.pa)(), ft1 = l1._malloc = (e1)=>(ft1 = l1._malloc = $1.qa)(e1);\n                l1._free = (e1)=>(l1._free = $1.ra)(e1), l1.__emscripten_tls_init = ()=>(l1.__emscripten_tls_init = $1.sa)();\n                var ht1 = l1.__emscripten_thread_init = (e1, t1, n1, r1, o1, i1)=>(ht1 = l1.__emscripten_thread_init = $1.ua)(e1, t1, n1, r1, o1, i1);\n                l1.__emscripten_thread_crashed = ()=>(l1.__emscripten_thread_crashed = $1.va)();\n                var gt1, bt1 = (e1, t1, n1, r1)=>(bt1 = $1.wa)(e1, t1, n1, r1), mt1 = (e1)=>(mt1 = $1.xa)(e1), yt1 = l1.__emscripten_thread_exit = (e1)=>(yt1 = l1.__emscripten_thread_exit = $1.ya)(e1), _t1 = l1.__emscripten_check_mailbox = ()=>(_t1 = l1.__emscripten_check_mailbox = $1.za)(), vt1 = (e1)=>(vt1 = $1.Aa)(e1), Tt1 = (e1, t1)=>(Tt1 = $1.Ba)(e1, t1), xt1 = ()=>(xt1 = $1.Ca)(), wt1 = (e1)=>(wt1 = $1.Da)(e1), Ot1 = (e1)=>(Ot1 = $1.Ea)(e1);\n                function St1() {\n                    function e1() {\n                        if (!gt1 && (gt1 = !0, l1.calledRun = !0, !M1) && (_1 || ge1(G1), a1(l1), l1.onRuntimeInitialized && l1.onRuntimeInitialized(), !_1)) {\n                            if (l1.postRun) for(\"function\" == typeof l1.postRun && (l1.postRun = [\n                                l1.postRun\n                            ]); l1.postRun.length;){\n                                var e1 = l1.postRun.shift();\n                                H1.unshift(e1);\n                            }\n                            ge1(H1);\n                        }\n                    }\n                    if (!(0 < K1)) if (_1) a1(l1), _1 || ge1(G1), startWorker(l1);\n                    else {\n                        if (l1.preRun) for(\"function\" == typeof l1.preRun && (l1.preRun = [\n                            l1.preRun\n                        ]); l1.preRun.length;)z1.unshift(l1.preRun.shift());\n                        ge1(z1), 0 < K1 || (l1.setStatus ? (l1.setStatus(\"Running...\"), setTimeout(function() {\n                            setTimeout(function() {\n                                l1.setStatus(\"\");\n                            }, 1), e1();\n                        }, 1)) : e1());\n                    }\n                }\n                if (l1.keepRuntimeAlive = W1, l1.wasmMemory = D1, l1.stackAlloc = Ot1, l1.stackSave = xt1, l1.stackRestore = wt1, l1.UTF8ToString = pe1, l1.stringToUTF8 = Se1, l1.lengthBytesUTF8 = we1, l1.ExitStatus = ie1, l1.PThread = he1, Z1 = function e1() {\n                    gt1 || St1(), gt1 || (Z1 = e1);\n                }, l1.preInit) for(\"function\" == typeof l1.preInit && (l1.preInit = [\n                    l1.preInit\n                ]); 0 < l1.preInit.length;)l1.preInit.pop()();\n                return St1(), e1.ready;\n            });\n            e1.exports = r1;\n        },\n        932: (e1, t1, n1)=>{\n            var _scriptDir1, r1 = (_scriptDir1 = \"undefined\" != typeof document && document.currentScript ? document.currentScript.src : void 0,  true && (_scriptDir1 = _scriptDir1 || __filename), function(e1 = {}) {\n                var t1, r1, o1 = e1;\n                o1.ready = new Promise((e1, n1)=>{\n                    t1 = e1, r1 = n1;\n                });\n                var i1, s1, a1, u1 = Object.assign({}, o1), l1 = \"./this.program\", c1 = (e1, t1)=>{\n                    throw t1;\n                }, p1 = \"object\" == \"undefined\", d1 = \"function\" == typeof importScripts, f1 = \"object\" == typeof process && \"object\" == typeof process.versions && \"string\" == typeof process.versions.node, h1 = \"\";\n                if (f1) {\n                    var g1 = n1(6231), b1 = n1(1423);\n                    h1 = d1 ? b1.dirname(h1) + \"/\" : __dirname + \"/\", i1 = (e1, t1)=>(e1 = e1.startsWith(\"file://\") ? new URL(e1) : b1.normalize(e1), g1.readFileSync(e1, t1 ? void 0 : \"utf8\")), a1 = (e1)=>((e1 = i1(e1, !0)).buffer || (e1 = new Uint8Array(e1)), e1), s1 = (e1, t1, n1, r1 = !0)=>{\n                        e1 = e1.startsWith(\"file://\") ? new URL(e1) : b1.normalize(e1), g1.readFile(e1, r1 ? void 0 : \"utf8\", (e1, o1)=>{\n                            e1 ? n1(e1) : t1(r1 ? o1.buffer : o1);\n                        });\n                    }, !o1.thisProgram && 1 < process.argv.length && (l1 = process.argv[1].replace(/\\\\/g, \"/\")), process.argv.slice(2), c1 = (e1, t1)=>{\n                        throw process.exitCode = e1, t1;\n                    }, o1.inspect = ()=>\"[Emscripten Module object]\";\n                } else (p1 || d1) && (d1 ? h1 = self.location.href : \"undefined\" != typeof document && document.currentScript && (h1 = document.currentScript.src), _scriptDir1 && (h1 = _scriptDir1), h1 = 0 !== h1.indexOf(\"blob:\") ? h1.substr(0, h1.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1) : \"\", i1 = (e1)=>{\n                    var t1 = new XMLHttpRequest;\n                    return t1.open(\"GET\", e1, !1), t1.send(null), t1.responseText;\n                }, d1 && (a1 = (e1)=>{\n                    var t1 = new XMLHttpRequest;\n                    return t1.open(\"GET\", e1, !1), t1.responseType = \"arraybuffer\", t1.send(null), new Uint8Array(t1.response);\n                }), s1 = (e1, t1, n1)=>{\n                    var r1 = new XMLHttpRequest;\n                    r1.open(\"GET\", e1, !0), r1.responseType = \"arraybuffer\", r1.onload = ()=>{\n                        200 == r1.status || 0 == r1.status && r1.response ? t1(r1.response) : n1();\n                    }, r1.onerror = n1, r1.send(null);\n                });\n                var m1, y1 = o1.print || console.log.bind(console), _1 = o1.printErr || console.error.bind(console);\n                Object.assign(o1, u1), u1 = null, o1.thisProgram && (l1 = o1.thisProgram), o1.quit && (c1 = o1.quit), o1.wasmBinary && (m1 = o1.wasmBinary);\n                var v1 = o1.noExitRuntime || !0;\n                \"object\" != typeof WebAssembly && j1(\"no native wasm support detected\");\n                var T1, x1, w1, O1, S1, A1, P1 = !1;\n                function I1() {\n                    var e1 = T1.buffer;\n                    o1.HEAP8 = w1 = new Int8Array(e1), o1.HEAP16 = new Int16Array(e1), o1.HEAP32 = S1 = new Int32Array(e1), o1.HEAPU8 = O1 = new Uint8Array(e1), o1.HEAPU16 = new Uint16Array(e1), o1.HEAPU32 = A1 = new Uint32Array(e1), o1.HEAPF32 = new Float32Array(e1), o1.HEAPF64 = new Float64Array(e1);\n                }\n                var E1 = [], D1 = [], $1 = [];\n                function k1() {\n                    var e1 = o1.preRun.shift();\n                    E1.unshift(e1);\n                }\n                var F1, N1, L1 = 0, C1 = null, R1 = null;\n                function j1(e1) {\n                    throw o1.onAbort && o1.onAbort(e1), _1(e1 = \"Aborted(\" + e1 + \")\"), P1 = !0, e1 = new WebAssembly.RuntimeError(e1 + \". Build with -sASSERTIONS for more info.\"), r1(e1), e1;\n                }\n                function M1(e1) {\n                    return e1.startsWith(\"data:application/octet-stream;base64,\");\n                }\n                if (!M1(F1 = \"ort-wasm.wasm\")) {\n                    var U1 = F1;\n                    F1 = o1.locateFile ? o1.locateFile(U1, h1) : h1 + U1;\n                }\n                function B1(e1) {\n                    if (e1 == F1 && m1) return new Uint8Array(m1);\n                    if (a1) return a1(e1);\n                    throw \"both async and sync fetching of the wasm failed\";\n                }\n                function V1(e1, t1, n1) {\n                    return (function(e1) {\n                        if (!m1 && (p1 || d1)) {\n                            if (\"function\" == typeof fetch && !e1.startsWith(\"file://\")) return fetch(e1, {\n                                credentials: \"same-origin\"\n                            }).then((t1)=>{\n                                if (!t1.ok) throw \"failed to load wasm binary file at '\" + e1 + \"'\";\n                                return t1.arrayBuffer();\n                            }).catch(()=>B1(e1));\n                            if (s1) return new Promise((t1, n1)=>{\n                                s1(e1, (e1)=>t1(new Uint8Array(e1)), n1);\n                            });\n                        }\n                        return Promise.resolve().then(()=>B1(e1));\n                    })(e1).then((e1)=>WebAssembly.instantiate(e1, t1)).then((e1)=>e1).then(n1, (e1)=>{\n                        _1(\"failed to asynchronously prepare wasm: \" + e1), j1(e1);\n                    });\n                }\n                function z1(e1) {\n                    this.name = \"ExitStatus\", this.message = `Program terminated with exit(${e1})`, this.status = e1;\n                }\n                var G1 = (e1)=>{\n                    for(; 0 < e1.length;)e1.shift()(o1);\n                };\n                function H1(e1) {\n                    this.qa = e1 - 24, this.va = function(e1) {\n                        A1[this.qa + 4 >> 2 >>> 0] = e1;\n                    }, this.ua = function(e1) {\n                        A1[this.qa + 8 >> 2 >>> 0] = e1;\n                    }, this.sa = function(e1, t1) {\n                        this.ta(), this.va(e1), this.ua(t1);\n                    }, this.ta = function() {\n                        A1[this.qa + 16 >> 2 >>> 0] = 0;\n                    };\n                }\n                var q1, W1 = \"undefined\" != typeof TextDecoder ? new TextDecoder(\"utf8\") : void 0, X1 = (e1, t1, n1)=>{\n                    var r1 = (t1 >>>= 0) + n1;\n                    for(n1 = t1; e1[n1] && !(n1 >= r1);)++n1;\n                    if (16 < n1 - t1 && e1.buffer && W1) return W1.decode(e1.subarray(t1, n1));\n                    for(r1 = \"\"; t1 < n1;){\n                        var o1 = e1[t1++];\n                        if (128 & o1) {\n                            var i1 = 63 & e1[t1++];\n                            if (192 == (224 & o1)) r1 += String.fromCharCode((31 & o1) << 6 | i1);\n                            else {\n                                var s1 = 63 & e1[t1++];\n                                65536 > (o1 = 224 == (240 & o1) ? (15 & o1) << 12 | i1 << 6 | s1 : (7 & o1) << 18 | i1 << 12 | s1 << 6 | 63 & e1[t1++]) ? r1 += String.fromCharCode(o1) : (o1 -= 65536, r1 += String.fromCharCode(55296 | o1 >> 10, 56320 | 1023 & o1));\n                            }\n                        } else r1 += String.fromCharCode(o1);\n                    }\n                    return r1;\n                }, Y1 = (e1, t1)=>(e1 >>>= 0) ? X1(O1, e1, t1) : \"\", K1 = (e1)=>{\n                    for(var t1 = 0, n1 = 0; n1 < e1.length; ++n1){\n                        var r1 = e1.charCodeAt(n1);\n                        127 >= r1 ? t1++ : 2047 >= r1 ? t1 += 2 : 55296 <= r1 && 57343 >= r1 ? (t1 += 4, ++n1) : t1 += 3;\n                    }\n                    return t1;\n                }, J1 = (e1, t1, n1, r1)=>{\n                    if (!(0 < r1)) return 0;\n                    var o1 = n1 >>>= 0;\n                    r1 = n1 + r1 - 1;\n                    for(var i1 = 0; i1 < e1.length; ++i1){\n                        var s1 = e1.charCodeAt(i1);\n                        if (55296 <= s1 && 57343 >= s1 && (s1 = 65536 + ((1023 & s1) << 10) | 1023 & e1.charCodeAt(++i1)), 127 >= s1) {\n                            if (n1 >= r1) break;\n                            t1[n1++ >>> 0] = s1;\n                        } else {\n                            if (2047 >= s1) {\n                                if (n1 + 1 >= r1) break;\n                                t1[n1++ >>> 0] = 192 | s1 >> 6;\n                            } else {\n                                if (65535 >= s1) {\n                                    if (n1 + 2 >= r1) break;\n                                    t1[n1++ >>> 0] = 224 | s1 >> 12;\n                                } else {\n                                    if (n1 + 3 >= r1) break;\n                                    t1[n1++ >>> 0] = 240 | s1 >> 18, t1[n1++ >>> 0] = 128 | s1 >> 12 & 63;\n                                }\n                                t1[n1++ >>> 0] = 128 | s1 >> 6 & 63;\n                            }\n                            t1[n1++ >>> 0] = 128 | 63 & s1;\n                        }\n                    }\n                    return t1[n1 >>> 0] = 0, n1 - o1;\n                }, Z1 = (e1)=>0 == e1 % 4 && (0 != e1 % 100 || 0 == e1 % 400), Q1 = [\n                    0,\n                    31,\n                    60,\n                    91,\n                    121,\n                    152,\n                    182,\n                    213,\n                    244,\n                    274,\n                    305,\n                    335\n                ], ee1 = [\n                    0,\n                    31,\n                    59,\n                    90,\n                    120,\n                    151,\n                    181,\n                    212,\n                    243,\n                    273,\n                    304,\n                    334\n                ], te1 = (e1)=>{\n                    var t1 = K1(e1) + 1, n1 = ce1(t1);\n                    return n1 && J1(e1, O1, n1, t1), n1;\n                }, ne1 = {}, re1 = ()=>{\n                    if (!q1) {\n                        var e1, t1 = {\n                            USER: \"web_user\",\n                            LOGNAME: \"web_user\",\n                            PATH: \"/\",\n                            PWD: \"/\",\n                            HOME: \"/home/web_user\",\n                            LANG: (\"object\" == typeof navigator && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\",\n                            _: l1 || \"./this.program\"\n                        };\n                        for(e1 in ne1)void 0 === ne1[e1] ? delete t1[e1] : t1[e1] = ne1[e1];\n                        var n1 = [];\n                        for(e1 in t1)n1.push(`${e1}=${t1[e1]}`);\n                        q1 = n1;\n                    }\n                    return q1;\n                }, oe1 = [\n                    null,\n                    [],\n                    []\n                ], ie1 = (e1)=>(ie1 = (()=>{\n                        if (\"object\" == typeof crypto && \"function\" == typeof crypto.getRandomValues) return (e1)=>crypto.getRandomValues(e1);\n                        if (f1) try {\n                            var e1 = n1(6113);\n                            if (e1.randomFillSync) return (t1)=>e1.randomFillSync(t1);\n                            var t1 = e1.randomBytes;\n                            return (e1)=>(e1.set(t1(e1.byteLength)), e1);\n                        } catch (e1) {}\n                        j1(\"initRandomDevice\");\n                    })())(e1), se1 = [\n                    31,\n                    29,\n                    31,\n                    30,\n                    31,\n                    30,\n                    31,\n                    31,\n                    30,\n                    31,\n                    30,\n                    31\n                ], ae1 = [\n                    31,\n                    28,\n                    31,\n                    30,\n                    31,\n                    30,\n                    31,\n                    31,\n                    30,\n                    31,\n                    30,\n                    31\n                ];\n                function ue1(e1, t1, n1, r1) {\n                    function o1(e1, t1, n1) {\n                        for(e1 = \"number\" == typeof e1 ? e1.toString() : e1 || \"\"; e1.length < t1;)e1 = n1[0] + e1;\n                        return e1;\n                    }\n                    function i1(e1, t1) {\n                        return o1(e1, t1, \"0\");\n                    }\n                    function s1(e1, t1) {\n                        function n1(e1) {\n                            return 0 > e1 ? -1 : 0 < e1 ? 1 : 0;\n                        }\n                        var r1;\n                        return 0 === (r1 = n1(e1.getFullYear() - t1.getFullYear())) && 0 === (r1 = n1(e1.getMonth() - t1.getMonth())) && (r1 = n1(e1.getDate() - t1.getDate())), r1;\n                    }\n                    function a1(e1) {\n                        switch(e1.getDay()){\n                            case 0:\n                                return new Date(e1.getFullYear() - 1, 11, 29);\n                            case 1:\n                                return e1;\n                            case 2:\n                                return new Date(e1.getFullYear(), 0, 3);\n                            case 3:\n                                return new Date(e1.getFullYear(), 0, 2);\n                            case 4:\n                                return new Date(e1.getFullYear(), 0, 1);\n                            case 5:\n                                return new Date(e1.getFullYear() - 1, 11, 31);\n                            case 6:\n                                return new Date(e1.getFullYear() - 1, 11, 30);\n                        }\n                    }\n                    function u1(e1) {\n                        var t1 = e1.ma;\n                        for(e1 = new Date(new Date(e1.na + 1900, 0, 1).getTime()); 0 < t1;){\n                            var n1 = e1.getMonth(), r1 = (Z1(e1.getFullYear()) ? se1 : ae1)[n1];\n                            if (!(t1 > r1 - e1.getDate())) {\n                                e1.setDate(e1.getDate() + t1);\n                                break;\n                            }\n                            t1 -= r1 - e1.getDate() + 1, e1.setDate(1), 11 > n1 ? e1.setMonth(n1 + 1) : (e1.setMonth(0), e1.setFullYear(e1.getFullYear() + 1));\n                        }\n                        return n1 = new Date(e1.getFullYear() + 1, 0, 4), t1 = a1(new Date(e1.getFullYear(), 0, 4)), n1 = a1(n1), 0 >= s1(t1, e1) ? 0 >= s1(n1, e1) ? e1.getFullYear() + 1 : e1.getFullYear() : e1.getFullYear() - 1;\n                    }\n                    e1 >>>= 0, t1 >>>= 0, n1 >>>= 0;\n                    var l1 = S1[40 + (r1 >>>= 0) >> 2 >>> 0];\n                    for(var c1 in r1 = {\n                        ya: S1[r1 >> 2 >>> 0],\n                        xa: S1[r1 + 4 >> 2 >>> 0],\n                        oa: S1[r1 + 8 >> 2 >>> 0],\n                        ra: S1[r1 + 12 >> 2 >>> 0],\n                        pa: S1[r1 + 16 >> 2 >>> 0],\n                        na: S1[r1 + 20 >> 2 >>> 0],\n                        ha: S1[r1 + 24 >> 2 >>> 0],\n                        ma: S1[r1 + 28 >> 2 >>> 0],\n                        Aa: S1[r1 + 32 >> 2 >>> 0],\n                        wa: S1[r1 + 36 >> 2 >>> 0],\n                        za: l1 ? Y1(l1) : \"\"\n                    }, n1 = Y1(n1), l1 = {\n                        \"%c\": \"%a %b %d %H:%M:%S %Y\",\n                        \"%D\": \"%m/%d/%y\",\n                        \"%F\": \"%Y-%m-%d\",\n                        \"%h\": \"%b\",\n                        \"%r\": \"%I:%M:%S %p\",\n                        \"%R\": \"%H:%M\",\n                        \"%T\": \"%H:%M:%S\",\n                        \"%x\": \"%m/%d/%y\",\n                        \"%X\": \"%H:%M:%S\",\n                        \"%Ec\": \"%c\",\n                        \"%EC\": \"%C\",\n                        \"%Ex\": \"%m/%d/%y\",\n                        \"%EX\": \"%H:%M:%S\",\n                        \"%Ey\": \"%y\",\n                        \"%EY\": \"%Y\",\n                        \"%Od\": \"%d\",\n                        \"%Oe\": \"%e\",\n                        \"%OH\": \"%H\",\n                        \"%OI\": \"%I\",\n                        \"%Om\": \"%m\",\n                        \"%OM\": \"%M\",\n                        \"%OS\": \"%S\",\n                        \"%Ou\": \"%u\",\n                        \"%OU\": \"%U\",\n                        \"%OV\": \"%V\",\n                        \"%Ow\": \"%w\",\n                        \"%OW\": \"%W\",\n                        \"%Oy\": \"%y\"\n                    })n1 = n1.replace(new RegExp(c1, \"g\"), l1[c1]);\n                    var p1 = \"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"), d1 = \"January February March April May June July August September October November December\".split(\" \");\n                    for(c1 in l1 = {\n                        \"%a\": (e1)=>p1[e1.ha].substring(0, 3),\n                        \"%A\": (e1)=>p1[e1.ha],\n                        \"%b\": (e1)=>d1[e1.pa].substring(0, 3),\n                        \"%B\": (e1)=>d1[e1.pa],\n                        \"%C\": (e1)=>i1((e1.na + 1900) / 100 | 0, 2),\n                        \"%d\": (e1)=>i1(e1.ra, 2),\n                        \"%e\": (e1)=>o1(e1.ra, 2, \" \"),\n                        \"%g\": (e1)=>u1(e1).toString().substring(2),\n                        \"%G\": (e1)=>u1(e1),\n                        \"%H\": (e1)=>i1(e1.oa, 2),\n                        \"%I\": (e1)=>(0 == (e1 = e1.oa) ? e1 = 12 : 12 < e1 && (e1 -= 12), i1(e1, 2)),\n                        \"%j\": (e1)=>{\n                            for(var t1 = 0, n1 = 0; n1 <= e1.pa - 1; t1 += (Z1(e1.na + 1900) ? se1 : ae1)[n1++]);\n                            return i1(e1.ra + t1, 3);\n                        },\n                        \"%m\": (e1)=>i1(e1.pa + 1, 2),\n                        \"%M\": (e1)=>i1(e1.xa, 2),\n                        \"%n\": ()=>\"\\n\",\n                        \"%p\": (e1)=>0 <= e1.oa && 12 > e1.oa ? \"AM\" : \"PM\",\n                        \"%S\": (e1)=>i1(e1.ya, 2),\n                        \"%t\": ()=>\"\t\",\n                        \"%u\": (e1)=>e1.ha || 7,\n                        \"%U\": (e1)=>i1(Math.floor((e1.ma + 7 - e1.ha) / 7), 2),\n                        \"%V\": (e1)=>{\n                            var t1 = Math.floor((e1.ma + 7 - (e1.ha + 6) % 7) / 7);\n                            if (2 >= (e1.ha + 371 - e1.ma - 2) % 7 && t1++, t1) 53 == t1 && (4 == (n1 = (e1.ha + 371 - e1.ma) % 7) || 3 == n1 && Z1(e1.na) || (t1 = 1));\n                            else {\n                                t1 = 52;\n                                var n1 = (e1.ha + 7 - e1.ma - 1) % 7;\n                                (4 == n1 || 5 == n1 && Z1(e1.na % 400 - 1)) && t1++;\n                            }\n                            return i1(t1, 2);\n                        },\n                        \"%w\": (e1)=>e1.ha,\n                        \"%W\": (e1)=>i1(Math.floor((e1.ma + 7 - (e1.ha + 6) % 7) / 7), 2),\n                        \"%y\": (e1)=>(e1.na + 1900).toString().substring(2),\n                        \"%Y\": (e1)=>e1.na + 1900,\n                        \"%z\": (e1)=>{\n                            var t1 = 0 <= (e1 = e1.wa);\n                            return e1 = Math.abs(e1) / 60, (t1 ? \"+\" : \"-\") + String(\"0000\" + (e1 / 60 * 100 + e1 % 60)).slice(-4);\n                        },\n                        \"%Z\": (e1)=>e1.za,\n                        \"%%\": ()=>\"%\"\n                    }, n1 = n1.replace(/%%/g, \"\\x00\\x00\"), l1)n1.includes(c1) && (n1 = n1.replace(new RegExp(c1, \"g\"), l1[c1](r1)));\n                    return c1 = function(e1) {\n                        var t1 = Array(K1(e1) + 1);\n                        return J1(e1, t1, 0, t1.length), t1;\n                    }(n1 = n1.replace(/\\0\\0/g, \"%\")), c1.length > t1 ? 0 : (w1.set(c1, e1 >>> 0), c1.length - 1);\n                }\n                var le1 = {\n                    a: function(e1, t1, n1) {\n                        throw new H1(e1 >>>= 0).sa(t1 >>> 0, n1 >>> 0), e1;\n                    },\n                    e: function() {\n                        return 0;\n                    },\n                    I: function() {},\n                    y: function() {},\n                    A: function() {},\n                    K: function() {\n                        return 0;\n                    },\n                    G: function() {},\n                    B: function() {},\n                    F: function() {},\n                    g: function() {},\n                    z: function() {},\n                    w: function() {},\n                    H: function() {},\n                    x: function() {},\n                    k: ()=>!0,\n                    n: function(e1, t1, n1) {\n                        e1 = t1 + 2097152 >>> 0 < 4194305 - !!e1 ? (e1 >>> 0) + 4294967296 * t1 : NaN, n1 >>>= 0, e1 = new Date(1e3 * e1), S1[n1 >> 2 >>> 0] = e1.getUTCSeconds(), S1[n1 + 4 >> 2 >>> 0] = e1.getUTCMinutes(), S1[n1 + 8 >> 2 >>> 0] = e1.getUTCHours(), S1[n1 + 12 >> 2 >>> 0] = e1.getUTCDate(), S1[n1 + 16 >> 2 >>> 0] = e1.getUTCMonth(), S1[n1 + 20 >> 2 >>> 0] = e1.getUTCFullYear() - 1900, S1[n1 + 24 >> 2 >>> 0] = e1.getUTCDay(), S1[n1 + 28 >> 2 >>> 0] = (e1.getTime() - Date.UTC(e1.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n                    },\n                    o: function(e1, t1, n1) {\n                        e1 = t1 + 2097152 >>> 0 < 4194305 - !!e1 ? (e1 >>> 0) + 4294967296 * t1 : NaN, n1 >>>= 0, e1 = new Date(1e3 * e1), S1[n1 >> 2 >>> 0] = e1.getSeconds(), S1[n1 + 4 >> 2 >>> 0] = e1.getMinutes(), S1[n1 + 8 >> 2 >>> 0] = e1.getHours(), S1[n1 + 12 >> 2 >>> 0] = e1.getDate(), S1[n1 + 16 >> 2 >>> 0] = e1.getMonth(), S1[n1 + 20 >> 2 >>> 0] = e1.getFullYear() - 1900, S1[n1 + 24 >> 2 >>> 0] = e1.getDay(), S1[n1 + 28 >> 2 >>> 0] = (Z1(e1.getFullYear()) ? Q1 : ee1)[e1.getMonth()] + e1.getDate() - 1 | 0, S1[n1 + 36 >> 2 >>> 0] = -60 * e1.getTimezoneOffset(), t1 = new Date(e1.getFullYear(), 6, 1).getTimezoneOffset();\n                        var r1 = new Date(e1.getFullYear(), 0, 1).getTimezoneOffset();\n                        S1[n1 + 32 >> 2 >>> 0] = 0 | (t1 != r1 && e1.getTimezoneOffset() == Math.min(r1, t1));\n                    },\n                    p: function(e1) {\n                        e1 >>>= 0;\n                        var t1 = new Date(S1[e1 + 20 >> 2 >>> 0] + 1900, S1[e1 + 16 >> 2 >>> 0], S1[e1 + 12 >> 2 >>> 0], S1[e1 + 8 >> 2 >>> 0], S1[e1 + 4 >> 2 >>> 0], S1[e1 >> 2 >>> 0], 0), n1 = S1[e1 + 32 >> 2 >>> 0], r1 = t1.getTimezoneOffset(), o1 = new Date(t1.getFullYear(), 6, 1).getTimezoneOffset(), i1 = new Date(t1.getFullYear(), 0, 1).getTimezoneOffset(), s1 = Math.min(i1, o1);\n                        return 0 > n1 ? S1[e1 + 32 >> 2 >>> 0] = Number(o1 != i1 && s1 == r1) : 0 < n1 != (s1 == r1) && (o1 = Math.max(i1, o1), t1.setTime(t1.getTime() + 6e4 * ((0 < n1 ? s1 : o1) - r1))), S1[e1 + 24 >> 2 >>> 0] = t1.getDay(), S1[e1 + 28 >> 2 >>> 0] = (Z1(t1.getFullYear()) ? Q1 : ee1)[t1.getMonth()] + t1.getDate() - 1 | 0, S1[e1 >> 2 >>> 0] = t1.getSeconds(), S1[e1 + 4 >> 2 >>> 0] = t1.getMinutes(), S1[e1 + 8 >> 2 >>> 0] = t1.getHours(), S1[e1 + 12 >> 2 >>> 0] = t1.getDate(), S1[e1 + 16 >> 2 >>> 0] = t1.getMonth(), S1[e1 + 20 >> 2 >>> 0] = t1.getYear(), e1 = t1.getTime() / 1e3, de1((N1 = e1, 1 <= +Math.abs(N1) ? 0 < N1 ? +Math.floor(N1 / 4294967296) >>> 0 : ~~+Math.ceil((N1 - +(~~N1 >>> 0)) / 4294967296) >>> 0 : 0)), e1 >>> 0;\n                    },\n                    l: function() {\n                        return -52;\n                    },\n                    m: function() {},\n                    u: function(e1, t1, n1) {\n                        function r1(e1) {\n                            return (e1 = e1.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? e1[1] : \"GMT\";\n                        }\n                        n1 >>>= 0;\n                        var o1 = (new Date).getFullYear(), i1 = new Date(o1, 0, 1), s1 = new Date(o1, 6, 1);\n                        o1 = i1.getTimezoneOffset();\n                        var a1 = s1.getTimezoneOffset();\n                        A1[e1 >>> 0 >> 2 >>> 0] = 60 * Math.max(o1, a1), S1[t1 >>> 0 >> 2 >>> 0] = Number(o1 != a1), e1 = r1(i1), t1 = r1(s1), e1 = te1(e1), t1 = te1(t1), a1 < o1 ? (A1[n1 >> 2 >>> 0] = e1, A1[n1 + 4 >> 2 >>> 0] = t1) : (A1[n1 >> 2 >>> 0] = t1, A1[n1 + 4 >> 2 >>> 0] = e1);\n                    },\n                    d: ()=>{\n                        j1(\"\");\n                    },\n                    h: function() {\n                        return Date.now();\n                    },\n                    v: function() {\n                        return 4294901760;\n                    },\n                    b: ()=>performance.now(),\n                    J: function(e1, t1, n1) {\n                        return t1 >>>= 0, O1.copyWithin(e1 >>> 0 >>> 0, t1 >>> 0, t1 + (n1 >>> 0) >>> 0);\n                    },\n                    t: function(e1) {\n                        e1 >>>= 0;\n                        var t1 = O1.length;\n                        if (4294901760 < e1) return !1;\n                        for(var n1 = 1; 4 >= n1; n1 *= 2){\n                            var r1 = t1 * (1 + .2 / n1);\n                            r1 = Math.min(r1, e1 + 100663296);\n                            var o1 = Math;\n                            r1 = Math.max(e1, r1);\n                            e: {\n                                o1 = o1.min.call(o1, 4294901760, r1 + (65536 - r1 % 65536) % 65536) - T1.buffer.byteLength + 65535 >>> 16;\n                                try {\n                                    T1.grow(o1), I1();\n                                    var i1 = 1;\n                                    break e;\n                                } catch (e1) {}\n                                i1 = void 0;\n                            }\n                            if (i1) return !0;\n                        }\n                        return !1;\n                    },\n                    D: function(e1, t1) {\n                        e1 >>>= 0, t1 >>>= 0;\n                        var n1 = 0;\n                        return re1().forEach(function(r1, o1) {\n                            var i1 = t1 + n1;\n                            for(o1 = A1[e1 + 4 * o1 >> 2 >>> 0] = i1, i1 = 0; i1 < r1.length; ++i1)w1[o1++ >> 0 >>> 0] = r1.charCodeAt(i1);\n                            w1[o1 >> 0 >>> 0] = 0, n1 += r1.length + 1;\n                        }), 0;\n                    },\n                    E: function(e1, t1) {\n                        e1 >>>= 0, t1 >>>= 0;\n                        var n1 = re1();\n                        A1[e1 >> 2 >>> 0] = n1.length;\n                        var r1 = 0;\n                        return n1.forEach(function(e1) {\n                            r1 += e1.length + 1;\n                        }), A1[t1 >> 2 >>> 0] = r1, 0;\n                    },\n                    s: (e1)=>{\n                        v1 || (o1.onExit && o1.onExit(e1), P1 = !0), c1(e1, new z1(e1));\n                    },\n                    f: ()=>52,\n                    j: function() {\n                        return 52;\n                    },\n                    q: function() {\n                        return 70;\n                    },\n                    i: function(e1, t1, n1, r1) {\n                        t1 >>>= 0, n1 >>>= 0, r1 >>>= 0;\n                        for(var o1 = 0, i1 = 0; i1 < n1; i1++){\n                            var s1 = A1[t1 >> 2 >>> 0], a1 = A1[t1 + 4 >> 2 >>> 0];\n                            t1 += 8;\n                            for(var u1 = 0; u1 < a1; u1++){\n                                var l1 = O1[s1 + u1 >>> 0], c1 = oe1[e1];\n                                0 === l1 || 10 === l1 ? ((1 === e1 ? y1 : _1)(X1(c1, 0)), c1.length = 0) : c1.push(l1);\n                            }\n                            o1 += a1;\n                        }\n                        return A1[r1 >> 2 >>> 0] = o1, 0;\n                    },\n                    r: function(e1, t1) {\n                        return e1 >>>= 0, ie1(O1.subarray(e1 >>> 0, e1 + (t1 >>> 0) >>> 0)), 0;\n                    },\n                    C: ue1,\n                    c: function(e1, t1, n1, r1) {\n                        return ue1(e1 >>> 0, t1 >>> 0, n1 >>> 0, r1 >>> 0);\n                    }\n                };\n                !function() {\n                    function e1(e1) {\n                        if (e1 = e1.exports, x1 = e1 = function(e1) {\n                            var t1 = (e1)=>()=>e1() >>> 0, n1 = (e1)=>(t1)=>e1(t1) >>> 0;\n                            return (e1 = Object.assign({}, e1)).__errno_location = t1(e1.__errno_location), e1.malloc = n1(e1.malloc), e1.stackSave = t1(e1.stackSave), e1.stackAlloc = n1(e1.stackAlloc), e1;\n                        }(e1), T1 = x1.L, I1(), D1.unshift(x1.M), L1--, o1.monitorRunDependencies && o1.monitorRunDependencies(L1), 0 == L1 && (null !== C1 && (clearInterval(C1), C1 = null), R1)) {\n                            var t1 = R1;\n                            R1 = null, t1();\n                        }\n                        return e1;\n                    }\n                    var t1 = {\n                        a: le1\n                    };\n                    if (L1++, o1.monitorRunDependencies && o1.monitorRunDependencies(L1), o1.instantiateWasm) try {\n                        return o1.instantiateWasm(t1, e1);\n                    } catch (e1) {\n                        _1(\"Module.instantiateWasm callback failed with error: \" + e1), r1(e1);\n                    }\n                    (function(e1, t1) {\n                        var n1 = F1;\n                        return m1 || \"function\" != typeof WebAssembly.instantiateStreaming || M1(n1) || n1.startsWith(\"file://\") || f1 || \"function\" != typeof fetch ? V1(n1, e1, t1) : fetch(n1, {\n                            credentials: \"same-origin\"\n                        }).then((r1)=>WebAssembly.instantiateStreaming(r1, e1).then(t1, function(r1) {\n                                return _1(\"wasm streaming compile failed: \" + r1), _1(\"falling back to ArrayBuffer instantiation\"), V1(n1, e1, t1);\n                            }));\n                    })(t1, function(t1) {\n                        e1(t1.instance);\n                    }).catch(r1);\n                }(), o1._OrtInit = (e1, t1)=>(o1._OrtInit = x1.N)(e1, t1), o1._OrtGetLastError = (e1, t1)=>(o1._OrtGetLastError = x1.O)(e1, t1), o1._OrtCreateSessionOptions = (e1, t1, n1, r1, i1, s1, a1, u1, l1, c1)=>(o1._OrtCreateSessionOptions = x1.P)(e1, t1, n1, r1, i1, s1, a1, u1, l1, c1), o1._OrtAppendExecutionProvider = (e1, t1)=>(o1._OrtAppendExecutionProvider = x1.Q)(e1, t1), o1._OrtAddSessionConfigEntry = (e1, t1, n1)=>(o1._OrtAddSessionConfigEntry = x1.R)(e1, t1, n1), o1._OrtReleaseSessionOptions = (e1)=>(o1._OrtReleaseSessionOptions = x1.S)(e1), o1._OrtCreateSession = (e1, t1, n1)=>(o1._OrtCreateSession = x1.T)(e1, t1, n1), o1._OrtReleaseSession = (e1)=>(o1._OrtReleaseSession = x1.U)(e1), o1._OrtGetInputOutputCount = (e1, t1, n1)=>(o1._OrtGetInputOutputCount = x1.V)(e1, t1, n1), o1._OrtGetInputName = (e1, t1)=>(o1._OrtGetInputName = x1.W)(e1, t1), o1._OrtGetOutputName = (e1, t1)=>(o1._OrtGetOutputName = x1.X)(e1, t1), o1._OrtFree = (e1)=>(o1._OrtFree = x1.Y)(e1), o1._OrtCreateTensor = (e1, t1, n1, r1, i1)=>(o1._OrtCreateTensor = x1.Z)(e1, t1, n1, r1, i1), o1._OrtGetTensorData = (e1, t1, n1, r1, i1)=>(o1._OrtGetTensorData = x1._)(e1, t1, n1, r1, i1), o1._OrtReleaseTensor = (e1)=>(o1._OrtReleaseTensor = x1.$)(e1), o1._OrtCreateRunOptions = (e1, t1, n1, r1)=>(o1._OrtCreateRunOptions = x1.aa)(e1, t1, n1, r1), o1._OrtAddRunConfigEntry = (e1, t1, n1)=>(o1._OrtAddRunConfigEntry = x1.ba)(e1, t1, n1), o1._OrtReleaseRunOptions = (e1)=>(o1._OrtReleaseRunOptions = x1.ca)(e1), o1._OrtRun = (e1, t1, n1, r1, i1, s1, a1, u1)=>(o1._OrtRun = x1.da)(e1, t1, n1, r1, i1, s1, a1, u1), o1._OrtEndProfiling = (e1)=>(o1._OrtEndProfiling = x1.ea)(e1);\n                var ce1 = o1._malloc = (e1)=>(ce1 = o1._malloc = x1.fa)(e1);\n                o1._free = (e1)=>(o1._free = x1.ga)(e1);\n                var pe1, de1 = (e1)=>(de1 = x1.ia)(e1), fe1 = ()=>(fe1 = x1.ja)(), he1 = (e1)=>(he1 = x1.ka)(e1), ge1 = (e1)=>(ge1 = x1.la)(e1);\n                function be1() {\n                    function e1() {\n                        if (!pe1 && (pe1 = !0, o1.calledRun = !0, !P1)) {\n                            if (G1(D1), t1(o1), o1.onRuntimeInitialized && o1.onRuntimeInitialized(), o1.postRun) for(\"function\" == typeof o1.postRun && (o1.postRun = [\n                                o1.postRun\n                            ]); o1.postRun.length;){\n                                var e1 = o1.postRun.shift();\n                                $1.unshift(e1);\n                            }\n                            G1($1);\n                        }\n                    }\n                    if (!(0 < L1)) {\n                        if (o1.preRun) for(\"function\" == typeof o1.preRun && (o1.preRun = [\n                            o1.preRun\n                        ]); o1.preRun.length;)k1();\n                        G1(E1), 0 < L1 || (o1.setStatus ? (o1.setStatus(\"Running...\"), setTimeout(function() {\n                            setTimeout(function() {\n                                o1.setStatus(\"\");\n                            }, 1), e1();\n                        }, 1)) : e1());\n                    }\n                }\n                if (o1.stackAlloc = ge1, o1.stackSave = fe1, o1.stackRestore = he1, o1.UTF8ToString = Y1, o1.stringToUTF8 = (e1, t1, n1)=>J1(e1, O1, t1, n1), o1.lengthBytesUTF8 = K1, R1 = function e1() {\n                    pe1 || be1(), pe1 || (R1 = e1);\n                }, o1.preInit) for(\"function\" == typeof o1.preInit && (o1.preInit = [\n                    o1.preInit\n                ]); 0 < o1.preInit.length;)o1.preInit.pop()();\n                return be1(), e1.ready;\n            });\n            e1.exports = r1;\n        },\n        4537: (e1)=>{\n            \"use strict\";\n            e1.exports = function(e1, t1) {\n                for(var n1 = new Array(arguments.length - 1), r1 = 0, o1 = 2, i1 = !0; o1 < arguments.length;)n1[r1++] = arguments[o1++];\n                return new Promise(function(o1, s1) {\n                    n1[r1] = function(e1) {\n                        if (i1) if (i1 = !1, e1) s1(e1);\n                        else {\n                            for(var t1 = new Array(arguments.length - 1), n1 = 0; n1 < t1.length;)t1[n1++] = arguments[n1];\n                            o1.apply(null, t1);\n                        }\n                    };\n                    try {\n                        e1.apply(t1 || null, n1);\n                    } catch (e1) {\n                        i1 && (i1 = !1, s1(e1));\n                    }\n                });\n            };\n        },\n        7419: (e1, t1)=>{\n            \"use strict\";\n            var n1 = t1;\n            n1.length = function(e1) {\n                var t1 = e1.length;\n                if (!t1) return 0;\n                for(var n1 = 0; --t1 % 4 > 1 && \"=\" === e1.charAt(t1);)++n1;\n                return Math.ceil(3 * e1.length) / 4 - n1;\n            };\n            for(var r1 = new Array(64), o1 = new Array(123), i1 = 0; i1 < 64;)o1[r1[i1] = i1 < 26 ? i1 + 65 : i1 < 52 ? i1 + 71 : i1 < 62 ? i1 - 4 : i1 - 59 | 43] = i1++;\n            n1.encode = function(e1, t1, n1) {\n                for(var o1, i1 = null, s1 = [], a1 = 0, u1 = 0; t1 < n1;){\n                    var l1 = e1[t1++];\n                    switch(u1){\n                        case 0:\n                            s1[a1++] = r1[l1 >> 2], o1 = (3 & l1) << 4, u1 = 1;\n                            break;\n                        case 1:\n                            s1[a1++] = r1[o1 | l1 >> 4], o1 = (15 & l1) << 2, u1 = 2;\n                            break;\n                        case 2:\n                            s1[a1++] = r1[o1 | l1 >> 6], s1[a1++] = r1[63 & l1], u1 = 0;\n                    }\n                    a1 > 8191 && ((i1 || (i1 = [])).push(String.fromCharCode.apply(String, s1)), a1 = 0);\n                }\n                return u1 && (s1[a1++] = r1[o1], s1[a1++] = 61, 1 === u1 && (s1[a1++] = 61)), i1 ? (a1 && i1.push(String.fromCharCode.apply(String, s1.slice(0, a1))), i1.join(\"\")) : String.fromCharCode.apply(String, s1.slice(0, a1));\n            };\n            var s1 = \"invalid encoding\";\n            n1.decode = function(e1, t1, n1) {\n                for(var r1, i1 = n1, a1 = 0, u1 = 0; u1 < e1.length;){\n                    var l1 = e1.charCodeAt(u1++);\n                    if (61 === l1 && a1 > 1) break;\n                    if (void 0 === (l1 = o1[l1])) throw Error(s1);\n                    switch(a1){\n                        case 0:\n                            r1 = l1, a1 = 1;\n                            break;\n                        case 1:\n                            t1[n1++] = r1 << 2 | (48 & l1) >> 4, r1 = l1, a1 = 2;\n                            break;\n                        case 2:\n                            t1[n1++] = (15 & r1) << 4 | (60 & l1) >> 2, r1 = l1, a1 = 3;\n                            break;\n                        case 3:\n                            t1[n1++] = (3 & r1) << 6 | l1, a1 = 0;\n                    }\n                }\n                if (1 === a1) throw Error(s1);\n                return n1 - i1;\n            }, n1.test = function(e1) {\n                return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e1);\n            };\n        },\n        9211: (e1)=>{\n            \"use strict\";\n            function t1() {\n                this._listeners = {};\n            }\n            e1.exports = t1, t1.prototype.on = function(e1, t1, n1) {\n                return (this._listeners[e1] || (this._listeners[e1] = [])).push({\n                    fn: t1,\n                    ctx: n1 || this\n                }), this;\n            }, t1.prototype.off = function(e1, t1) {\n                if (void 0 === e1) this._listeners = {};\n                else if (void 0 === t1) this._listeners[e1] = [];\n                else for(var n1 = this._listeners[e1], r1 = 0; r1 < n1.length;)n1[r1].fn === t1 ? n1.splice(r1, 1) : ++r1;\n                return this;\n            }, t1.prototype.emit = function(e1) {\n                var t1 = this._listeners[e1];\n                if (t1) {\n                    for(var n1 = [], r1 = 1; r1 < arguments.length;)n1.push(arguments[r1++]);\n                    for(r1 = 0; r1 < t1.length;)t1[r1].fn.apply(t1[r1++].ctx, n1);\n                }\n                return this;\n            };\n        },\n        945: (e1)=>{\n            \"use strict\";\n            function t1(e1) {\n                return \"undefined\" != typeof Float32Array ? function() {\n                    var t1 = new Float32Array([\n                        -0\n                    ]), n1 = new Uint8Array(t1.buffer), r1 = 128 === n1[3];\n                    function o1(e1, r1, o1) {\n                        t1[0] = e1, r1[o1] = n1[0], r1[o1 + 1] = n1[1], r1[o1 + 2] = n1[2], r1[o1 + 3] = n1[3];\n                    }\n                    function i1(e1, r1, o1) {\n                        t1[0] = e1, r1[o1] = n1[3], r1[o1 + 1] = n1[2], r1[o1 + 2] = n1[1], r1[o1 + 3] = n1[0];\n                    }\n                    function s1(e1, r1) {\n                        return n1[0] = e1[r1], n1[1] = e1[r1 + 1], n1[2] = e1[r1 + 2], n1[3] = e1[r1 + 3], t1[0];\n                    }\n                    function a1(e1, r1) {\n                        return n1[3] = e1[r1], n1[2] = e1[r1 + 1], n1[1] = e1[r1 + 2], n1[0] = e1[r1 + 3], t1[0];\n                    }\n                    e1.writeFloatLE = r1 ? o1 : i1, e1.writeFloatBE = r1 ? i1 : o1, e1.readFloatLE = r1 ? s1 : a1, e1.readFloatBE = r1 ? a1 : s1;\n                }() : function() {\n                    function t1(e1, t1, n1, r1) {\n                        var o1 = t1 < 0 ? 1 : 0;\n                        if (o1 && (t1 = -t1), 0 === t1) e1(1 / t1 > 0 ? 0 : 2147483648, n1, r1);\n                        else if (isNaN(t1)) e1(2143289344, n1, r1);\n                        else if (t1 > 34028234663852886e22) e1((o1 << 31 | 2139095040) >>> 0, n1, r1);\n                        else if (t1 < 11754943508222875e-54) e1((o1 << 31 | Math.round(t1 / 1401298464324817e-60)) >>> 0, n1, r1);\n                        else {\n                            var i1 = Math.floor(Math.log(t1) / Math.LN2);\n                            e1((o1 << 31 | i1 + 127 << 23 | 8388607 & Math.round(t1 * Math.pow(2, -i1) * 8388608)) >>> 0, n1, r1);\n                        }\n                    }\n                    function s1(e1, t1, n1) {\n                        var r1 = e1(t1, n1), o1 = 2 * (r1 >> 31) + 1, i1 = r1 >>> 23 & 255, s1 = 8388607 & r1;\n                        return 255 === i1 ? s1 ? NaN : o1 * (1 / 0) : 0 === i1 ? 1401298464324817e-60 * o1 * s1 : o1 * Math.pow(2, i1 - 150) * (s1 + 8388608);\n                    }\n                    e1.writeFloatLE = t1.bind(null, n1), e1.writeFloatBE = t1.bind(null, r1), e1.readFloatLE = s1.bind(null, o1), e1.readFloatBE = s1.bind(null, i1);\n                }(), \"undefined\" != typeof Float64Array ? function() {\n                    var t1 = new Float64Array([\n                        -0\n                    ]), n1 = new Uint8Array(t1.buffer), r1 = 128 === n1[7];\n                    function o1(e1, r1, o1) {\n                        t1[0] = e1, r1[o1] = n1[0], r1[o1 + 1] = n1[1], r1[o1 + 2] = n1[2], r1[o1 + 3] = n1[3], r1[o1 + 4] = n1[4], r1[o1 + 5] = n1[5], r1[o1 + 6] = n1[6], r1[o1 + 7] = n1[7];\n                    }\n                    function i1(e1, r1, o1) {\n                        t1[0] = e1, r1[o1] = n1[7], r1[o1 + 1] = n1[6], r1[o1 + 2] = n1[5], r1[o1 + 3] = n1[4], r1[o1 + 4] = n1[3], r1[o1 + 5] = n1[2], r1[o1 + 6] = n1[1], r1[o1 + 7] = n1[0];\n                    }\n                    function s1(e1, r1) {\n                        return n1[0] = e1[r1], n1[1] = e1[r1 + 1], n1[2] = e1[r1 + 2], n1[3] = e1[r1 + 3], n1[4] = e1[r1 + 4], n1[5] = e1[r1 + 5], n1[6] = e1[r1 + 6], n1[7] = e1[r1 + 7], t1[0];\n                    }\n                    function a1(e1, r1) {\n                        return n1[7] = e1[r1], n1[6] = e1[r1 + 1], n1[5] = e1[r1 + 2], n1[4] = e1[r1 + 3], n1[3] = e1[r1 + 4], n1[2] = e1[r1 + 5], n1[1] = e1[r1 + 6], n1[0] = e1[r1 + 7], t1[0];\n                    }\n                    e1.writeDoubleLE = r1 ? o1 : i1, e1.writeDoubleBE = r1 ? i1 : o1, e1.readDoubleLE = r1 ? s1 : a1, e1.readDoubleBE = r1 ? a1 : s1;\n                }() : function() {\n                    function t1(e1, t1, n1, r1, o1, i1) {\n                        var s1 = r1 < 0 ? 1 : 0;\n                        if (s1 && (r1 = -r1), 0 === r1) e1(0, o1, i1 + t1), e1(1 / r1 > 0 ? 0 : 2147483648, o1, i1 + n1);\n                        else if (isNaN(r1)) e1(0, o1, i1 + t1), e1(2146959360, o1, i1 + n1);\n                        else if (r1 > 17976931348623157e292) e1(0, o1, i1 + t1), e1((s1 << 31 | 2146435072) >>> 0, o1, i1 + n1);\n                        else {\n                            var a1;\n                            if (r1 < 22250738585072014e-324) e1((a1 = r1 / 5e-324) >>> 0, o1, i1 + t1), e1((s1 << 31 | a1 / 4294967296) >>> 0, o1, i1 + n1);\n                            else {\n                                var u1 = Math.floor(Math.log(r1) / Math.LN2);\n                                1024 === u1 && (u1 = 1023), e1(4503599627370496 * (a1 = r1 * Math.pow(2, -u1)) >>> 0, o1, i1 + t1), e1((s1 << 31 | u1 + 1023 << 20 | 1048576 * a1 & 1048575) >>> 0, o1, i1 + n1);\n                            }\n                        }\n                    }\n                    function s1(e1, t1, n1, r1, o1) {\n                        var i1 = e1(r1, o1 + t1), s1 = e1(r1, o1 + n1), a1 = 2 * (s1 >> 31) + 1, u1 = s1 >>> 20 & 2047, l1 = 4294967296 * (1048575 & s1) + i1;\n                        return 2047 === u1 ? l1 ? NaN : a1 * (1 / 0) : 0 === u1 ? 5e-324 * a1 * l1 : a1 * Math.pow(2, u1 - 1075) * (l1 + 4503599627370496);\n                    }\n                    e1.writeDoubleLE = t1.bind(null, n1, 0, 4), e1.writeDoubleBE = t1.bind(null, r1, 4, 0), e1.readDoubleLE = s1.bind(null, o1, 0, 4), e1.readDoubleBE = s1.bind(null, i1, 4, 0);\n                }(), e1;\n            }\n            function n1(e1, t1, n1) {\n                t1[n1] = 255 & e1, t1[n1 + 1] = e1 >>> 8 & 255, t1[n1 + 2] = e1 >>> 16 & 255, t1[n1 + 3] = e1 >>> 24;\n            }\n            function r1(e1, t1, n1) {\n                t1[n1] = e1 >>> 24, t1[n1 + 1] = e1 >>> 16 & 255, t1[n1 + 2] = e1 >>> 8 & 255, t1[n1 + 3] = 255 & e1;\n            }\n            function o1(e1, t1) {\n                return (e1[t1] | e1[t1 + 1] << 8 | e1[t1 + 2] << 16 | e1[t1 + 3] << 24) >>> 0;\n            }\n            function i1(e1, t1) {\n                return (e1[t1] << 24 | e1[t1 + 1] << 16 | e1[t1 + 2] << 8 | e1[t1 + 3]) >>> 0;\n            }\n            e1.exports = t1(t1);\n        },\n        7199: (module)=>{\n            \"use strict\";\n            function inquire(moduleName) {\n                try {\n                    var mod = eval(\"quire\".replace(/^/, \"re\"))(moduleName);\n                    if (mod && (mod.length || Object.keys(mod).length)) return mod;\n                } catch (e) {}\n                return null;\n            }\n            module.exports = inquire;\n        },\n        6662: (e1)=>{\n            \"use strict\";\n            e1.exports = function(e1, t1, n1) {\n                var r1 = n1 || 8192, o1 = r1 >>> 1, i1 = null, s1 = r1;\n                return function(n1) {\n                    if (n1 < 1 || n1 > o1) return e1(n1);\n                    s1 + n1 > r1 && (i1 = e1(r1), s1 = 0);\n                    var a1 = t1.call(i1, s1, s1 += n1);\n                    return 7 & s1 && (s1 = 1 + (7 | s1)), a1;\n                };\n            };\n        },\n        4997: (e1, t1)=>{\n            \"use strict\";\n            var n1 = t1;\n            n1.length = function(e1) {\n                for(var t1 = 0, n1 = 0, r1 = 0; r1 < e1.length; ++r1)(n1 = e1.charCodeAt(r1)) < 128 ? t1 += 1 : n1 < 2048 ? t1 += 2 : 55296 == (64512 & n1) && 56320 == (64512 & e1.charCodeAt(r1 + 1)) ? (++r1, t1 += 4) : t1 += 3;\n                return t1;\n            }, n1.read = function(e1, t1, n1) {\n                if (n1 - t1 < 1) return \"\";\n                for(var r1, o1 = null, i1 = [], s1 = 0; t1 < n1;)(r1 = e1[t1++]) < 128 ? i1[s1++] = r1 : r1 > 191 && r1 < 224 ? i1[s1++] = (31 & r1) << 6 | 63 & e1[t1++] : r1 > 239 && r1 < 365 ? (r1 = ((7 & r1) << 18 | (63 & e1[t1++]) << 12 | (63 & e1[t1++]) << 6 | 63 & e1[t1++]) - 65536, i1[s1++] = 55296 + (r1 >> 10), i1[s1++] = 56320 + (1023 & r1)) : i1[s1++] = (15 & r1) << 12 | (63 & e1[t1++]) << 6 | 63 & e1[t1++], s1 > 8191 && ((o1 || (o1 = [])).push(String.fromCharCode.apply(String, i1)), s1 = 0);\n                return o1 ? (s1 && o1.push(String.fromCharCode.apply(String, i1.slice(0, s1))), o1.join(\"\")) : String.fromCharCode.apply(String, i1.slice(0, s1));\n            }, n1.write = function(e1, t1, n1) {\n                for(var r1, o1, i1 = n1, s1 = 0; s1 < e1.length; ++s1)(r1 = e1.charCodeAt(s1)) < 128 ? t1[n1++] = r1 : r1 < 2048 ? (t1[n1++] = r1 >> 6 | 192, t1[n1++] = 63 & r1 | 128) : 55296 == (64512 & r1) && 56320 == (64512 & (o1 = e1.charCodeAt(s1 + 1))) ? (r1 = 65536 + ((1023 & r1) << 10) + (1023 & o1), ++s1, t1[n1++] = r1 >> 18 | 240, t1[n1++] = r1 >> 12 & 63 | 128, t1[n1++] = r1 >> 6 & 63 | 128, t1[n1++] = 63 & r1 | 128) : (t1[n1++] = r1 >> 12 | 224, t1[n1++] = r1 >> 6 & 63 | 128, t1[n1++] = 63 & r1 | 128);\n                return n1 - i1;\n            };\n        },\n        3442: (e1, t1)=>{\n            \"use strict\";\n            t1.__esModule = !0;\n            var n1 = function() {\n                function e1(t1) {\n                    if (!t1) throw new TypeError(\"Invalid argument; `value` has no value.\");\n                    this.value = e1.EMPTY, t1 && e1.isGuid(t1) && (this.value = t1);\n                }\n                return e1.isGuid = function(t1) {\n                    var n1 = t1.toString();\n                    return t1 && (t1 instanceof e1 || e1.validator.test(n1));\n                }, e1.create = function() {\n                    return new e1([\n                        e1.gen(2),\n                        e1.gen(1),\n                        e1.gen(1),\n                        e1.gen(1),\n                        e1.gen(3)\n                    ].join(\"-\"));\n                }, e1.createEmpty = function() {\n                    return new e1(\"emptyguid\");\n                }, e1.parse = function(t1) {\n                    return new e1(t1);\n                }, e1.raw = function() {\n                    return [\n                        e1.gen(2),\n                        e1.gen(1),\n                        e1.gen(1),\n                        e1.gen(1),\n                        e1.gen(3)\n                    ].join(\"-\");\n                }, e1.gen = function(e1) {\n                    for(var t1 = \"\", n1 = 0; n1 < e1; n1++)t1 += (65536 * (1 + Math.random()) | 0).toString(16).substring(1);\n                    return t1;\n                }, e1.prototype.equals = function(t1) {\n                    return e1.isGuid(t1) && this.value === t1.toString();\n                }, e1.prototype.isEmpty = function() {\n                    return this.value === e1.EMPTY;\n                }, e1.prototype.toString = function() {\n                    return this.value;\n                }, e1.prototype.toJSON = function() {\n                    return {\n                        value: this.value\n                    };\n                }, e1.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\"), e1.EMPTY = \"00000000-0000-0000-0000-000000000000\", e1;\n            }();\n            t1.Guid = n1;\n        },\n        2100: (e1, t1, n1)=>{\n            \"use strict\";\n            e1.exports = n1(9482);\n        },\n        9482: (e1, t1, n1)=>{\n            \"use strict\";\n            var r1 = t1;\n            function o1() {\n                r1.util._configure(), r1.Writer._configure(r1.BufferWriter), r1.Reader._configure(r1.BufferReader);\n            }\n            r1.build = \"minimal\", r1.Writer = n1(1173), r1.BufferWriter = n1(3155), r1.Reader = n1(1408), r1.BufferReader = n1(593), r1.util = n1(9693), r1.rpc = n1(5994), r1.roots = n1(5054), r1.configure = o1, o1();\n        },\n        1408: (e1, t1, n1)=>{\n            \"use strict\";\n            e1.exports = u1;\n            var r1, o1 = n1(9693), i1 = o1.LongBits, s1 = o1.utf8;\n            function a1(e1, t1) {\n                return RangeError(\"index out of range: \" + e1.pos + \" + \" + (t1 || 1) + \" > \" + e1.len);\n            }\n            function u1(e1) {\n                this.buf = e1, this.pos = 0, this.len = e1.length;\n            }\n            var l1, c1 = \"undefined\" != typeof Uint8Array ? function(e1) {\n                if (e1 instanceof Uint8Array || Array.isArray(e1)) return new u1(e1);\n                throw Error(\"illegal buffer\");\n            } : function(e1) {\n                if (Array.isArray(e1)) return new u1(e1);\n                throw Error(\"illegal buffer\");\n            }, p1 = function() {\n                return o1.Buffer ? function(e1) {\n                    return (u1.create = function(e1) {\n                        return o1.Buffer.isBuffer(e1) ? new r1(e1) : c1(e1);\n                    })(e1);\n                } : c1;\n            };\n            function d1() {\n                var e1 = new i1(0, 0), t1 = 0;\n                if (!(this.len - this.pos > 4)) {\n                    for(; t1 < 3; ++t1){\n                        if (this.pos >= this.len) throw a1(this);\n                        if (e1.lo = (e1.lo | (127 & this.buf[this.pos]) << 7 * t1) >>> 0, this.buf[this.pos++] < 128) return e1;\n                    }\n                    return e1.lo = (e1.lo | (127 & this.buf[this.pos++]) << 7 * t1) >>> 0, e1;\n                }\n                for(; t1 < 4; ++t1)if (e1.lo = (e1.lo | (127 & this.buf[this.pos]) << 7 * t1) >>> 0, this.buf[this.pos++] < 128) return e1;\n                if (e1.lo = (e1.lo | (127 & this.buf[this.pos]) << 28) >>> 0, e1.hi = (e1.hi | (127 & this.buf[this.pos]) >> 4) >>> 0, this.buf[this.pos++] < 128) return e1;\n                if (t1 = 0, this.len - this.pos > 4) {\n                    for(; t1 < 5; ++t1)if (e1.hi = (e1.hi | (127 & this.buf[this.pos]) << 7 * t1 + 3) >>> 0, this.buf[this.pos++] < 128) return e1;\n                } else for(; t1 < 5; ++t1){\n                    if (this.pos >= this.len) throw a1(this);\n                    if (e1.hi = (e1.hi | (127 & this.buf[this.pos]) << 7 * t1 + 3) >>> 0, this.buf[this.pos++] < 128) return e1;\n                }\n                throw Error(\"invalid varint encoding\");\n            }\n            function f1(e1, t1) {\n                return (e1[t1 - 4] | e1[t1 - 3] << 8 | e1[t1 - 2] << 16 | e1[t1 - 1] << 24) >>> 0;\n            }\n            function h1() {\n                if (this.pos + 8 > this.len) throw a1(this, 8);\n                return new i1(f1(this.buf, this.pos += 4), f1(this.buf, this.pos += 4));\n            }\n            u1.create = p1(), u1.prototype._slice = o1.Array.prototype.subarray || o1.Array.prototype.slice, u1.prototype.uint32 = (l1 = 4294967295, function() {\n                if (l1 = (127 & this.buf[this.pos]) >>> 0, this.buf[this.pos++] < 128) return l1;\n                if (l1 = (l1 | (127 & this.buf[this.pos]) << 7) >>> 0, this.buf[this.pos++] < 128) return l1;\n                if (l1 = (l1 | (127 & this.buf[this.pos]) << 14) >>> 0, this.buf[this.pos++] < 128) return l1;\n                if (l1 = (l1 | (127 & this.buf[this.pos]) << 21) >>> 0, this.buf[this.pos++] < 128) return l1;\n                if (l1 = (l1 | (15 & this.buf[this.pos]) << 28) >>> 0, this.buf[this.pos++] < 128) return l1;\n                if ((this.pos += 5) > this.len) throw this.pos = this.len, a1(this, 10);\n                return l1;\n            }), u1.prototype.int32 = function() {\n                return 0 | this.uint32();\n            }, u1.prototype.sint32 = function() {\n                var e1 = this.uint32();\n                return e1 >>> 1 ^ -(1 & e1) | 0;\n            }, u1.prototype.bool = function() {\n                return 0 !== this.uint32();\n            }, u1.prototype.fixed32 = function() {\n                if (this.pos + 4 > this.len) throw a1(this, 4);\n                return f1(this.buf, this.pos += 4);\n            }, u1.prototype.sfixed32 = function() {\n                if (this.pos + 4 > this.len) throw a1(this, 4);\n                return 0 | f1(this.buf, this.pos += 4);\n            }, u1.prototype.float = function() {\n                if (this.pos + 4 > this.len) throw a1(this, 4);\n                var e1 = o1.float.readFloatLE(this.buf, this.pos);\n                return this.pos += 4, e1;\n            }, u1.prototype.double = function() {\n                if (this.pos + 8 > this.len) throw a1(this, 4);\n                var e1 = o1.float.readDoubleLE(this.buf, this.pos);\n                return this.pos += 8, e1;\n            }, u1.prototype.bytes = function() {\n                var e1 = this.uint32(), t1 = this.pos, n1 = this.pos + e1;\n                if (n1 > this.len) throw a1(this, e1);\n                return this.pos += e1, Array.isArray(this.buf) ? this.buf.slice(t1, n1) : t1 === n1 ? new this.buf.constructor(0) : this._slice.call(this.buf, t1, n1);\n            }, u1.prototype.string = function() {\n                var e1 = this.bytes();\n                return s1.read(e1, 0, e1.length);\n            }, u1.prototype.skip = function(e1) {\n                if (\"number\" == typeof e1) {\n                    if (this.pos + e1 > this.len) throw a1(this, e1);\n                    this.pos += e1;\n                } else do {\n                    if (this.pos >= this.len) throw a1(this);\n                }while (128 & this.buf[this.pos++]);\n                return this;\n            }, u1.prototype.skipType = function(e1) {\n                switch(e1){\n                    case 0:\n                        this.skip();\n                        break;\n                    case 1:\n                        this.skip(8);\n                        break;\n                    case 2:\n                        this.skip(this.uint32());\n                        break;\n                    case 3:\n                        for(; 4 != (e1 = 7 & this.uint32());)this.skipType(e1);\n                        break;\n                    case 5:\n                        this.skip(4);\n                        break;\n                    default:\n                        throw Error(\"invalid wire type \" + e1 + \" at offset \" + this.pos);\n                }\n                return this;\n            }, u1._configure = function(e1) {\n                r1 = e1, u1.create = p1(), r1._configure();\n                var t1 = o1.Long ? \"toLong\" : \"toNumber\";\n                o1.merge(u1.prototype, {\n                    int64: function() {\n                        return d1.call(this)[t1](!1);\n                    },\n                    uint64: function() {\n                        return d1.call(this)[t1](!0);\n                    },\n                    sint64: function() {\n                        return d1.call(this).zzDecode()[t1](!1);\n                    },\n                    fixed64: function() {\n                        return h1.call(this)[t1](!0);\n                    },\n                    sfixed64: function() {\n                        return h1.call(this)[t1](!1);\n                    }\n                });\n            };\n        },\n        593: (e1, t1, n1)=>{\n            \"use strict\";\n            e1.exports = i1;\n            var r1 = n1(1408);\n            (i1.prototype = Object.create(r1.prototype)).constructor = i1;\n            var o1 = n1(9693);\n            function i1(e1) {\n                r1.call(this, e1);\n            }\n            i1._configure = function() {\n                o1.Buffer && (i1.prototype._slice = o1.Buffer.prototype.slice);\n            }, i1.prototype.string = function() {\n                var e1 = this.uint32();\n                return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + e1, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + e1, this.len));\n            }, i1._configure();\n        },\n        5054: (e1)=>{\n            \"use strict\";\n            e1.exports = {};\n        },\n        5994: (e1, t1, n1)=>{\n            \"use strict\";\n            t1.Service = n1(7948);\n        },\n        7948: (e1, t1, n1)=>{\n            \"use strict\";\n            e1.exports = o1;\n            var r1 = n1(9693);\n            function o1(e1, t1, n1) {\n                if (\"function\" != typeof e1) throw TypeError(\"rpcImpl must be a function\");\n                r1.EventEmitter.call(this), this.rpcImpl = e1, this.requestDelimited = Boolean(t1), this.responseDelimited = Boolean(n1);\n            }\n            (o1.prototype = Object.create(r1.EventEmitter.prototype)).constructor = o1, o1.prototype.rpcCall = function e1(t1, n1, o1, i1, s1) {\n                if (!i1) throw TypeError(\"request must be specified\");\n                var a1 = this;\n                if (!s1) return r1.asPromise(e1, a1, t1, n1, o1, i1);\n                if (a1.rpcImpl) try {\n                    return a1.rpcImpl(t1, n1[a1.requestDelimited ? \"encodeDelimited\" : \"encode\"](i1).finish(), function(e1, n1) {\n                        if (e1) return a1.emit(\"error\", e1, t1), s1(e1);\n                        if (null !== n1) {\n                            if (!(n1 instanceof o1)) try {\n                                n1 = o1[a1.responseDelimited ? \"decodeDelimited\" : \"decode\"](n1);\n                            } catch (e1) {\n                                return a1.emit(\"error\", e1, t1), s1(e1);\n                            }\n                            return a1.emit(\"data\", n1, t1), s1(null, n1);\n                        }\n                        a1.end(!0);\n                    });\n                } catch (e1) {\n                    return a1.emit(\"error\", e1, t1), void setTimeout(function() {\n                        s1(e1);\n                    }, 0);\n                }\n                else setTimeout(function() {\n                    s1(Error(\"already ended\"));\n                }, 0);\n            }, o1.prototype.end = function(e1) {\n                return this.rpcImpl && (e1 || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit(\"end\").off()), this;\n            };\n        },\n        1945: (e1, t1, n1)=>{\n            \"use strict\";\n            e1.exports = o1;\n            var r1 = n1(9693);\n            function o1(e1, t1) {\n                this.lo = e1 >>> 0, this.hi = t1 >>> 0;\n            }\n            var i1 = o1.zero = new o1(0, 0);\n            i1.toNumber = function() {\n                return 0;\n            }, i1.zzEncode = i1.zzDecode = function() {\n                return this;\n            }, i1.length = function() {\n                return 1;\n            };\n            var s1 = o1.zeroHash = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n            o1.fromNumber = function(e1) {\n                if (0 === e1) return i1;\n                var t1 = e1 < 0;\n                t1 && (e1 = -e1);\n                var n1 = e1 >>> 0, r1 = (e1 - n1) / 4294967296 >>> 0;\n                return t1 && (r1 = ~r1 >>> 0, n1 = ~n1 >>> 0, ++n1 > 4294967295 && (n1 = 0, ++r1 > 4294967295 && (r1 = 0))), new o1(n1, r1);\n            }, o1.from = function(e1) {\n                if (\"number\" == typeof e1) return o1.fromNumber(e1);\n                if (r1.isString(e1)) {\n                    if (!r1.Long) return o1.fromNumber(parseInt(e1, 10));\n                    e1 = r1.Long.fromString(e1);\n                }\n                return e1.low || e1.high ? new o1(e1.low >>> 0, e1.high >>> 0) : i1;\n            }, o1.prototype.toNumber = function(e1) {\n                if (!e1 && this.hi >>> 31) {\n                    var t1 = 1 + ~this.lo >>> 0, n1 = ~this.hi >>> 0;\n                    return t1 || (n1 = n1 + 1 >>> 0), -(t1 + 4294967296 * n1);\n                }\n                return this.lo + 4294967296 * this.hi;\n            }, o1.prototype.toLong = function(e1) {\n                return r1.Long ? new r1.Long(0 | this.lo, 0 | this.hi, Boolean(e1)) : {\n                    low: 0 | this.lo,\n                    high: 0 | this.hi,\n                    unsigned: Boolean(e1)\n                };\n            };\n            var a1 = String.prototype.charCodeAt;\n            o1.fromHash = function(e1) {\n                return e1 === s1 ? i1 : new o1((a1.call(e1, 0) | a1.call(e1, 1) << 8 | a1.call(e1, 2) << 16 | a1.call(e1, 3) << 24) >>> 0, (a1.call(e1, 4) | a1.call(e1, 5) << 8 | a1.call(e1, 6) << 16 | a1.call(e1, 7) << 24) >>> 0);\n            }, o1.prototype.toHash = function() {\n                return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n            }, o1.prototype.zzEncode = function() {\n                var e1 = this.hi >> 31;\n                return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ e1) >>> 0, this.lo = (this.lo << 1 ^ e1) >>> 0, this;\n            }, o1.prototype.zzDecode = function() {\n                var e1 = -(1 & this.lo);\n                return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ e1) >>> 0, this.hi = (this.hi >>> 1 ^ e1) >>> 0, this;\n            }, o1.prototype.length = function() {\n                var e1 = this.lo, t1 = (this.lo >>> 28 | this.hi << 4) >>> 0, n1 = this.hi >>> 24;\n                return 0 === n1 ? 0 === t1 ? e1 < 16384 ? e1 < 128 ? 1 : 2 : e1 < 2097152 ? 3 : 4 : t1 < 16384 ? t1 < 128 ? 5 : 6 : t1 < 2097152 ? 7 : 8 : n1 < 128 ? 9 : 10;\n            };\n        },\n        9693: function(e1, t1, n1) {\n            \"use strict\";\n            var r1 = t1;\n            function o1(e1, t1, n1) {\n                for(var r1 = Object.keys(t1), o1 = 0; o1 < r1.length; ++o1)void 0 !== e1[r1[o1]] && n1 || (e1[r1[o1]] = t1[r1[o1]]);\n                return e1;\n            }\n            function i1(e1) {\n                function t1(e1, n1) {\n                    if (!(this instanceof t1)) return new t1(e1, n1);\n                    Object.defineProperty(this, \"message\", {\n                        get: function() {\n                            return e1;\n                        }\n                    }), Error.captureStackTrace ? Error.captureStackTrace(this, t1) : Object.defineProperty(this, \"stack\", {\n                        value: (new Error).stack || \"\"\n                    }), n1 && o1(this, n1);\n                }\n                return t1.prototype = Object.create(Error.prototype, {\n                    constructor: {\n                        value: t1,\n                        writable: !0,\n                        enumerable: !1,\n                        configurable: !0\n                    },\n                    name: {\n                        get: function() {\n                            return e1;\n                        },\n                        set: void 0,\n                        enumerable: !1,\n                        configurable: !0\n                    },\n                    toString: {\n                        value: function() {\n                            return this.name + \": \" + this.message;\n                        },\n                        writable: !0,\n                        enumerable: !1,\n                        configurable: !0\n                    }\n                }), t1;\n            }\n            r1.asPromise = n1(4537), r1.base64 = n1(7419), r1.EventEmitter = n1(9211), r1.float = n1(945), r1.inquire = n1(7199), r1.utf8 = n1(4997), r1.pool = n1(6662), r1.LongBits = n1(1945), r1.isNode = Boolean(\"undefined\" != typeof global && global && global.process && global.process.versions && global.process.versions.node), r1.global = r1.isNode && global ||  false && 0 || \"undefined\" != typeof self && self || this, r1.emptyArray = Object.freeze ? Object.freeze([]) : [], r1.emptyObject = Object.freeze ? Object.freeze({}) : {}, r1.isInteger = Number.isInteger || function(e1) {\n                return \"number\" == typeof e1 && isFinite(e1) && Math.floor(e1) === e1;\n            }, r1.isString = function(e1) {\n                return \"string\" == typeof e1 || e1 instanceof String;\n            }, r1.isObject = function(e1) {\n                return e1 && \"object\" == typeof e1;\n            }, r1.isset = r1.isSet = function(e1, t1) {\n                var n1 = e1[t1];\n                return !(null == n1 || !e1.hasOwnProperty(t1)) && (\"object\" != typeof n1 || (Array.isArray(n1) ? n1.length : Object.keys(n1).length) > 0);\n            }, r1.Buffer = function() {\n                try {\n                    var e1 = r1.inquire(\"buffer\").Buffer;\n                    return e1.prototype.utf8Write ? e1 : null;\n                } catch (e1) {\n                    return null;\n                }\n            }(), r1._Buffer_from = null, r1._Buffer_allocUnsafe = null, r1.newBuffer = function(e1) {\n                return \"number\" == typeof e1 ? r1.Buffer ? r1._Buffer_allocUnsafe(e1) : new r1.Array(e1) : r1.Buffer ? r1._Buffer_from(e1) : \"undefined\" == typeof Uint8Array ? e1 : new Uint8Array(e1);\n            }, r1.Array = \"undefined\" != typeof Uint8Array ? Uint8Array : Array, r1.Long = r1.global.dcodeIO && r1.global.dcodeIO.Long || r1.global.Long || r1.inquire(\"long\"), r1.key2Re = /^true|false|0|1$/, r1.key32Re = /^-?(?:0|[1-9][0-9]*)$/, r1.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/, r1.longToHash = function(e1) {\n                return e1 ? r1.LongBits.from(e1).toHash() : r1.LongBits.zeroHash;\n            }, r1.longFromHash = function(e1, t1) {\n                var n1 = r1.LongBits.fromHash(e1);\n                return r1.Long ? r1.Long.fromBits(n1.lo, n1.hi, t1) : n1.toNumber(Boolean(t1));\n            }, r1.merge = o1, r1.lcFirst = function(e1) {\n                return e1.charAt(0).toLowerCase() + e1.substring(1);\n            }, r1.newError = i1, r1.ProtocolError = i1(\"ProtocolError\"), r1.oneOfGetter = function(e1) {\n                for(var t1 = {}, n1 = 0; n1 < e1.length; ++n1)t1[e1[n1]] = 1;\n                return function() {\n                    for(var e1 = Object.keys(this), n1 = e1.length - 1; n1 > -1; --n1)if (1 === t1[e1[n1]] && void 0 !== this[e1[n1]] && null !== this[e1[n1]]) return e1[n1];\n                };\n            }, r1.oneOfSetter = function(e1) {\n                return function(t1) {\n                    for(var n1 = 0; n1 < e1.length; ++n1)e1[n1] !== t1 && delete this[e1[n1]];\n                };\n            }, r1.toJSONOptions = {\n                longs: String,\n                enums: String,\n                bytes: String,\n                json: !0\n            }, r1._configure = function() {\n                var e1 = r1.Buffer;\n                e1 ? (r1._Buffer_from = e1.from !== Uint8Array.from && e1.from || function(t1, n1) {\n                    return new e1(t1, n1);\n                }, r1._Buffer_allocUnsafe = e1.allocUnsafe || function(t1) {\n                    return new e1(t1);\n                }) : r1._Buffer_from = r1._Buffer_allocUnsafe = null;\n            };\n        },\n        1173: (e1, t1, n1)=>{\n            \"use strict\";\n            e1.exports = p1;\n            var r1, o1 = n1(9693), i1 = o1.LongBits, s1 = o1.base64, a1 = o1.utf8;\n            function u1(e1, t1, n1) {\n                this.fn = e1, this.len = t1, this.next = void 0, this.val = n1;\n            }\n            function l1() {}\n            function c1(e1) {\n                this.head = e1.head, this.tail = e1.tail, this.len = e1.len, this.next = e1.states;\n            }\n            function p1() {\n                this.len = 0, this.head = new u1(l1, 0, 0), this.tail = this.head, this.states = null;\n            }\n            var d1 = function() {\n                return o1.Buffer ? function() {\n                    return (p1.create = function() {\n                        return new r1;\n                    })();\n                } : function() {\n                    return new p1;\n                };\n            };\n            function f1(e1, t1, n1) {\n                t1[n1] = 255 & e1;\n            }\n            function h1(e1, t1) {\n                this.len = e1, this.next = void 0, this.val = t1;\n            }\n            function g1(e1, t1, n1) {\n                for(; e1.hi;)t1[n1++] = 127 & e1.lo | 128, e1.lo = (e1.lo >>> 7 | e1.hi << 25) >>> 0, e1.hi >>>= 7;\n                for(; e1.lo > 127;)t1[n1++] = 127 & e1.lo | 128, e1.lo = e1.lo >>> 7;\n                t1[n1++] = e1.lo;\n            }\n            function b1(e1, t1, n1) {\n                t1[n1] = 255 & e1, t1[n1 + 1] = e1 >>> 8 & 255, t1[n1 + 2] = e1 >>> 16 & 255, t1[n1 + 3] = e1 >>> 24;\n            }\n            p1.create = d1(), p1.alloc = function(e1) {\n                return new o1.Array(e1);\n            }, o1.Array !== Array && (p1.alloc = o1.pool(p1.alloc, o1.Array.prototype.subarray)), p1.prototype._push = function(e1, t1, n1) {\n                return this.tail = this.tail.next = new u1(e1, t1, n1), this.len += t1, this;\n            }, h1.prototype = Object.create(u1.prototype), h1.prototype.fn = function(e1, t1, n1) {\n                for(; e1 > 127;)t1[n1++] = 127 & e1 | 128, e1 >>>= 7;\n                t1[n1] = e1;\n            }, p1.prototype.uint32 = function(e1) {\n                return this.len += (this.tail = this.tail.next = new h1((e1 >>>= 0) < 128 ? 1 : e1 < 16384 ? 2 : e1 < 2097152 ? 3 : e1 < 268435456 ? 4 : 5, e1)).len, this;\n            }, p1.prototype.int32 = function(e1) {\n                return e1 < 0 ? this._push(g1, 10, i1.fromNumber(e1)) : this.uint32(e1);\n            }, p1.prototype.sint32 = function(e1) {\n                return this.uint32((e1 << 1 ^ e1 >> 31) >>> 0);\n            }, p1.prototype.uint64 = function(e1) {\n                var t1 = i1.from(e1);\n                return this._push(g1, t1.length(), t1);\n            }, p1.prototype.int64 = p1.prototype.uint64, p1.prototype.sint64 = function(e1) {\n                var t1 = i1.from(e1).zzEncode();\n                return this._push(g1, t1.length(), t1);\n            }, p1.prototype.bool = function(e1) {\n                return this._push(f1, 1, e1 ? 1 : 0);\n            }, p1.prototype.fixed32 = function(e1) {\n                return this._push(b1, 4, e1 >>> 0);\n            }, p1.prototype.sfixed32 = p1.prototype.fixed32, p1.prototype.fixed64 = function(e1) {\n                var t1 = i1.from(e1);\n                return this._push(b1, 4, t1.lo)._push(b1, 4, t1.hi);\n            }, p1.prototype.sfixed64 = p1.prototype.fixed64, p1.prototype.float = function(e1) {\n                return this._push(o1.float.writeFloatLE, 4, e1);\n            }, p1.prototype.double = function(e1) {\n                return this._push(o1.float.writeDoubleLE, 8, e1);\n            };\n            var m1 = o1.Array.prototype.set ? function(e1, t1, n1) {\n                t1.set(e1, n1);\n            } : function(e1, t1, n1) {\n                for(var r1 = 0; r1 < e1.length; ++r1)t1[n1 + r1] = e1[r1];\n            };\n            p1.prototype.bytes = function(e1) {\n                var t1 = e1.length >>> 0;\n                if (!t1) return this._push(f1, 1, 0);\n                if (o1.isString(e1)) {\n                    var n1 = p1.alloc(t1 = s1.length(e1));\n                    s1.decode(e1, n1, 0), e1 = n1;\n                }\n                return this.uint32(t1)._push(m1, t1, e1);\n            }, p1.prototype.string = function(e1) {\n                var t1 = a1.length(e1);\n                return t1 ? this.uint32(t1)._push(a1.write, t1, e1) : this._push(f1, 1, 0);\n            }, p1.prototype.fork = function() {\n                return this.states = new c1(this), this.head = this.tail = new u1(l1, 0, 0), this.len = 0, this;\n            }, p1.prototype.reset = function() {\n                return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new u1(l1, 0, 0), this.len = 0), this;\n            }, p1.prototype.ldelim = function() {\n                var e1 = this.head, t1 = this.tail, n1 = this.len;\n                return this.reset().uint32(n1), n1 && (this.tail.next = e1.next, this.tail = t1, this.len += n1), this;\n            }, p1.prototype.finish = function() {\n                for(var e1 = this.head.next, t1 = this.constructor.alloc(this.len), n1 = 0; e1;)e1.fn(e1.val, t1, n1), n1 += e1.len, e1 = e1.next;\n                return t1;\n            }, p1._configure = function(e1) {\n                r1 = e1, p1.create = d1(), r1._configure();\n            };\n        },\n        3155: (e1, t1, n1)=>{\n            \"use strict\";\n            e1.exports = i1;\n            var r1 = n1(1173);\n            (i1.prototype = Object.create(r1.prototype)).constructor = i1;\n            var o1 = n1(9693);\n            function i1() {\n                r1.call(this);\n            }\n            function s1(e1, t1, n1) {\n                e1.length < 40 ? o1.utf8.write(e1, t1, n1) : t1.utf8Write ? t1.utf8Write(e1, n1) : t1.write(e1, n1);\n            }\n            i1._configure = function() {\n                i1.alloc = o1._Buffer_allocUnsafe, i1.writeBytesBuffer = o1.Buffer && o1.Buffer.prototype instanceof Uint8Array && \"set\" === o1.Buffer.prototype.set.name ? function(e1, t1, n1) {\n                    t1.set(e1, n1);\n                } : function(e1, t1, n1) {\n                    if (e1.copy) e1.copy(t1, n1, 0, e1.length);\n                    else for(var r1 = 0; r1 < e1.length;)t1[n1++] = e1[r1++];\n                };\n            }, i1.prototype.bytes = function(e1) {\n                o1.isString(e1) && (e1 = o1._Buffer_from(e1, \"base64\"));\n                var t1 = e1.length >>> 0;\n                return this.uint32(t1), t1 && this._push(i1.writeBytesBuffer, t1, e1), this;\n            }, i1.prototype.string = function(e1) {\n                var t1 = o1.Buffer.byteLength(e1);\n                return this.uint32(t1), t1 && this._push(s1, t1, e1), this;\n            }, i1._configure();\n        },\n        4154: (e1)=>{\n            \"use strict\";\n            e1.exports = '\"use strict\";var e={},a=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;if(a){var r=require(\"worker_threads\"),t=r.parentPort;t.on(\"message\",(e=>onmessage({data:e})));var s=require(\"fs\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,\"utf8\")+\"//# sourceURL=\"+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(\" \");a?s.writeSync(2,e+\"\\\\n\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\"load\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\"loaded\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:\"callHandler\",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\"string\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\"run\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\"unwind\"!=e)throw e}}else\"cancel\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\"setimmediate\"===r.data.target||(\"checkMailbox\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d(\"worker.js received unknown command \"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\n';\n        },\n        6231: (e1)=>{\n            \"use strict\";\n            e1.exports = __webpack_require__(/*! fs */ \"fs\");\n        },\n        9719: (e1)=>{\n            \"use strict\";\n            e1.exports = __webpack_require__(/*! os */ \"os\");\n        },\n        1423: (e1)=>{\n            \"use strict\";\n            e1.exports = __webpack_require__(/*! path */ \"path\");\n        },\n        498: (e1)=>{\n            \"use strict\";\n            e1.exports = __webpack_require__(/*! perf_hooks */ \"perf_hooks\");\n        },\n        6464: (e1)=>{\n            \"use strict\";\n            e1.exports = __webpack_require__(/*! util */ \"util\");\n        },\n        4564: (e1)=>{\n            \"use strict\";\n            e1.exports = __webpack_require__(/*! worker_threads */ \"worker_threads\");\n        },\n        6207: (e1)=>{\n            \"use strict\";\n            e1.exports = __webpack_require__(/*! onnxruntime-common */ \"(ssr)/./node_modules/onnxruntime-common/dist/cjs/index.js\");\n        },\n        6113: (e1)=>{\n            \"use strict\";\n            e1.exports = __webpack_require__(/*! crypto */ \"crypto\");\n        },\n        1583: (e1, t1)=>{\n            var n1, r1 = function(e1) {\n                \"use strict\";\n                Object.defineProperty(e1, \"__esModule\", {\n                    value: !0\n                }), e1.default = void 0;\n                var t1 = null;\n                try {\n                    t1 = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n                        0,\n                        97,\n                        115,\n                        109,\n                        1,\n                        0,\n                        0,\n                        0,\n                        1,\n                        13,\n                        2,\n                        96,\n                        0,\n                        1,\n                        127,\n                        96,\n                        4,\n                        127,\n                        127,\n                        127,\n                        127,\n                        1,\n                        127,\n                        3,\n                        7,\n                        6,\n                        0,\n                        1,\n                        1,\n                        1,\n                        1,\n                        1,\n                        6,\n                        6,\n                        1,\n                        127,\n                        1,\n                        65,\n                        0,\n                        11,\n                        7,\n                        50,\n                        6,\n                        3,\n                        109,\n                        117,\n                        108,\n                        0,\n                        1,\n                        5,\n                        100,\n                        105,\n                        118,\n                        95,\n                        115,\n                        0,\n                        2,\n                        5,\n                        100,\n                        105,\n                        118,\n                        95,\n                        117,\n                        0,\n                        3,\n                        5,\n                        114,\n                        101,\n                        109,\n                        95,\n                        115,\n                        0,\n                        4,\n                        5,\n                        114,\n                        101,\n                        109,\n                        95,\n                        117,\n                        0,\n                        5,\n                        8,\n                        103,\n                        101,\n                        116,\n                        95,\n                        104,\n                        105,\n                        103,\n                        104,\n                        0,\n                        0,\n                        10,\n                        191,\n                        1,\n                        6,\n                        4,\n                        0,\n                        35,\n                        0,\n                        11,\n                        36,\n                        1,\n                        1,\n                        126,\n                        32,\n                        0,\n                        173,\n                        32,\n                        1,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        32,\n                        2,\n                        173,\n                        32,\n                        3,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        126,\n                        34,\n                        4,\n                        66,\n                        32,\n                        135,\n                        167,\n                        36,\n                        0,\n                        32,\n                        4,\n                        167,\n                        11,\n                        36,\n                        1,\n                        1,\n                        126,\n                        32,\n                        0,\n                        173,\n                        32,\n                        1,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        32,\n                        2,\n                        173,\n                        32,\n                        3,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        127,\n                        34,\n                        4,\n                        66,\n                        32,\n                        135,\n                        167,\n                        36,\n                        0,\n                        32,\n                        4,\n                        167,\n                        11,\n                        36,\n                        1,\n                        1,\n                        126,\n                        32,\n                        0,\n                        173,\n                        32,\n                        1,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        32,\n                        2,\n                        173,\n                        32,\n                        3,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        128,\n                        34,\n                        4,\n                        66,\n                        32,\n                        135,\n                        167,\n                        36,\n                        0,\n                        32,\n                        4,\n                        167,\n                        11,\n                        36,\n                        1,\n                        1,\n                        126,\n                        32,\n                        0,\n                        173,\n                        32,\n                        1,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        32,\n                        2,\n                        173,\n                        32,\n                        3,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        129,\n                        34,\n                        4,\n                        66,\n                        32,\n                        135,\n                        167,\n                        36,\n                        0,\n                        32,\n                        4,\n                        167,\n                        11,\n                        36,\n                        1,\n                        1,\n                        126,\n                        32,\n                        0,\n                        173,\n                        32,\n                        1,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        32,\n                        2,\n                        173,\n                        32,\n                        3,\n                        173,\n                        66,\n                        32,\n                        134,\n                        132,\n                        130,\n                        34,\n                        4,\n                        66,\n                        32,\n                        135,\n                        167,\n                        36,\n                        0,\n                        32,\n                        4,\n                        167,\n                        11\n                    ])), {}).exports;\n                } catch (e1) {}\n                function n1(e1, t1, n1) {\n                    this.low = 0 | e1, this.high = 0 | t1, this.unsigned = !!n1;\n                }\n                function r1(e1) {\n                    return !0 === (e1 && e1.__isLong__);\n                }\n                function o1(e1) {\n                    var t1 = Math.clz32(e1 & -e1);\n                    return e1 ? 31 - t1 : t1;\n                }\n                n1.prototype.__isLong__, Object.defineProperty(n1.prototype, \"__isLong__\", {\n                    value: !0\n                }), n1.isLong = r1;\n                var i1 = {}, s1 = {};\n                function a1(e1, t1) {\n                    var n1, r1, o1;\n                    return t1 ? (o1 = 0 <= (e1 >>>= 0) && e1 < 256) && (r1 = s1[e1]) ? r1 : (n1 = l1(e1, 0, !0), o1 && (s1[e1] = n1), n1) : (o1 = -128 <= (e1 |= 0) && e1 < 128) && (r1 = i1[e1]) ? r1 : (n1 = l1(e1, e1 < 0 ? -1 : 0, !1), o1 && (i1[e1] = n1), n1);\n                }\n                function u1(e1, t1) {\n                    if (isNaN(e1)) return t1 ? y1 : m1;\n                    if (t1) {\n                        if (e1 < 0) return y1;\n                        if (e1 >= h1) return w1;\n                    } else {\n                        if (e1 <= -g1) return O1;\n                        if (e1 + 1 >= g1) return x1;\n                    }\n                    return e1 < 0 ? u1(-e1, t1).neg() : l1(e1 % f1 | 0, e1 / f1 | 0, t1);\n                }\n                function l1(e1, t1, r1) {\n                    return new n1(e1, t1, r1);\n                }\n                n1.fromInt = a1, n1.fromNumber = u1, n1.fromBits = l1;\n                var c1 = Math.pow;\n                function p1(e1, t1, n1) {\n                    if (0 === e1.length) throw Error(\"empty string\");\n                    if (\"number\" == typeof t1 ? (n1 = t1, t1 = !1) : t1 = !!t1, \"NaN\" === e1 || \"Infinity\" === e1 || \"+Infinity\" === e1 || \"-Infinity\" === e1) return t1 ? y1 : m1;\n                    if ((n1 = n1 || 10) < 2 || 36 < n1) throw RangeError(\"radix\");\n                    var r1;\n                    if ((r1 = e1.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");\n                    if (0 === r1) return p1(e1.substring(1), t1, n1).neg();\n                    for(var o1 = u1(c1(n1, 8)), i1 = m1, s1 = 0; s1 < e1.length; s1 += 8){\n                        var a1 = Math.min(8, e1.length - s1), l1 = parseInt(e1.substring(s1, s1 + a1), n1);\n                        if (a1 < 8) {\n                            var d1 = u1(c1(n1, a1));\n                            i1 = i1.mul(d1).add(u1(l1));\n                        } else i1 = (i1 = i1.mul(o1)).add(u1(l1));\n                    }\n                    return i1.unsigned = t1, i1;\n                }\n                function d1(e1, t1) {\n                    return \"number\" == typeof e1 ? u1(e1, t1) : \"string\" == typeof e1 ? p1(e1, t1) : l1(e1.low, e1.high, \"boolean\" == typeof t1 ? t1 : e1.unsigned);\n                }\n                n1.fromString = p1, n1.fromValue = d1;\n                var f1 = 4294967296, h1 = f1 * f1, g1 = h1 / 2, b1 = a1(1 << 24), m1 = a1(0);\n                n1.ZERO = m1;\n                var y1 = a1(0, !0);\n                n1.UZERO = y1;\n                var _1 = a1(1);\n                n1.ONE = _1;\n                var v1 = a1(1, !0);\n                n1.UONE = v1;\n                var T1 = a1(-1);\n                n1.NEG_ONE = T1;\n                var x1 = l1(-1, 2147483647, !1);\n                n1.MAX_VALUE = x1;\n                var w1 = l1(-1, -1, !0);\n                n1.MAX_UNSIGNED_VALUE = w1;\n                var O1 = l1(0, -2147483648, !1);\n                n1.MIN_VALUE = O1;\n                var S1 = n1.prototype;\n                S1.toInt = function() {\n                    return this.unsigned ? this.low >>> 0 : this.low;\n                }, S1.toNumber = function() {\n                    return this.unsigned ? (this.high >>> 0) * f1 + (this.low >>> 0) : this.high * f1 + (this.low >>> 0);\n                }, S1.toString = function(e1) {\n                    if ((e1 = e1 || 10) < 2 || 36 < e1) throw RangeError(\"radix\");\n                    if (this.isZero()) return \"0\";\n                    if (this.isNegative()) {\n                        if (this.eq(O1)) {\n                            var t1 = u1(e1), n1 = this.div(t1), r1 = n1.mul(t1).sub(this);\n                            return n1.toString(e1) + r1.toInt().toString(e1);\n                        }\n                        return \"-\" + this.neg().toString(e1);\n                    }\n                    for(var o1 = u1(c1(e1, 6), this.unsigned), i1 = this, s1 = \"\";;){\n                        var a1 = i1.div(o1), l1 = (i1.sub(a1.mul(o1)).toInt() >>> 0).toString(e1);\n                        if ((i1 = a1).isZero()) return l1 + s1;\n                        for(; l1.length < 6;)l1 = \"0\" + l1;\n                        s1 = \"\" + l1 + s1;\n                    }\n                }, S1.getHighBits = function() {\n                    return this.high;\n                }, S1.getHighBitsUnsigned = function() {\n                    return this.high >>> 0;\n                }, S1.getLowBits = function() {\n                    return this.low;\n                }, S1.getLowBitsUnsigned = function() {\n                    return this.low >>> 0;\n                }, S1.getNumBitsAbs = function() {\n                    if (this.isNegative()) return this.eq(O1) ? 64 : this.neg().getNumBitsAbs();\n                    for(var e1 = 0 != this.high ? this.high : this.low, t1 = 31; t1 > 0 && 0 == (e1 & 1 << t1); t1--);\n                    return 0 != this.high ? t1 + 33 : t1 + 1;\n                }, S1.isZero = function() {\n                    return 0 === this.high && 0 === this.low;\n                }, S1.eqz = S1.isZero, S1.isNegative = function() {\n                    return !this.unsigned && this.high < 0;\n                }, S1.isPositive = function() {\n                    return this.unsigned || this.high >= 0;\n                }, S1.isOdd = function() {\n                    return 1 == (1 & this.low);\n                }, S1.isEven = function() {\n                    return 0 == (1 & this.low);\n                }, S1.equals = function(e1) {\n                    return r1(e1) || (e1 = d1(e1)), (this.unsigned === e1.unsigned || this.high >>> 31 != 1 || e1.high >>> 31 != 1) && this.high === e1.high && this.low === e1.low;\n                }, S1.eq = S1.equals, S1.notEquals = function(e1) {\n                    return !this.eq(e1);\n                }, S1.neq = S1.notEquals, S1.ne = S1.notEquals, S1.lessThan = function(e1) {\n                    return this.comp(e1) < 0;\n                }, S1.lt = S1.lessThan, S1.lessThanOrEqual = function(e1) {\n                    return this.comp(e1) <= 0;\n                }, S1.lte = S1.lessThanOrEqual, S1.le = S1.lessThanOrEqual, S1.greaterThan = function(e1) {\n                    return this.comp(e1) > 0;\n                }, S1.gt = S1.greaterThan, S1.greaterThanOrEqual = function(e1) {\n                    return this.comp(e1) >= 0;\n                }, S1.gte = S1.greaterThanOrEqual, S1.ge = S1.greaterThanOrEqual, S1.compare = function(e1) {\n                    if (r1(e1) || (e1 = d1(e1)), this.eq(e1)) return 0;\n                    var t1 = this.isNegative(), n1 = e1.isNegative();\n                    return t1 && !n1 ? -1 : !t1 && n1 ? 1 : this.unsigned ? e1.high >>> 0 > this.high >>> 0 || e1.high === this.high && e1.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(e1).isNegative() ? -1 : 1;\n                }, S1.comp = S1.compare, S1.negate = function() {\n                    return !this.unsigned && this.eq(O1) ? O1 : this.not().add(_1);\n                }, S1.neg = S1.negate, S1.add = function(e1) {\n                    r1(e1) || (e1 = d1(e1));\n                    var t1 = this.high >>> 16, n1 = 65535 & this.high, o1 = this.low >>> 16, i1 = 65535 & this.low, s1 = e1.high >>> 16, a1 = 65535 & e1.high, u1 = e1.low >>> 16, c1 = 0, p1 = 0, f1 = 0, h1 = 0;\n                    return f1 += (h1 += i1 + (65535 & e1.low)) >>> 16, p1 += (f1 += o1 + u1) >>> 16, c1 += (p1 += n1 + a1) >>> 16, c1 += t1 + s1, l1((f1 &= 65535) << 16 | (h1 &= 65535), (c1 &= 65535) << 16 | (p1 &= 65535), this.unsigned);\n                }, S1.subtract = function(e1) {\n                    return r1(e1) || (e1 = d1(e1)), this.add(e1.neg());\n                }, S1.sub = S1.subtract, S1.multiply = function(e1) {\n                    if (this.isZero()) return this;\n                    if (r1(e1) || (e1 = d1(e1)), t1) return l1(t1.mul(this.low, this.high, e1.low, e1.high), t1.get_high(), this.unsigned);\n                    if (e1.isZero()) return this.unsigned ? y1 : m1;\n                    if (this.eq(O1)) return e1.isOdd() ? O1 : m1;\n                    if (e1.eq(O1)) return this.isOdd() ? O1 : m1;\n                    if (this.isNegative()) return e1.isNegative() ? this.neg().mul(e1.neg()) : this.neg().mul(e1).neg();\n                    if (e1.isNegative()) return this.mul(e1.neg()).neg();\n                    if (this.lt(b1) && e1.lt(b1)) return u1(this.toNumber() * e1.toNumber(), this.unsigned);\n                    var n1 = this.high >>> 16, o1 = 65535 & this.high, i1 = this.low >>> 16, s1 = 65535 & this.low, a1 = e1.high >>> 16, c1 = 65535 & e1.high, p1 = e1.low >>> 16, f1 = 65535 & e1.low, h1 = 0, g1 = 0, _1 = 0, v1 = 0;\n                    return _1 += (v1 += s1 * f1) >>> 16, g1 += (_1 += i1 * f1) >>> 16, _1 &= 65535, g1 += (_1 += s1 * p1) >>> 16, h1 += (g1 += o1 * f1) >>> 16, g1 &= 65535, h1 += (g1 += i1 * p1) >>> 16, g1 &= 65535, h1 += (g1 += s1 * c1) >>> 16, h1 += n1 * f1 + o1 * p1 + i1 * c1 + s1 * a1, l1((_1 &= 65535) << 16 | (v1 &= 65535), (h1 &= 65535) << 16 | (g1 &= 65535), this.unsigned);\n                }, S1.mul = S1.multiply, S1.divide = function(e1) {\n                    if (r1(e1) || (e1 = d1(e1)), e1.isZero()) throw Error(\"division by zero\");\n                    var n1, o1, i1;\n                    if (t1) return this.unsigned || -2147483648 !== this.high || -1 !== e1.low || -1 !== e1.high ? l1((this.unsigned ? t1.div_u : t1.div_s)(this.low, this.high, e1.low, e1.high), t1.get_high(), this.unsigned) : this;\n                    if (this.isZero()) return this.unsigned ? y1 : m1;\n                    if (this.unsigned) {\n                        if (e1.unsigned || (e1 = e1.toUnsigned()), e1.gt(this)) return y1;\n                        if (e1.gt(this.shru(1))) return v1;\n                        i1 = y1;\n                    } else {\n                        if (this.eq(O1)) return e1.eq(_1) || e1.eq(T1) ? O1 : e1.eq(O1) ? _1 : (n1 = this.shr(1).div(e1).shl(1)).eq(m1) ? e1.isNegative() ? _1 : T1 : (o1 = this.sub(e1.mul(n1)), i1 = n1.add(o1.div(e1)));\n                        if (e1.eq(O1)) return this.unsigned ? y1 : m1;\n                        if (this.isNegative()) return e1.isNegative() ? this.neg().div(e1.neg()) : this.neg().div(e1).neg();\n                        if (e1.isNegative()) return this.div(e1.neg()).neg();\n                        i1 = m1;\n                    }\n                    for(o1 = this; o1.gte(e1);){\n                        n1 = Math.max(1, Math.floor(o1.toNumber() / e1.toNumber()));\n                        for(var s1 = Math.ceil(Math.log(n1) / Math.LN2), a1 = s1 <= 48 ? 1 : c1(2, s1 - 48), p1 = u1(n1), f1 = p1.mul(e1); f1.isNegative() || f1.gt(o1);)f1 = (p1 = u1(n1 -= a1, this.unsigned)).mul(e1);\n                        p1.isZero() && (p1 = _1), i1 = i1.add(p1), o1 = o1.sub(f1);\n                    }\n                    return i1;\n                }, S1.div = S1.divide, S1.modulo = function(e1) {\n                    return r1(e1) || (e1 = d1(e1)), t1 ? l1((this.unsigned ? t1.rem_u : t1.rem_s)(this.low, this.high, e1.low, e1.high), t1.get_high(), this.unsigned) : this.sub(this.div(e1).mul(e1));\n                }, S1.mod = S1.modulo, S1.rem = S1.modulo, S1.not = function() {\n                    return l1(~this.low, ~this.high, this.unsigned);\n                }, S1.countLeadingZeros = function() {\n                    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n                }, S1.clz = S1.countLeadingZeros, S1.countTrailingZeros = function() {\n                    return this.low ? o1(this.low) : o1(this.high) + 32;\n                }, S1.ctz = S1.countTrailingZeros, S1.and = function(e1) {\n                    return r1(e1) || (e1 = d1(e1)), l1(this.low & e1.low, this.high & e1.high, this.unsigned);\n                }, S1.or = function(e1) {\n                    return r1(e1) || (e1 = d1(e1)), l1(this.low | e1.low, this.high | e1.high, this.unsigned);\n                }, S1.xor = function(e1) {\n                    return r1(e1) || (e1 = d1(e1)), l1(this.low ^ e1.low, this.high ^ e1.high, this.unsigned);\n                }, S1.shiftLeft = function(e1) {\n                    return r1(e1) && (e1 = e1.toInt()), 0 == (e1 &= 63) ? this : e1 < 32 ? l1(this.low << e1, this.high << e1 | this.low >>> 32 - e1, this.unsigned) : l1(0, this.low << e1 - 32, this.unsigned);\n                }, S1.shl = S1.shiftLeft, S1.shiftRight = function(e1) {\n                    return r1(e1) && (e1 = e1.toInt()), 0 == (e1 &= 63) ? this : e1 < 32 ? l1(this.low >>> e1 | this.high << 32 - e1, this.high >> e1, this.unsigned) : l1(this.high >> e1 - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n                }, S1.shr = S1.shiftRight, S1.shiftRightUnsigned = function(e1) {\n                    return r1(e1) && (e1 = e1.toInt()), 0 == (e1 &= 63) ? this : e1 < 32 ? l1(this.low >>> e1 | this.high << 32 - e1, this.high >>> e1, this.unsigned) : l1(32 === e1 ? this.high : this.high >>> e1 - 32, 0, this.unsigned);\n                }, S1.shru = S1.shiftRightUnsigned, S1.shr_u = S1.shiftRightUnsigned, S1.rotateLeft = function(e1) {\n                    var t1;\n                    return r1(e1) && (e1 = e1.toInt()), 0 == (e1 &= 63) ? this : 32 === e1 ? l1(this.high, this.low, this.unsigned) : e1 < 32 ? (t1 = 32 - e1, l1(this.low << e1 | this.high >>> t1, this.high << e1 | this.low >>> t1, this.unsigned)) : (t1 = 32 - (e1 -= 32), l1(this.high << e1 | this.low >>> t1, this.low << e1 | this.high >>> t1, this.unsigned));\n                }, S1.rotl = S1.rotateLeft, S1.rotateRight = function(e1) {\n                    var t1;\n                    return r1(e1) && (e1 = e1.toInt()), 0 == (e1 &= 63) ? this : 32 === e1 ? l1(this.high, this.low, this.unsigned) : e1 < 32 ? (t1 = 32 - e1, l1(this.high << t1 | this.low >>> e1, this.low << t1 | this.high >>> e1, this.unsigned)) : (t1 = 32 - (e1 -= 32), l1(this.low << t1 | this.high >>> e1, this.high << t1 | this.low >>> e1, this.unsigned));\n                }, S1.rotr = S1.rotateRight, S1.toSigned = function() {\n                    return this.unsigned ? l1(this.low, this.high, !1) : this;\n                }, S1.toUnsigned = function() {\n                    return this.unsigned ? this : l1(this.low, this.high, !0);\n                }, S1.toBytes = function(e1) {\n                    return e1 ? this.toBytesLE() : this.toBytesBE();\n                }, S1.toBytesLE = function() {\n                    var e1 = this.high, t1 = this.low;\n                    return [\n                        255 & t1,\n                        t1 >>> 8 & 255,\n                        t1 >>> 16 & 255,\n                        t1 >>> 24,\n                        255 & e1,\n                        e1 >>> 8 & 255,\n                        e1 >>> 16 & 255,\n                        e1 >>> 24\n                    ];\n                }, S1.toBytesBE = function() {\n                    var e1 = this.high, t1 = this.low;\n                    return [\n                        e1 >>> 24,\n                        e1 >>> 16 & 255,\n                        e1 >>> 8 & 255,\n                        255 & e1,\n                        t1 >>> 24,\n                        t1 >>> 16 & 255,\n                        t1 >>> 8 & 255,\n                        255 & t1\n                    ];\n                }, n1.fromBytes = function(e1, t1, r1) {\n                    return r1 ? n1.fromBytesLE(e1, t1) : n1.fromBytesBE(e1, t1);\n                }, n1.fromBytesLE = function(e1, t1) {\n                    return new n1(e1[0] | e1[1] << 8 | e1[2] << 16 | e1[3] << 24, e1[4] | e1[5] << 8 | e1[6] << 16 | e1[7] << 24, t1);\n                }, n1.fromBytesBE = function(e1, t1) {\n                    return new n1(e1[4] << 24 | e1[5] << 16 | e1[6] << 8 | e1[7], e1[0] << 24 | e1[1] << 16 | e1[2] << 8 | e1[3], t1);\n                };\n                var A1 = n1;\n                return e1.default = A1, \"default\" in e1 ? e1.default : e1;\n            }({});\n            void 0 === (n1 = (function() {\n                return r1;\n            }).apply(t1, [])) || (e1.exports = n1);\n        },\n        5686: (e1, t1, n1)=>{\n            \"use strict\";\n            n1.r(t1), n1.d(t1, {\n                flatbuffers: ()=>r1\n            });\n            var r1 = {};\n            r1.Offset, r1.Table, r1.SIZEOF_SHORT = 2, r1.SIZEOF_INT = 4, r1.FILE_IDENTIFIER_LENGTH = 4, r1.SIZE_PREFIX_LENGTH = 4, r1.Encoding = {\n                UTF8_BYTES: 1,\n                UTF16_STRING: 2\n            }, r1.int32 = new Int32Array(2), r1.float32 = new Float32Array(r1.int32.buffer), r1.float64 = new Float64Array(r1.int32.buffer), r1.isLittleEndian = 1 === new Uint16Array(new Uint8Array([\n                1,\n                0\n            ]).buffer)[0], r1.Long = function(e1, t1) {\n                this.low = 0 | e1, this.high = 0 | t1;\n            }, r1.Long.create = function(e1, t1) {\n                return 0 == e1 && 0 == t1 ? r1.Long.ZERO : new r1.Long(e1, t1);\n            }, r1.Long.prototype.toFloat64 = function() {\n                return (this.low >>> 0) + 4294967296 * this.high;\n            }, r1.Long.prototype.equals = function(e1) {\n                return this.low == e1.low && this.high == e1.high;\n            }, r1.Long.ZERO = new r1.Long(0, 0), r1.Builder = function(e1) {\n                if (e1) t1 = e1;\n                else var t1 = 1024;\n                this.bb = r1.ByteBuffer.allocate(t1), this.space = t1, this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = !1, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = !1;\n            }, r1.Builder.prototype.clear = function() {\n                this.bb.clear(), this.space = this.bb.capacity(), this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = !1, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = !1;\n            }, r1.Builder.prototype.forceDefaults = function(e1) {\n                this.force_defaults = e1;\n            }, r1.Builder.prototype.dataBuffer = function() {\n                return this.bb;\n            }, r1.Builder.prototype.asUint8Array = function() {\n                return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n            }, r1.Builder.prototype.prep = function(e1, t1) {\n                e1 > this.minalign && (this.minalign = e1);\n                for(var n1 = 1 + ~(this.bb.capacity() - this.space + t1) & e1 - 1; this.space < n1 + e1 + t1;){\n                    var o1 = this.bb.capacity();\n                    this.bb = r1.Builder.growByteBuffer(this.bb), this.space += this.bb.capacity() - o1;\n                }\n                this.pad(n1);\n            }, r1.Builder.prototype.pad = function(e1) {\n                for(var t1 = 0; t1 < e1; t1++)this.bb.writeInt8(--this.space, 0);\n            }, r1.Builder.prototype.writeInt8 = function(e1) {\n                this.bb.writeInt8(this.space -= 1, e1);\n            }, r1.Builder.prototype.writeInt16 = function(e1) {\n                this.bb.writeInt16(this.space -= 2, e1);\n            }, r1.Builder.prototype.writeInt32 = function(e1) {\n                this.bb.writeInt32(this.space -= 4, e1);\n            }, r1.Builder.prototype.writeInt64 = function(e1) {\n                this.bb.writeInt64(this.space -= 8, e1);\n            }, r1.Builder.prototype.writeFloat32 = function(e1) {\n                this.bb.writeFloat32(this.space -= 4, e1);\n            }, r1.Builder.prototype.writeFloat64 = function(e1) {\n                this.bb.writeFloat64(this.space -= 8, e1);\n            }, r1.Builder.prototype.addInt8 = function(e1) {\n                this.prep(1, 0), this.writeInt8(e1);\n            }, r1.Builder.prototype.addInt16 = function(e1) {\n                this.prep(2, 0), this.writeInt16(e1);\n            }, r1.Builder.prototype.addInt32 = function(e1) {\n                this.prep(4, 0), this.writeInt32(e1);\n            }, r1.Builder.prototype.addInt64 = function(e1) {\n                this.prep(8, 0), this.writeInt64(e1);\n            }, r1.Builder.prototype.addFloat32 = function(e1) {\n                this.prep(4, 0), this.writeFloat32(e1);\n            }, r1.Builder.prototype.addFloat64 = function(e1) {\n                this.prep(8, 0), this.writeFloat64(e1);\n            }, r1.Builder.prototype.addFieldInt8 = function(e1, t1, n1) {\n                (this.force_defaults || t1 != n1) && (this.addInt8(t1), this.slot(e1));\n            }, r1.Builder.prototype.addFieldInt16 = function(e1, t1, n1) {\n                (this.force_defaults || t1 != n1) && (this.addInt16(t1), this.slot(e1));\n            }, r1.Builder.prototype.addFieldInt32 = function(e1, t1, n1) {\n                (this.force_defaults || t1 != n1) && (this.addInt32(t1), this.slot(e1));\n            }, r1.Builder.prototype.addFieldInt64 = function(e1, t1, n1) {\n                !this.force_defaults && t1.equals(n1) || (this.addInt64(t1), this.slot(e1));\n            }, r1.Builder.prototype.addFieldFloat32 = function(e1, t1, n1) {\n                (this.force_defaults || t1 != n1) && (this.addFloat32(t1), this.slot(e1));\n            }, r1.Builder.prototype.addFieldFloat64 = function(e1, t1, n1) {\n                (this.force_defaults || t1 != n1) && (this.addFloat64(t1), this.slot(e1));\n            }, r1.Builder.prototype.addFieldOffset = function(e1, t1, n1) {\n                (this.force_defaults || t1 != n1) && (this.addOffset(t1), this.slot(e1));\n            }, r1.Builder.prototype.addFieldStruct = function(e1, t1, n1) {\n                t1 != n1 && (this.nested(t1), this.slot(e1));\n            }, r1.Builder.prototype.nested = function(e1) {\n                if (e1 != this.offset()) throw new Error(\"FlatBuffers: struct must be serialized inline.\");\n            }, r1.Builder.prototype.notNested = function() {\n                if (this.isNested) throw new Error(\"FlatBuffers: object serialization must not be nested.\");\n            }, r1.Builder.prototype.slot = function(e1) {\n                this.vtable[e1] = this.offset();\n            }, r1.Builder.prototype.offset = function() {\n                return this.bb.capacity() - this.space;\n            }, r1.Builder.growByteBuffer = function(e1) {\n                var t1 = e1.capacity();\n                if (3221225472 & t1) throw new Error(\"FlatBuffers: cannot grow buffer beyond 2 gigabytes.\");\n                var n1 = t1 << 1, o1 = r1.ByteBuffer.allocate(n1);\n                return o1.setPosition(n1 - t1), o1.bytes().set(e1.bytes(), n1 - t1), o1;\n            }, r1.Builder.prototype.addOffset = function(e1) {\n                this.prep(r1.SIZEOF_INT, 0), this.writeInt32(this.offset() - e1 + r1.SIZEOF_INT);\n            }, r1.Builder.prototype.startObject = function(e1) {\n                this.notNested(), null == this.vtable && (this.vtable = []), this.vtable_in_use = e1;\n                for(var t1 = 0; t1 < e1; t1++)this.vtable[t1] = 0;\n                this.isNested = !0, this.object_start = this.offset();\n            }, r1.Builder.prototype.endObject = function() {\n                if (null == this.vtable || !this.isNested) throw new Error(\"FlatBuffers: endObject called without startObject\");\n                this.addInt32(0);\n                for(var e1 = this.offset(), t1 = this.vtable_in_use - 1; t1 >= 0 && 0 == this.vtable[t1]; t1--);\n                for(var n1 = t1 + 1; t1 >= 0; t1--)this.addInt16(0 != this.vtable[t1] ? e1 - this.vtable[t1] : 0);\n                this.addInt16(e1 - this.object_start);\n                var o1 = (n1 + 2) * r1.SIZEOF_SHORT;\n                this.addInt16(o1);\n                var i1 = 0, s1 = this.space;\n                e: for(t1 = 0; t1 < this.vtables.length; t1++){\n                    var a1 = this.bb.capacity() - this.vtables[t1];\n                    if (o1 == this.bb.readInt16(a1)) {\n                        for(var u1 = r1.SIZEOF_SHORT; u1 < o1; u1 += r1.SIZEOF_SHORT)if (this.bb.readInt16(s1 + u1) != this.bb.readInt16(a1 + u1)) continue e;\n                        i1 = this.vtables[t1];\n                        break;\n                    }\n                }\n                return i1 ? (this.space = this.bb.capacity() - e1, this.bb.writeInt32(this.space, i1 - e1)) : (this.vtables.push(this.offset()), this.bb.writeInt32(this.bb.capacity() - e1, this.offset() - e1)), this.isNested = !1, e1;\n            }, r1.Builder.prototype.finish = function(e1, t1, n1) {\n                var o1 = n1 ? r1.SIZE_PREFIX_LENGTH : 0;\n                if (t1) {\n                    var i1 = t1;\n                    if (this.prep(this.minalign, r1.SIZEOF_INT + r1.FILE_IDENTIFIER_LENGTH + o1), i1.length != r1.FILE_IDENTIFIER_LENGTH) throw new Error(\"FlatBuffers: file identifier must be length \" + r1.FILE_IDENTIFIER_LENGTH);\n                    for(var s1 = r1.FILE_IDENTIFIER_LENGTH - 1; s1 >= 0; s1--)this.writeInt8(i1.charCodeAt(s1));\n                }\n                this.prep(this.minalign, r1.SIZEOF_INT + o1), this.addOffset(e1), o1 && this.addInt32(this.bb.capacity() - this.space), this.bb.setPosition(this.space);\n            }, r1.Builder.prototype.finishSizePrefixed = function(e1, t1) {\n                this.finish(e1, t1, !0);\n            }, r1.Builder.prototype.requiredField = function(e1, t1) {\n                var n1 = this.bb.capacity() - e1, r1 = n1 - this.bb.readInt32(n1);\n                if (0 == this.bb.readInt16(r1 + t1)) throw new Error(\"FlatBuffers: field \" + t1 + \" must be set\");\n            }, r1.Builder.prototype.startVector = function(e1, t1, n1) {\n                this.notNested(), this.vector_num_elems = t1, this.prep(r1.SIZEOF_INT, e1 * t1), this.prep(n1, e1 * t1);\n            }, r1.Builder.prototype.endVector = function() {\n                return this.writeInt32(this.vector_num_elems), this.offset();\n            }, r1.Builder.prototype.createString = function(e1) {\n                if (e1 instanceof Uint8Array) var t1 = e1;\n                else {\n                    t1 = [];\n                    for(var n1 = 0; n1 < e1.length;){\n                        var r1, o1 = e1.charCodeAt(n1++);\n                        (r1 = o1 < 55296 || o1 >= 56320 ? o1 : (o1 << 10) + e1.charCodeAt(n1++) + -56613888) < 128 ? t1.push(r1) : (r1 < 2048 ? t1.push(r1 >> 6 & 31 | 192) : (r1 < 65536 ? t1.push(r1 >> 12 & 15 | 224) : t1.push(r1 >> 18 & 7 | 240, r1 >> 12 & 63 | 128), t1.push(r1 >> 6 & 63 | 128)), t1.push(63 & r1 | 128));\n                    }\n                }\n                this.addInt8(0), this.startVector(1, t1.length, 1), this.bb.setPosition(this.space -= t1.length), n1 = 0;\n                for(var i1 = this.space, s1 = this.bb.bytes(); n1 < t1.length; n1++)s1[i1++] = t1[n1];\n                return this.endVector();\n            }, r1.Builder.prototype.createLong = function(e1, t1) {\n                return r1.Long.create(e1, t1);\n            }, r1.ByteBuffer = function(e1) {\n                this.bytes_ = e1, this.position_ = 0;\n            }, r1.ByteBuffer.allocate = function(e1) {\n                return new r1.ByteBuffer(new Uint8Array(e1));\n            }, r1.ByteBuffer.prototype.clear = function() {\n                this.position_ = 0;\n            }, r1.ByteBuffer.prototype.bytes = function() {\n                return this.bytes_;\n            }, r1.ByteBuffer.prototype.position = function() {\n                return this.position_;\n            }, r1.ByteBuffer.prototype.setPosition = function(e1) {\n                this.position_ = e1;\n            }, r1.ByteBuffer.prototype.capacity = function() {\n                return this.bytes_.length;\n            }, r1.ByteBuffer.prototype.readInt8 = function(e1) {\n                return this.readUint8(e1) << 24 >> 24;\n            }, r1.ByteBuffer.prototype.readUint8 = function(e1) {\n                return this.bytes_[e1];\n            }, r1.ByteBuffer.prototype.readInt16 = function(e1) {\n                return this.readUint16(e1) << 16 >> 16;\n            }, r1.ByteBuffer.prototype.readUint16 = function(e1) {\n                return this.bytes_[e1] | this.bytes_[e1 + 1] << 8;\n            }, r1.ByteBuffer.prototype.readInt32 = function(e1) {\n                return this.bytes_[e1] | this.bytes_[e1 + 1] << 8 | this.bytes_[e1 + 2] << 16 | this.bytes_[e1 + 3] << 24;\n            }, r1.ByteBuffer.prototype.readUint32 = function(e1) {\n                return this.readInt32(e1) >>> 0;\n            }, r1.ByteBuffer.prototype.readInt64 = function(e1) {\n                return new r1.Long(this.readInt32(e1), this.readInt32(e1 + 4));\n            }, r1.ByteBuffer.prototype.readUint64 = function(e1) {\n                return new r1.Long(this.readUint32(e1), this.readUint32(e1 + 4));\n            }, r1.ByteBuffer.prototype.readFloat32 = function(e1) {\n                return r1.int32[0] = this.readInt32(e1), r1.float32[0];\n            }, r1.ByteBuffer.prototype.readFloat64 = function(e1) {\n                return r1.int32[r1.isLittleEndian ? 0 : 1] = this.readInt32(e1), r1.int32[r1.isLittleEndian ? 1 : 0] = this.readInt32(e1 + 4), r1.float64[0];\n            }, r1.ByteBuffer.prototype.writeInt8 = function(e1, t1) {\n                this.bytes_[e1] = t1;\n            }, r1.ByteBuffer.prototype.writeUint8 = function(e1, t1) {\n                this.bytes_[e1] = t1;\n            }, r1.ByteBuffer.prototype.writeInt16 = function(e1, t1) {\n                this.bytes_[e1] = t1, this.bytes_[e1 + 1] = t1 >> 8;\n            }, r1.ByteBuffer.prototype.writeUint16 = function(e1, t1) {\n                this.bytes_[e1] = t1, this.bytes_[e1 + 1] = t1 >> 8;\n            }, r1.ByteBuffer.prototype.writeInt32 = function(e1, t1) {\n                this.bytes_[e1] = t1, this.bytes_[e1 + 1] = t1 >> 8, this.bytes_[e1 + 2] = t1 >> 16, this.bytes_[e1 + 3] = t1 >> 24;\n            }, r1.ByteBuffer.prototype.writeUint32 = function(e1, t1) {\n                this.bytes_[e1] = t1, this.bytes_[e1 + 1] = t1 >> 8, this.bytes_[e1 + 2] = t1 >> 16, this.bytes_[e1 + 3] = t1 >> 24;\n            }, r1.ByteBuffer.prototype.writeInt64 = function(e1, t1) {\n                this.writeInt32(e1, t1.low), this.writeInt32(e1 + 4, t1.high);\n            }, r1.ByteBuffer.prototype.writeUint64 = function(e1, t1) {\n                this.writeUint32(e1, t1.low), this.writeUint32(e1 + 4, t1.high);\n            }, r1.ByteBuffer.prototype.writeFloat32 = function(e1, t1) {\n                r1.float32[0] = t1, this.writeInt32(e1, r1.int32[0]);\n            }, r1.ByteBuffer.prototype.writeFloat64 = function(e1, t1) {\n                r1.float64[0] = t1, this.writeInt32(e1, r1.int32[r1.isLittleEndian ? 0 : 1]), this.writeInt32(e1 + 4, r1.int32[r1.isLittleEndian ? 1 : 0]);\n            }, r1.ByteBuffer.prototype.getBufferIdentifier = function() {\n                if (this.bytes_.length < this.position_ + r1.SIZEOF_INT + r1.FILE_IDENTIFIER_LENGTH) throw new Error(\"FlatBuffers: ByteBuffer is too short to contain an identifier.\");\n                for(var e1 = \"\", t1 = 0; t1 < r1.FILE_IDENTIFIER_LENGTH; t1++)e1 += String.fromCharCode(this.readInt8(this.position_ + r1.SIZEOF_INT + t1));\n                return e1;\n            }, r1.ByteBuffer.prototype.__offset = function(e1, t1) {\n                var n1 = e1 - this.readInt32(e1);\n                return t1 < this.readInt16(n1) ? this.readInt16(n1 + t1) : 0;\n            }, r1.ByteBuffer.prototype.__union = function(e1, t1) {\n                return e1.bb_pos = t1 + this.readInt32(t1), e1.bb = this, e1;\n            }, r1.ByteBuffer.prototype.__string = function(e1, t1) {\n                e1 += this.readInt32(e1);\n                var n1 = this.readInt32(e1), o1 = \"\", i1 = 0;\n                if (e1 += r1.SIZEOF_INT, t1 === r1.Encoding.UTF8_BYTES) return this.bytes_.subarray(e1, e1 + n1);\n                for(; i1 < n1;){\n                    var s1, a1 = this.readUint8(e1 + i1++);\n                    if (a1 < 192) s1 = a1;\n                    else {\n                        var u1 = this.readUint8(e1 + i1++);\n                        if (a1 < 224) s1 = (31 & a1) << 6 | 63 & u1;\n                        else {\n                            var l1 = this.readUint8(e1 + i1++);\n                            s1 = a1 < 240 ? (15 & a1) << 12 | (63 & u1) << 6 | 63 & l1 : (7 & a1) << 18 | (63 & u1) << 12 | (63 & l1) << 6 | 63 & this.readUint8(e1 + i1++);\n                        }\n                    }\n                    s1 < 65536 ? o1 += String.fromCharCode(s1) : (s1 -= 65536, o1 += String.fromCharCode(55296 + (s1 >> 10), 56320 + (1023 & s1)));\n                }\n                return o1;\n            }, r1.ByteBuffer.prototype.__indirect = function(e1) {\n                return e1 + this.readInt32(e1);\n            }, r1.ByteBuffer.prototype.__vector = function(e1) {\n                return e1 + this.readInt32(e1) + r1.SIZEOF_INT;\n            }, r1.ByteBuffer.prototype.__vector_len = function(e1) {\n                return this.readInt32(e1 + this.readInt32(e1));\n            }, r1.ByteBuffer.prototype.__has_identifier = function(e1) {\n                if (e1.length != r1.FILE_IDENTIFIER_LENGTH) throw new Error(\"FlatBuffers: file identifier must be length \" + r1.FILE_IDENTIFIER_LENGTH);\n                for(var t1 = 0; t1 < r1.FILE_IDENTIFIER_LENGTH; t1++)if (e1.charCodeAt(t1) != this.readInt8(this.position_ + r1.SIZEOF_INT + t1)) return !1;\n                return !0;\n            }, r1.ByteBuffer.prototype.createLong = function(e1, t1) {\n                return r1.Long.create(e1, t1);\n            };\n        }\n    }, __webpack_module_cache__ = {};\n    function __nested_webpack_require_971500__(e1) {\n        var t1 = __webpack_module_cache__[e1];\n        if (void 0 !== t1) return t1.exports;\n        var n1 = __webpack_module_cache__[e1] = {\n            exports: {}\n        };\n        return __webpack_modules__[e1].call(n1.exports, n1, n1.exports, __nested_webpack_require_971500__), n1.exports;\n    }\n    __nested_webpack_require_971500__.n = (e1)=>{\n        var t1 = e1 && e1.__esModule ? ()=>e1.default : ()=>e1;\n        return __nested_webpack_require_971500__.d(t1, {\n            a: t1\n        }), t1;\n    }, __nested_webpack_require_971500__.d = (e1, t1)=>{\n        for(var n1 in t1)__nested_webpack_require_971500__.o(t1, n1) && !__nested_webpack_require_971500__.o(e1, n1) && Object.defineProperty(e1, n1, {\n            enumerable: !0,\n            get: t1[n1]\n        });\n    }, __nested_webpack_require_971500__.o = (e1, t1)=>Object.prototype.hasOwnProperty.call(e1, t1), __nested_webpack_require_971500__.r = (e1)=>{\n        \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e1, Symbol.toStringTag, {\n            value: \"Module\"\n        }), Object.defineProperty(e1, \"__esModule\", {\n            value: !0\n        });\n    };\n    var __nested_webpack_exports__ = __nested_webpack_require_971500__(1057), __webpack_export_target__ = exports;\n    for(var i in __nested_webpack_exports__)__webpack_export_target__[i] = __nested_webpack_exports__[i];\n    __nested_webpack_exports__.__esModule && Object.defineProperty(__webpack_export_target__, \"__esModule\", {\n        value: !0\n    });\n})(); //# sourceMappingURL=ort-web.node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/onnxruntime-web/dist/ort-web.node.js\n");

/***/ })

};
;